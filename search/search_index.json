{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"pyCirclize: Circular visualization in Python","text":""},{"location":"#overview","title":"Overview","text":"<p>pyCirclize is a circular visualization python package implemented based on matplotlib. This package is developed for the purpose of easily and beautifully plotting circular figure such as Circos Plot and Chord Diagram in Python. In addition, useful genome and phylogenetic tree visualization methods for the bioinformatics field are also implemented. pyCirclize was inspired by circlize and pyCircos.</p> <p> </p> pyCirclize example plot gallery"},{"location":"#installation","title":"Installation","text":"<p><code>Python 3.9 or later</code> is required for installation.</p> <p>Install PyPI package:</p> <pre><code>pip install pycirclize\n</code></pre> <p>Install conda-forge package:</p> <pre><code>conda install -c conda-forge pycirclize\n</code></pre>"},{"location":"#api-usage","title":"API Usage","text":"<p>API usage is described in each of the following sections.</p> <ul> <li>Getting Started</li> <li>Plot API Example</li> <li>Chord Diagram</li> <li>Radar Chart</li> <li>Circos Plot (Genomics)</li> <li>Comparative Genomics</li> <li>Phylogenetic Tree</li> <li>Plot Tips</li> </ul>"},{"location":"chord_diagram/","title":"Chord Diagram","text":"In\u00a0[1]: Copied! <pre># %pip install pycirclize\n</pre> # %pip install pycirclize In\u00a0[2]: Copied! <pre>from pycirclize import Circos\nimport pandas as pd\n\n# Create matrix dataframe (3 x 6)\nrow_names = [\"S1\", \"S2\", \"S3\"]\ncol_names = [\"E1\", \"E2\", \"E3\", \"E4\", \"E5\", \"E6\"]\nmatrix_data = [\n    [4, 14, 13, 17, 5, 2],\n    [7, 1, 6, 8, 12, 15],\n    [9, 10, 3, 16, 11, 18],\n]\nmatrix_df = pd.DataFrame(matrix_data, index=row_names, columns=col_names)\n\n# Initialize Circos instance for chord diagram plot\ncircos = Circos.chord_diagram(\n    matrix_df,\n    start=-265,\n    end=95,\n    space=5,\n    r_lim=(93, 100),\n    cmap=\"tab10\",\n    label_kws=dict(r=94, size=12, color=\"white\"),\n    link_kws=dict(ec=\"black\", lw=0.5),\n)\n\nprint(matrix_df)\nfig = circos.plotfig()\n</pre> from pycirclize import Circos import pandas as pd  # Create matrix dataframe (3 x 6) row_names = [\"S1\", \"S2\", \"S3\"] col_names = [\"E1\", \"E2\", \"E3\", \"E4\", \"E5\", \"E6\"] matrix_data = [     [4, 14, 13, 17, 5, 2],     [7, 1, 6, 8, 12, 15],     [9, 10, 3, 16, 11, 18], ] matrix_df = pd.DataFrame(matrix_data, index=row_names, columns=col_names)  # Initialize Circos instance for chord diagram plot circos = Circos.chord_diagram(     matrix_df,     start=-265,     end=95,     space=5,     r_lim=(93, 100),     cmap=\"tab10\",     label_kws=dict(r=94, size=12, color=\"white\"),     link_kws=dict(ec=\"black\", lw=0.5), )  print(matrix_df) fig = circos.plotfig() <pre>    E1  E2  E3  E4  E5  E6\nS1   4  14  13  17   5   2\nS2   7   1   6   8  12  15\nS3   9  10   3  16  11  18\n</pre> In\u00a0[3]: Copied! <pre>from pycirclize import Circos\nimport pandas as pd\n\n# Create matrix data (10 x 10)\nrow_names = list(\"ABCDEFGHIJ\")\ncol_names = row_names\nmatrix_data = [\n    [51, 115, 60, 17, 120, 126, 115, 179, 127, 114],\n    [108, 138, 165, 170, 85, 221, 75, 107, 203, 79],\n    [108, 54, 72, 123, 84, 117, 106, 114, 50, 27],\n    [62, 134, 28, 185, 199, 179, 74, 94, 116, 108],\n    [211, 114, 49, 55, 202, 97, 10, 52, 99, 111],\n    [87, 6, 101, 117, 124, 171, 110, 14, 175, 164],\n    [167, 99, 109, 143, 98, 42, 95, 163, 134, 78],\n    [88, 83, 136, 71, 122, 20, 38, 264, 225, 115],\n    [145, 82, 87, 123, 121, 55, 80, 32, 50, 12],\n    [122, 109, 84, 94, 133, 75, 71, 115, 60, 210],\n]\nmatrix_df = pd.DataFrame(matrix_data, index=row_names, columns=col_names)\n\n# Initialize Circos instance for chord diagram plot\ncircos = Circos.chord_diagram(\n    matrix_df,\n    space=3,\n    r_lim=(93, 100),\n    cmap=\"tab10\",\n    ticks_interval=500,\n    label_kws=dict(r=94, size=12, color=\"white\"),\n)\n\nprint(matrix_df)\nfig = circos.plotfig()\n</pre> from pycirclize import Circos import pandas as pd  # Create matrix data (10 x 10) row_names = list(\"ABCDEFGHIJ\") col_names = row_names matrix_data = [     [51, 115, 60, 17, 120, 126, 115, 179, 127, 114],     [108, 138, 165, 170, 85, 221, 75, 107, 203, 79],     [108, 54, 72, 123, 84, 117, 106, 114, 50, 27],     [62, 134, 28, 185, 199, 179, 74, 94, 116, 108],     [211, 114, 49, 55, 202, 97, 10, 52, 99, 111],     [87, 6, 101, 117, 124, 171, 110, 14, 175, 164],     [167, 99, 109, 143, 98, 42, 95, 163, 134, 78],     [88, 83, 136, 71, 122, 20, 38, 264, 225, 115],     [145, 82, 87, 123, 121, 55, 80, 32, 50, 12],     [122, 109, 84, 94, 133, 75, 71, 115, 60, 210], ] matrix_df = pd.DataFrame(matrix_data, index=row_names, columns=col_names)  # Initialize Circos instance for chord diagram plot circos = Circos.chord_diagram(     matrix_df,     space=3,     r_lim=(93, 100),     cmap=\"tab10\",     ticks_interval=500,     label_kws=dict(r=94, size=12, color=\"white\"), )  print(matrix_df) fig = circos.plotfig() <pre>     A    B    C    D    E    F    G    H    I    J\nA   51  115   60   17  120  126  115  179  127  114\nB  108  138  165  170   85  221   75  107  203   79\nC  108   54   72  123   84  117  106  114   50   27\nD   62  134   28  185  199  179   74   94  116  108\nE  211  114   49   55  202   97   10   52   99  111\nF   87    6  101  117  124  171  110   14  175  164\nG  167   99  109  143   98   42   95  163  134   78\nH   88   83  136   71  122   20   38  264  225  115\nI  145   82   87  123  121   55   80   32   50   12\nJ  122  109   84   94  133   75   71  115   60  210\n</pre> In\u00a0[4]: Copied! <pre>from pycirclize import Circos\nimport pandas as pd\n\n# Create matrix data (10 x 2)\nrow_names = list(\"ABCDEFGHIJ\")\ncol_names = list(\"KL\")\nmatrix_data = [\n    [83, 79],\n    [90, 118],\n    [165, 81],\n    [121, 77],\n    [187, 197],\n    [177, 8],\n    [141, 127],\n    [29, 27],\n    [95, 82],\n    [107, 39],\n]\nmatrix_df = pd.DataFrame(matrix_data, index=row_names, columns=col_names)\n\n# Define link_kws handler function to customize each link property\ndef link_kws_handler(from_label: str, to_label: str):\n    if from_label in (\"C\", \"G\"):\n        # Set alpha, zorder values higher than other links for highlighting\n        return dict(alpha=0.5, zorder=1.0)\n    else:\n        return dict(alpha=0.1, zorder=0)\n\n# Initialize Circos instance for chord diagram plot\ncircos = Circos.chord_diagram(\n    matrix_df,\n    space=2,\n    cmap=\"Set3\",\n    label_kws=dict(size=12),\n    link_kws=dict(direction=1, ec=\"black\", lw=0.5),\n    link_kws_handler=link_kws_handler,\n)\n\nprint(matrix_df)\nfig = circos.plotfig()\n</pre> from pycirclize import Circos import pandas as pd  # Create matrix data (10 x 2) row_names = list(\"ABCDEFGHIJ\") col_names = list(\"KL\") matrix_data = [     [83, 79],     [90, 118],     [165, 81],     [121, 77],     [187, 197],     [177, 8],     [141, 127],     [29, 27],     [95, 82],     [107, 39], ] matrix_df = pd.DataFrame(matrix_data, index=row_names, columns=col_names)  # Define link_kws handler function to customize each link property def link_kws_handler(from_label: str, to_label: str):     if from_label in (\"C\", \"G\"):         # Set alpha, zorder values higher than other links for highlighting         return dict(alpha=0.5, zorder=1.0)     else:         return dict(alpha=0.1, zorder=0)  # Initialize Circos instance for chord diagram plot circos = Circos.chord_diagram(     matrix_df,     space=2,     cmap=\"Set3\",     label_kws=dict(size=12),     link_kws=dict(direction=1, ec=\"black\", lw=0.5),     link_kws_handler=link_kws_handler, )  print(matrix_df) fig = circos.plotfig() <pre>     K    L\nA   83   79\nB   90  118\nC  165   81\nD  121   77\nE  187  197\nF  177    8\nG  141  127\nH   29   27\nI   95   82\nJ  107   39\n</pre> In\u00a0[5]: Copied! <pre>from pycirclize import Circos\nfrom pycirclize.parser import Matrix\nimport pandas as pd\n\n# Create from-to table dataframe &amp; convert to matrix\nfromto_table_df = pd.DataFrame(\n    [\n        [\"A\", \"B\", 10],\n        [\"A\", \"C\", 5],\n        [\"A\", \"D\", 15],\n        [\"B\", \"D\", 8],\n        [\"C\", \"D\", 6],\n    ],\n    columns=[\"from\", \"to\", \"value\"], # Column name is optional\n)\nmatrix = Matrix.parse_fromto_table(fromto_table_df)\n\n# Initialize Circos instance for chord diagram plot\ncircos = Circos.chord_diagram(\n    matrix,\n    space=3,\n    cmap=dict(A=\"royalblue\", B=\"orange\", C=\"green\", D=\"red\"),\n    label_kws=dict(size=12),\n)\n\nprint(fromto_table_df.to_string(index=False))\nfig = circos.plotfig()\n</pre> from pycirclize import Circos from pycirclize.parser import Matrix import pandas as pd  # Create from-to table dataframe &amp; convert to matrix fromto_table_df = pd.DataFrame(     [         [\"A\", \"B\", 10],         [\"A\", \"C\", 5],         [\"A\", \"D\", 15],         [\"B\", \"D\", 8],         [\"C\", \"D\", 6],     ],     columns=[\"from\", \"to\", \"value\"], # Column name is optional ) matrix = Matrix.parse_fromto_table(fromto_table_df)  # Initialize Circos instance for chord diagram plot circos = Circos.chord_diagram(     matrix,     space=3,     cmap=dict(A=\"royalblue\", B=\"orange\", C=\"green\", D=\"red\"),     label_kws=dict(size=12), )  print(fromto_table_df.to_string(index=False)) fig = circos.plotfig() <pre>from to  value\n   A  B     10\n   A  C      5\n   A  D     15\n   B  D      8\n   C  D      6\n</pre> In\u00a0[6]: Copied! <pre>from pycirclize import Circos\nfrom pycirclize.parser import Matrix\nimport pandas as pd\n\n# Create from-to table dataframe &amp; convert to matrix\nfromto_table_df = pd.DataFrame(\n    [\n        [\"A\", \"B\", 10],\n        [\"A\", \"C\", 5],\n        [\"A\", \"D\", 15],\n        [\"A\", \"E\", 20],\n        [\"A\", \"F\", 3],\n        [\"B\", \"A\", 3],\n        [\"B\", \"G\", 15],\n        [\"F\", \"D\", 13],\n        [\"F\", \"E\", 2],\n        [\"E\", \"A\", 20],\n        [\"E\", \"D\", 6],\n    ],\n    columns=[\"from\", \"to\", \"value\"], # Column name is optional\n)\nmatrix = Matrix.parse_fromto_table(fromto_table_df)\n\n# Initialize Circos instance for chord diagram plot\ncircos = Circos.chord_diagram(\n    matrix,\n    space=3,\n    cmap=\"viridis\",\n    ticks_interval=5,\n    label_kws=dict(size=12, r=110),\n    link_kws=dict(direction=1, ec=\"black\", lw=0.5),\n)\n\nprint(fromto_table_df.to_string(index=False))\nfig = circos.plotfig()\n</pre> from pycirclize import Circos from pycirclize.parser import Matrix import pandas as pd  # Create from-to table dataframe &amp; convert to matrix fromto_table_df = pd.DataFrame(     [         [\"A\", \"B\", 10],         [\"A\", \"C\", 5],         [\"A\", \"D\", 15],         [\"A\", \"E\", 20],         [\"A\", \"F\", 3],         [\"B\", \"A\", 3],         [\"B\", \"G\", 15],         [\"F\", \"D\", 13],         [\"F\", \"E\", 2],         [\"E\", \"A\", 20],         [\"E\", \"D\", 6],     ],     columns=[\"from\", \"to\", \"value\"], # Column name is optional ) matrix = Matrix.parse_fromto_table(fromto_table_df)  # Initialize Circos instance for chord diagram plot circos = Circos.chord_diagram(     matrix,     space=3,     cmap=\"viridis\",     ticks_interval=5,     label_kws=dict(size=12, r=110),     link_kws=dict(direction=1, ec=\"black\", lw=0.5), )  print(fromto_table_df.to_string(index=False)) fig = circos.plotfig() <pre>from to  value\n   A  B     10\n   A  C      5\n   A  D     15\n   A  E     20\n   A  F      3\n   B  A      3\n   B  G     15\n   F  D     13\n   F  E      2\n   E  A     20\n   E  D      6\n</pre>"},{"location":"chord_diagram/#1-matrix-data","title":"1. Matrix Data\u00b6","text":"<p>pyCirclize can plot a Chord Diagram(wiki) from matrix data like circlize or Circos Table Viewer.</p>"},{"location":"chord_diagram/#1-1-example1-3-x-6","title":"1-1. Example1 (3 x 6)\u00b6","text":"<p>This example uses the same matrix data as documented in circlize</p>"},{"location":"chord_diagram/#1-2-example2-10-x-10","title":"1-2. Example2 (10 x 10)\u00b6","text":"<p>This example uses the 10 x 10 matrix data randomly generated by Circos Table Viewer</p>"},{"location":"chord_diagram/#1-3-example3-10-x-2","title":"1-3. Example3 (10 x 2)\u00b6","text":"<p>This example uses the 10 x 2 matrix data randomly generated by Circos Table Viewer</p>"},{"location":"chord_diagram/#2-from-to-table-data","title":"2. From-To Table Data\u00b6","text":"<p>pyCirclize can plot a Chord Diagram from <code>from-to table</code> data.</p>"},{"location":"chord_diagram/#2-1-example-1","title":"2-1. Example 1\u00b6","text":""},{"location":"chord_diagram/#2-2-example-2","title":"2-2. Example 2\u00b6","text":""},{"location":"circos_plot/","title":"Circos Plot (Genomics)","text":"In\u00a0[1]: Copied! <pre># %pip install pycirclize\n</pre> # %pip install pycirclize In\u00a0[2]: Copied! <pre>from pycirclize import Circos\nfrom pycirclize.parser import Gff\nfrom pycirclize.utils import load_prokaryote_example_file\n\n# Load GFF file\ngff_file = load_prokaryote_example_file(\"enterobacteria_phage.gff\")\ngff = Gff(gff_file)\n\n# Initialize circos instance\nseqid2size = gff.get_seqid2size()\nspace = 0 if len(seqid2size) == 1 else 2\ncircos = Circos(sectors=seqid2size, space=space)\ncircos.text(\"Enterobacteria phage\\n(NC_000902)\", size=15)\n\nseqid2features = gff.get_seqid2features(feature_type=\"CDS\")\nfor sector in circos.sectors:\n    cds_track = sector.add_track((90, 100))\n    cds_track.axis(fc=\"#EEEEEE\", ec=\"none\")\n\n    features = seqid2features[sector.name]\n    label_pos_list, labels = [], []\n    for feature in features:\n        # Plot CDS features\n        if feature.location.strand == 1:\n            cds_track.genomic_features(feature, plotstyle=\"arrow\", r_lim=(95, 100), fc=\"salmon\")\n        else:\n            cds_track.genomic_features(feature, plotstyle=\"arrow\", r_lim=(90, 95), fc=\"skyblue\")\n        # Extract feature product label &amp; position\n        start, end = int(feature.location.start), int(feature.location.end)\n        label_pos = (start + end) / 2\n        label = feature.qualifiers.get(\"product\", [\"\"])[0]\n        if label == \"\" or label.startswith(\"hypothetical\"):\n            continue\n        cds_track.annotate(label_pos, label, label_size=7)\n\n    # Plot xticks &amp; intervals on inner position\n    cds_track.xticks_by_interval(\n        interval=5000,\n        outer=False,\n        label_formatter=lambda v: f\"{v/ 1000:.1f} Kb\",\n        label_orientation=\"vertical\",\n        line_kws=dict(ec=\"grey\"),\n    )\n\nfig = circos.plotfig()\n</pre> from pycirclize import Circos from pycirclize.parser import Gff from pycirclize.utils import load_prokaryote_example_file  # Load GFF file gff_file = load_prokaryote_example_file(\"enterobacteria_phage.gff\") gff = Gff(gff_file)  # Initialize circos instance seqid2size = gff.get_seqid2size() space = 0 if len(seqid2size) == 1 else 2 circos = Circos(sectors=seqid2size, space=space) circos.text(\"Enterobacteria phage\\n(NC_000902)\", size=15)  seqid2features = gff.get_seqid2features(feature_type=\"CDS\") for sector in circos.sectors:     cds_track = sector.add_track((90, 100))     cds_track.axis(fc=\"#EEEEEE\", ec=\"none\")      features = seqid2features[sector.name]     label_pos_list, labels = [], []     for feature in features:         # Plot CDS features         if feature.location.strand == 1:             cds_track.genomic_features(feature, plotstyle=\"arrow\", r_lim=(95, 100), fc=\"salmon\")         else:             cds_track.genomic_features(feature, plotstyle=\"arrow\", r_lim=(90, 95), fc=\"skyblue\")         # Extract feature product label &amp; position         start, end = int(feature.location.start), int(feature.location.end)         label_pos = (start + end) / 2         label = feature.qualifiers.get(\"product\", [\"\"])[0]         if label == \"\" or label.startswith(\"hypothetical\"):             continue         cds_track.annotate(label_pos, label, label_size=7)      # Plot xticks &amp; intervals on inner position     cds_track.xticks_by_interval(         interval=5000,         outer=False,         label_formatter=lambda v: f\"{v/ 1000:.1f} Kb\",         label_orientation=\"vertical\",         line_kws=dict(ec=\"grey\"),     )  fig = circos.plotfig() In\u00a0[3]: Copied! <pre>from pycirclize import Circos\nfrom pycirclize.parser import Genbank\nfrom pycirclize.utils import load_prokaryote_example_file\nimport numpy as np\nfrom matplotlib.patches import Patch\nfrom matplotlib.lines import Line2D\n\n# Load Genbank file\ngbk_file = load_prokaryote_example_file(\"escherichia_coli.gbk.gz\")\ngbk = Genbank(gbk_file)\n\n# Initialize circos instance\nseqid2size = gbk.get_seqid2size()\nspace = 0 if len(seqid2size) == 1 else 2\ncircos = Circos(sectors=seqid2size, space=space)\ncircos.text(\"Escherichia coli\\n(NC_000913)\", size=12, r=20)\n\nseqid2features = gbk.get_seqid2features(feature_type=None)\nseqid2seq = gbk.get_seqid2seq()\nfor sector in circos.sectors:\n    # Plot outer track with xticks\n    major_ticks_interval = 500000\n    minor_ticks_interval = 100000\n    outer_track = sector.add_track((98, 100))\n    outer_track.axis(fc=\"lightgrey\")\n    if sector.size &gt;= major_ticks_interval:\n        outer_track.xticks_by_interval(\n            major_ticks_interval, label_formatter=lambda v: f\"{v/ 10 ** 6:.1f} Mb\"\n        )\n        outer_track.xticks_by_interval(minor_ticks_interval, tick_length=1, show_label=False)\n\n    f_cds_track = sector.add_track((90, 97), r_pad_ratio=0.1)\n    r_cds_track = sector.add_track((83, 90), r_pad_ratio=0.1)\n    rrna_track = sector.add_track((76, 83), r_pad_ratio=0.1)\n    trna_track = sector.add_track((69, 76), r_pad_ratio=0.1)\n\n    # Plot Forward CDS, Reverse CDS, rRNA, tRNA\n    features = seqid2features[sector.name]\n    for feature in features:\n        if feature.type == \"CDS\" and feature.location.strand == 1:\n            f_cds_track.genomic_features(feature, fc=\"red\")\n        elif feature.type == \"CDS\" and feature.location.strand == -1:\n            r_cds_track.genomic_features(feature, fc=\"blue\")\n        elif feature.type == \"rRNA\":\n            rrna_track.genomic_features(feature, fc=\"green\")\n        elif feature.type == \"tRNA\":\n            trna_track.genomic_features(feature, color=\"magenta\", lw=0.1)\n\n    # Plot GC content\n    gc_content_track = sector.add_track((50, 65))\n    seq = seqid2seq[sector.name]\n    label_pos_list, gc_contents = gbk.calc_gc_content(seq=seq)\n    gc_contents = gc_contents - gbk.calc_genome_gc_content(seq=gbk.full_genome_seq)\n    positive_gc_contents = np.where(gc_contents &gt; 0, gc_contents, 0)\n    negative_gc_contents = np.where(gc_contents &lt; 0, gc_contents, 0)\n    abs_max_gc_content = np.max(np.abs(gc_contents))\n    vmin, vmax = -abs_max_gc_content, abs_max_gc_content\n    gc_content_track.fill_between(\n        label_pos_list, positive_gc_contents, 0, vmin=vmin, vmax=vmax, color=\"black\"\n    )\n    gc_content_track.fill_between(\n        label_pos_list, negative_gc_contents, 0, vmin=vmin, vmax=vmax, color=\"grey\"\n    )\n\n    # Plot GC skew\n    gc_skew_track = sector.add_track((35, 50))\n\n    label_pos_list, gc_skews = gbk.calc_gc_skew(seq=seq)\n    positive_gc_skews = np.where(gc_skews &gt; 0, gc_skews, 0)\n    negative_gc_skews = np.where(gc_skews &lt; 0, gc_skews, 0)\n    abs_max_gc_skew = np.max(np.abs(gc_skews))\n    vmin, vmax = -abs_max_gc_skew, abs_max_gc_skew\n    gc_skew_track.fill_between(\n        label_pos_list, positive_gc_skews, 0, vmin=vmin, vmax=vmax, color=\"olive\"\n    )\n    gc_skew_track.fill_between(\n        label_pos_list, negative_gc_skews, 0, vmin=vmin, vmax=vmax, color=\"purple\"\n    )\n\nfig = circos.plotfig()\n\n# Add legend\nhandles = [\n    Patch(color=\"red\", label=\"Forward CDS\"),\n    Patch(color=\"blue\", label=\"Reverse CDS\"),\n    Patch(color=\"green\", label=\"rRNA\"),\n    Patch(color=\"magenta\", label=\"tRNA\"),\n    Line2D([], [], color=\"black\", label=\"Positive GC Content\", marker=\"^\", ms=6, ls=\"None\"),\n    Line2D([], [], color=\"grey\", label=\"Negative GC Content\", marker=\"v\", ms=6, ls=\"None\"),\n    Line2D([], [], color=\"olive\", label=\"Positive GC Skew\", marker=\"^\", ms=6, ls=\"None\"),\n    Line2D([], [], color=\"purple\", label=\"Negative GC Skew\", marker=\"v\", ms=6, ls=\"None\"),\n]\n_ = circos.ax.legend(handles=handles, bbox_to_anchor=(0.5, 0.475), loc=\"center\", fontsize=8)\n</pre> from pycirclize import Circos from pycirclize.parser import Genbank from pycirclize.utils import load_prokaryote_example_file import numpy as np from matplotlib.patches import Patch from matplotlib.lines import Line2D  # Load Genbank file gbk_file = load_prokaryote_example_file(\"escherichia_coli.gbk.gz\") gbk = Genbank(gbk_file)  # Initialize circos instance seqid2size = gbk.get_seqid2size() space = 0 if len(seqid2size) == 1 else 2 circos = Circos(sectors=seqid2size, space=space) circos.text(\"Escherichia coli\\n(NC_000913)\", size=12, r=20)  seqid2features = gbk.get_seqid2features(feature_type=None) seqid2seq = gbk.get_seqid2seq() for sector in circos.sectors:     # Plot outer track with xticks     major_ticks_interval = 500000     minor_ticks_interval = 100000     outer_track = sector.add_track((98, 100))     outer_track.axis(fc=\"lightgrey\")     if sector.size &gt;= major_ticks_interval:         outer_track.xticks_by_interval(             major_ticks_interval, label_formatter=lambda v: f\"{v/ 10 ** 6:.1f} Mb\"         )         outer_track.xticks_by_interval(minor_ticks_interval, tick_length=1, show_label=False)      f_cds_track = sector.add_track((90, 97), r_pad_ratio=0.1)     r_cds_track = sector.add_track((83, 90), r_pad_ratio=0.1)     rrna_track = sector.add_track((76, 83), r_pad_ratio=0.1)     trna_track = sector.add_track((69, 76), r_pad_ratio=0.1)      # Plot Forward CDS, Reverse CDS, rRNA, tRNA     features = seqid2features[sector.name]     for feature in features:         if feature.type == \"CDS\" and feature.location.strand == 1:             f_cds_track.genomic_features(feature, fc=\"red\")         elif feature.type == \"CDS\" and feature.location.strand == -1:             r_cds_track.genomic_features(feature, fc=\"blue\")         elif feature.type == \"rRNA\":             rrna_track.genomic_features(feature, fc=\"green\")         elif feature.type == \"tRNA\":             trna_track.genomic_features(feature, color=\"magenta\", lw=0.1)      # Plot GC content     gc_content_track = sector.add_track((50, 65))     seq = seqid2seq[sector.name]     label_pos_list, gc_contents = gbk.calc_gc_content(seq=seq)     gc_contents = gc_contents - gbk.calc_genome_gc_content(seq=gbk.full_genome_seq)     positive_gc_contents = np.where(gc_contents &gt; 0, gc_contents, 0)     negative_gc_contents = np.where(gc_contents &lt; 0, gc_contents, 0)     abs_max_gc_content = np.max(np.abs(gc_contents))     vmin, vmax = -abs_max_gc_content, abs_max_gc_content     gc_content_track.fill_between(         label_pos_list, positive_gc_contents, 0, vmin=vmin, vmax=vmax, color=\"black\"     )     gc_content_track.fill_between(         label_pos_list, negative_gc_contents, 0, vmin=vmin, vmax=vmax, color=\"grey\"     )      # Plot GC skew     gc_skew_track = sector.add_track((35, 50))      label_pos_list, gc_skews = gbk.calc_gc_skew(seq=seq)     positive_gc_skews = np.where(gc_skews &gt; 0, gc_skews, 0)     negative_gc_skews = np.where(gc_skews &lt; 0, gc_skews, 0)     abs_max_gc_skew = np.max(np.abs(gc_skews))     vmin, vmax = -abs_max_gc_skew, abs_max_gc_skew     gc_skew_track.fill_between(         label_pos_list, positive_gc_skews, 0, vmin=vmin, vmax=vmax, color=\"olive\"     )     gc_skew_track.fill_between(         label_pos_list, negative_gc_skews, 0, vmin=vmin, vmax=vmax, color=\"purple\"     )  fig = circos.plotfig()  # Add legend handles = [     Patch(color=\"red\", label=\"Forward CDS\"),     Patch(color=\"blue\", label=\"Reverse CDS\"),     Patch(color=\"green\", label=\"rRNA\"),     Patch(color=\"magenta\", label=\"tRNA\"),     Line2D([], [], color=\"black\", label=\"Positive GC Content\", marker=\"^\", ms=6, ls=\"None\"),     Line2D([], [], color=\"grey\", label=\"Negative GC Content\", marker=\"v\", ms=6, ls=\"None\"),     Line2D([], [], color=\"olive\", label=\"Positive GC Skew\", marker=\"^\", ms=6, ls=\"None\"),     Line2D([], [], color=\"purple\", label=\"Negative GC Skew\", marker=\"v\", ms=6, ls=\"None\"), ] _ = circos.ax.legend(handles=handles, bbox_to_anchor=(0.5, 0.475), loc=\"center\", fontsize=8) In\u00a0[4]: Copied! <pre>from pycirclize import Circos\nfrom pycirclize.parser import Gff, Genbank\nfrom pycirclize.utils import load_prokaryote_example_file\nfrom matplotlib.patches import Patch\n\n# Case1. Load `GFF` contig genomes\n# https://github.com/moshi4/pycirclize-data/blob/main/prokaryote/mycoplasma_alvi.gff\ngff_file = load_prokaryote_example_file(\"mycoplasma_alvi.gff\")\nparser = Gff(gff_file)\n\n# Case2. Load `Genbank` contig genomes\n# https://github.com/moshi4/pycirclize-data/blob/main/prokaryote/mycoplasma_alvi.gbk\n# gbk_file = load_prokaryote_example_file(\"mycoplasma_alvi.gbk\")\n# parser = Genbank(gbk_file)\n\n# Initialize circos instance\nseqid2size = parser.get_seqid2size()\nspace = 0 if len(seqid2size) == 1 else 2\ncircos = Circos(seqid2size, space=space)\ncircos.text(f\"Mycoplasma alvi\\n({len(circos.sectors)} contigs)\", r=5, size=15)\n\nseqid2features = parser.get_seqid2features(feature_type=None)\nfor sector in circos.sectors:\n    # Plot outer track\n    outer_track = sector.add_track((99.7, 100))\n    outer_track.axis(fc=\"black\")\n    major_interval = 100000\n    minor_interval = int(major_interval / 10)\n    if sector.size &gt; minor_interval:\n        outer_track.xticks_by_interval(major_interval, label_formatter=lambda v: f\"{v / 1000:.0f} Kb\")\n        outer_track.xticks_by_interval(minor_interval, tick_length=1, show_label=False)\n\n    # Plot forward/reverse CDS, rRNA, tRNA tracks\n    f_cds_track = sector.add_track((91, 98), r_pad_ratio=0.1)\n    r_cds_track = sector.add_track((84, 91), r_pad_ratio=0.1)\n    rrna_track = sector.add_track((77, 84), r_pad_ratio=0.1)\n    trna_track = sector.add_track((70, 77), r_pad_ratio=0.1)\n    for feature in seqid2features[sector.name]:\n        if feature.type == \"CDS\":\n            if feature.location.strand == 1:\n                f_cds_track.genomic_features([feature], fc=\"tomato\")\n            else:\n                r_cds_track.genomic_features([feature], fc=\"skyblue\")\n        elif feature.type == \"rRNA\":\n            rrna_track.genomic_features([feature], fc=\"lime\")\n        elif feature.type == \"tRNA\":\n            trna_track.genomic_features([feature], fc=\"magenta\")\n\nfig = circos.plotfig()\n_ = circos.ax.legend(\n    handles=[\n        Patch(color=\"tomato\", label=\"Forward CDS\"),\n        Patch(color=\"skyblue\", label=\"Reverse CDS\"),\n        Patch(color=\"lime\", label=\"rRNA\"),\n        Patch(color=\"magenta\", label=\"tRNA\"),\n    ],\n    bbox_to_anchor=(0.5, 0.45),\n    loc=\"center\",\n    ncols=2,\n)\n</pre> from pycirclize import Circos from pycirclize.parser import Gff, Genbank from pycirclize.utils import load_prokaryote_example_file from matplotlib.patches import Patch  # Case1. Load `GFF` contig genomes # https://github.com/moshi4/pycirclize-data/blob/main/prokaryote/mycoplasma_alvi.gff gff_file = load_prokaryote_example_file(\"mycoplasma_alvi.gff\") parser = Gff(gff_file)  # Case2. Load `Genbank` contig genomes # https://github.com/moshi4/pycirclize-data/blob/main/prokaryote/mycoplasma_alvi.gbk # gbk_file = load_prokaryote_example_file(\"mycoplasma_alvi.gbk\") # parser = Genbank(gbk_file)  # Initialize circos instance seqid2size = parser.get_seqid2size() space = 0 if len(seqid2size) == 1 else 2 circos = Circos(seqid2size, space=space) circos.text(f\"Mycoplasma alvi\\n({len(circos.sectors)} contigs)\", r=5, size=15)  seqid2features = parser.get_seqid2features(feature_type=None) for sector in circos.sectors:     # Plot outer track     outer_track = sector.add_track((99.7, 100))     outer_track.axis(fc=\"black\")     major_interval = 100000     minor_interval = int(major_interval / 10)     if sector.size &gt; minor_interval:         outer_track.xticks_by_interval(major_interval, label_formatter=lambda v: f\"{v / 1000:.0f} Kb\")         outer_track.xticks_by_interval(minor_interval, tick_length=1, show_label=False)      # Plot forward/reverse CDS, rRNA, tRNA tracks     f_cds_track = sector.add_track((91, 98), r_pad_ratio=0.1)     r_cds_track = sector.add_track((84, 91), r_pad_ratio=0.1)     rrna_track = sector.add_track((77, 84), r_pad_ratio=0.1)     trna_track = sector.add_track((70, 77), r_pad_ratio=0.1)     for feature in seqid2features[sector.name]:         if feature.type == \"CDS\":             if feature.location.strand == 1:                 f_cds_track.genomic_features([feature], fc=\"tomato\")             else:                 r_cds_track.genomic_features([feature], fc=\"skyblue\")         elif feature.type == \"rRNA\":             rrna_track.genomic_features([feature], fc=\"lime\")         elif feature.type == \"tRNA\":             trna_track.genomic_features([feature], fc=\"magenta\")  fig = circos.plotfig() _ = circos.ax.legend(     handles=[         Patch(color=\"tomato\", label=\"Forward CDS\"),         Patch(color=\"skyblue\", label=\"Reverse CDS\"),         Patch(color=\"lime\", label=\"rRNA\"),         Patch(color=\"magenta\", label=\"tRNA\"),     ],     bbox_to_anchor=(0.5, 0.45),     loc=\"center\",     ncols=2, ) In\u00a0[5]: Copied! <pre>from pycirclize import Circos\nfrom pycirclize.utils import load_eukaryote_example_dataset\n\n# Load hg38 dataset (https://github.com/moshi4/pycirclize-data/tree/main/eukaryote/hg38)\nchr_bed_file, cytoband_file, _ = load_eukaryote_example_dataset(\"hg38\")\n\n# Initialize Circos from BED chromosomes\ncircos = Circos.initialize_from_bed(chr_bed_file, space=3)\ncircos.text(\"Homo sapiens (hg38)\", size=15)\n\n# Add cytoband tracks from cytoband file\ncircos.add_cytoband_tracks((95, 100), cytoband_file)\n\n# Plot chromosome name\nfor sector in circos.sectors:\n    sector.text(sector.name, size=10)\n\nfig = circos.plotfig()\n</pre> from pycirclize import Circos from pycirclize.utils import load_eukaryote_example_dataset  # Load hg38 dataset (https://github.com/moshi4/pycirclize-data/tree/main/eukaryote/hg38) chr_bed_file, cytoband_file, _ = load_eukaryote_example_dataset(\"hg38\")  # Initialize Circos from BED chromosomes circos = Circos.initialize_from_bed(chr_bed_file, space=3) circos.text(\"Homo sapiens (hg38)\", size=15)  # Add cytoband tracks from cytoband file circos.add_cytoband_tracks((95, 100), cytoband_file)  # Plot chromosome name for sector in circos.sectors:     sector.text(sector.name, size=10)  fig = circos.plotfig() In\u00a0[6]: Copied! <pre>from pycirclize import Circos\nfrom pycirclize.utils import ColorCycler, load_eukaryote_example_dataset\n\n# Load hg38 dataset (https://github.com/moshi4/pycirclize-data/tree/main/eukaryote/hg38)\nchr_bed_file, cytoband_file, chr_links = load_eukaryote_example_dataset(\"hg38\")\n\n# Initialize Circos from BED chromosomes\ncircos = Circos.initialize_from_bed(chr_bed_file, space=3)\ncircos.text(\"Homo sapiens\\n(hg38)\", deg=315, r=150, size=12)\n\n# Add cytoband tracks from cytoband file\ncircos.add_cytoband_tracks((95, 100), cytoband_file)\n\n# Create chromosome color dict\nColorCycler.set_cmap(\"hsv\")\nchr_names = [s.name for s in circos.sectors]\ncolors = ColorCycler.get_color_list(len(chr_names))\nchr_name2color = {name: color for name, color in zip(chr_names, colors)}\n\n# Plot chromosome name &amp; xticks\nfor sector in circos.sectors:\n    sector.text(sector.name, r=120, size=10, color=chr_name2color[sector.name])\n    sector.get_track(\"cytoband\").xticks_by_interval(\n        40000000,\n        label_size=8,\n        label_orientation=\"vertical\",\n        label_formatter=lambda v: f\"{v / 1000000:.0f} Mb\",\n    )\n\n# Plot chromosome link\nfor link in chr_links:\n    region1 = (link.query_chr, link.query_start, link.query_end)\n    region2 = (link.ref_chr, link.ref_start, link.ref_end)\n    color = chr_name2color[link.query_chr]\n    if link.query_chr in (\"chr1\", \"chr8\", \"chr16\") and link.query_chr != link.ref_chr:\n        circos.link(region1, region2, color=color)\n\nfig = circos.plotfig()\n</pre> from pycirclize import Circos from pycirclize.utils import ColorCycler, load_eukaryote_example_dataset  # Load hg38 dataset (https://github.com/moshi4/pycirclize-data/tree/main/eukaryote/hg38) chr_bed_file, cytoband_file, chr_links = load_eukaryote_example_dataset(\"hg38\")  # Initialize Circos from BED chromosomes circos = Circos.initialize_from_bed(chr_bed_file, space=3) circos.text(\"Homo sapiens\\n(hg38)\", deg=315, r=150, size=12)  # Add cytoband tracks from cytoband file circos.add_cytoband_tracks((95, 100), cytoband_file)  # Create chromosome color dict ColorCycler.set_cmap(\"hsv\") chr_names = [s.name for s in circos.sectors] colors = ColorCycler.get_color_list(len(chr_names)) chr_name2color = {name: color for name, color in zip(chr_names, colors)}  # Plot chromosome name &amp; xticks for sector in circos.sectors:     sector.text(sector.name, r=120, size=10, color=chr_name2color[sector.name])     sector.get_track(\"cytoband\").xticks_by_interval(         40000000,         label_size=8,         label_orientation=\"vertical\",         label_formatter=lambda v: f\"{v / 1000000:.0f} Mb\",     )  # Plot chromosome link for link in chr_links:     region1 = (link.query_chr, link.query_start, link.query_end)     region2 = (link.ref_chr, link.ref_start, link.ref_end)     color = chr_name2color[link.query_chr]     if link.query_chr in (\"chr1\", \"chr8\", \"chr16\") and link.query_chr != link.ref_chr:         circos.link(region1, region2, color=color)  fig = circos.plotfig() In\u00a0[7]: Copied! <pre>from pycirclize import Circos\nfrom pycirclize.utils import ColorCycler, load_eukaryote_example_dataset\nimport numpy as np\nnp.random.seed(0)\n\n# Load hg38 dataset (https://github.com/moshi4/pycirclize-data/tree/main/eukaryote/hg38)\nchr_bed_file = load_eukaryote_example_dataset(\"hg38\")[0]\n\n# Initialize Circos from BED chromosomes\ncircos = Circos.initialize_from_bed(chr_bed_file, start=-80, end=260, space=3, endspace=False)\ncircos.text(\"Homo sapiens\\n(hg38)\", size=15)\n\n# Create chromosome color dict\nColorCycler.set_cmap(\"gist_rainbow\")\nchr_names = [s.name for s in circos.sectors]\ncolors = ColorCycler.get_color_list(len(chr_names))\nchr_name2color = {name: color for name, color in zip(chr_names, colors)}\n\nfor sector in circos.sectors:\n    # Plot chromosome outer track\n    sector.text(sector.name.replace(\"chr\", \"\"))\n    color = chr_name2color[sector.name]\n    outer_track = sector.add_track((95, 100))\n    outer_track.axis(fc=color)\n    # Create example x,y plot data\n    step = 10000000\n    x = np.arange(sector.start + (step / 2), sector.end - (step / 2), step)\n    y = np.random.randint(0, 100, size=len(x))\n    # Scatter track\n    track1 = sector.add_track((80, 90), r_pad_ratio=0.1)\n    track1.axis()\n    track1.scatter(x, y, vmax=100, s=6, color=\"red\")\n    # Line track\n    track2 = sector.add_track((65, 75), r_pad_ratio=0.1)\n    track2.axis()\n    track2.line(x, y, vmax=100, color=\"blue\")\n    # Bar track\n    track3 = sector.add_track((50, 60), r_pad_ratio=0.1)\n    track3.axis()\n    track3.bar(x, y, vmax=100, width=step * 0.7, color=\"olive\")\n    # Fill between track\n    track4 = sector.add_track((35, 45), r_pad_ratio=0.1)\n    track4.axis()\n    track4.grid()\n    track4.fill_between(x, y, vmax=100, color=\"violet\")\n    # Plot track labels\n    if sector.name == circos.sectors[0].name:\n        circos.text(\"Chr\", r=outer_track.r_center, deg=-90)\n        circos.text(\"a\", r=track1.r_center, deg=-90, color=\"red\")\n        circos.text(\"b\", r=track2.r_center, deg=-90, color=\"blue\")\n        circos.text(\"c\", r=track3.r_center, deg=-90, color=\"olive\")\n        circos.text(\"d\", r=track4.r_center, deg=-90, color=\"violet\")\n\nfig = circos.plotfig()\n</pre> from pycirclize import Circos from pycirclize.utils import ColorCycler, load_eukaryote_example_dataset import numpy as np np.random.seed(0)  # Load hg38 dataset (https://github.com/moshi4/pycirclize-data/tree/main/eukaryote/hg38) chr_bed_file = load_eukaryote_example_dataset(\"hg38\")[0]  # Initialize Circos from BED chromosomes circos = Circos.initialize_from_bed(chr_bed_file, start=-80, end=260, space=3, endspace=False) circos.text(\"Homo sapiens\\n(hg38)\", size=15)  # Create chromosome color dict ColorCycler.set_cmap(\"gist_rainbow\") chr_names = [s.name for s in circos.sectors] colors = ColorCycler.get_color_list(len(chr_names)) chr_name2color = {name: color for name, color in zip(chr_names, colors)}  for sector in circos.sectors:     # Plot chromosome outer track     sector.text(sector.name.replace(\"chr\", \"\"))     color = chr_name2color[sector.name]     outer_track = sector.add_track((95, 100))     outer_track.axis(fc=color)     # Create example x,y plot data     step = 10000000     x = np.arange(sector.start + (step / 2), sector.end - (step / 2), step)     y = np.random.randint(0, 100, size=len(x))     # Scatter track     track1 = sector.add_track((80, 90), r_pad_ratio=0.1)     track1.axis()     track1.scatter(x, y, vmax=100, s=6, color=\"red\")     # Line track     track2 = sector.add_track((65, 75), r_pad_ratio=0.1)     track2.axis()     track2.line(x, y, vmax=100, color=\"blue\")     # Bar track     track3 = sector.add_track((50, 60), r_pad_ratio=0.1)     track3.axis()     track3.bar(x, y, vmax=100, width=step * 0.7, color=\"olive\")     # Fill between track     track4 = sector.add_track((35, 45), r_pad_ratio=0.1)     track4.axis()     track4.grid()     track4.fill_between(x, y, vmax=100, color=\"violet\")     # Plot track labels     if sector.name == circos.sectors[0].name:         circos.text(\"Chr\", r=outer_track.r_center, deg=-90)         circos.text(\"a\", r=track1.r_center, deg=-90, color=\"red\")         circos.text(\"b\", r=track2.r_center, deg=-90, color=\"blue\")         circos.text(\"c\", r=track3.r_center, deg=-90, color=\"olive\")         circos.text(\"d\", r=track4.r_center, deg=-90, color=\"violet\")  fig = circos.plotfig() In\u00a0[8]: Copied! <pre>from pycirclize import Circos\nfrom pycirclize.utils import load_eukaryote_example_dataset\n\n# Load mm10 dataset (https://github.com/moshi4/pycirclize-data/tree/main/eukaryote/mm10)\nchr_bed_file, cytoband_file, _ = load_eukaryote_example_dataset(\"mm10\")\n\n# Initialize Circos from BED chromosomes\ncircos = Circos.initialize_from_bed(chr_bed_file, space=3)\ncircos.text(\"Mus musculus (mm10)\", size=15)\n\n# Add cytoband tracks from cytoband file\ncircos.add_cytoband_tracks((95, 100), cytoband_file)\n\n# Plot chromosome name\nfor sector in circos.sectors:\n    sector.text(sector.name, size=10)\n\nfig = circos.plotfig()\n</pre> from pycirclize import Circos from pycirclize.utils import load_eukaryote_example_dataset  # Load mm10 dataset (https://github.com/moshi4/pycirclize-data/tree/main/eukaryote/mm10) chr_bed_file, cytoband_file, _ = load_eukaryote_example_dataset(\"mm10\")  # Initialize Circos from BED chromosomes circos = Circos.initialize_from_bed(chr_bed_file, space=3) circos.text(\"Mus musculus (mm10)\", size=15)  # Add cytoband tracks from cytoband file circos.add_cytoband_tracks((95, 100), cytoband_file)  # Plot chromosome name for sector in circos.sectors:     sector.text(sector.name, size=10)  fig = circos.plotfig() In\u00a0[9]: Copied! <pre>from pycirclize import Circos\nfrom pycirclize.utils import ColorCycler, load_eukaryote_example_dataset\n\n# Load mm10 dataset (https://github.com/moshi4/pycirclize-data/tree/main/eukaryote/mm10)\nchr_bed_file, cytoband_file, chr_links = load_eukaryote_example_dataset(\"mm10\")\n\n# Initialize Circos from BED chromosomes\ncircos = Circos.initialize_from_bed(chr_bed_file, space=3)\ncircos.text(\"Mus musculus\\n(mm10)\", deg=315, r=150, size=12)\n\n# Add cytoband tracks from cytoband file\ncircos.add_cytoband_tracks((95, 100), cytoband_file)\n\n# Create chromosome color mapping\nColorCycler.set_cmap(\"hsv\")\nchr_names = [s.name for s in circos.sectors]\ncolors = ColorCycler.get_color_list(len(chr_names))\nchr_name2color = {name: color for name, color in zip(chr_names, colors)}\n\n# Plot chromosome name &amp; xticks\nfor sector in circos.sectors:\n    sector.text(sector.name, r=120, size=10, color=chr_name2color[sector.name])\n    sector.get_track(\"cytoband\").xticks_by_interval(\n        50000000,\n        label_size=8,\n        label_orientation=\"vertical\",\n        label_formatter=lambda v: f\"{v / 1000000:.0f} Mb\",\n    )\n\n# Plot chromosome link\nfor link in chr_links:\n    region1 = (link.query_chr, link.query_start, link.query_end)\n    region2 = (link.ref_chr, link.ref_start, link.ref_end)\n    color = chr_name2color[link.query_chr]\n    if link.query_chr != link.ref_chr:\n        circos.link(region1, region2, color=color)\n\nfig = circos.plotfig()\n</pre> from pycirclize import Circos from pycirclize.utils import ColorCycler, load_eukaryote_example_dataset  # Load mm10 dataset (https://github.com/moshi4/pycirclize-data/tree/main/eukaryote/mm10) chr_bed_file, cytoband_file, chr_links = load_eukaryote_example_dataset(\"mm10\")  # Initialize Circos from BED chromosomes circos = Circos.initialize_from_bed(chr_bed_file, space=3) circos.text(\"Mus musculus\\n(mm10)\", deg=315, r=150, size=12)  # Add cytoband tracks from cytoband file circos.add_cytoband_tracks((95, 100), cytoband_file)  # Create chromosome color mapping ColorCycler.set_cmap(\"hsv\") chr_names = [s.name for s in circos.sectors] colors = ColorCycler.get_color_list(len(chr_names)) chr_name2color = {name: color for name, color in zip(chr_names, colors)}  # Plot chromosome name &amp; xticks for sector in circos.sectors:     sector.text(sector.name, r=120, size=10, color=chr_name2color[sector.name])     sector.get_track(\"cytoband\").xticks_by_interval(         50000000,         label_size=8,         label_orientation=\"vertical\",         label_formatter=lambda v: f\"{v / 1000000:.0f} Mb\",     )  # Plot chromosome link for link in chr_links:     region1 = (link.query_chr, link.query_start, link.query_end)     region2 = (link.ref_chr, link.ref_start, link.ref_end)     color = chr_name2color[link.query_chr]     if link.query_chr != link.ref_chr:         circos.link(region1, region2, color=color)  fig = circos.plotfig() In\u00a0[10]: Copied! <pre>from pycirclize import Circos\nfrom pycirclize.utils import ColorCycler, load_eukaryote_example_dataset\nimport numpy as np\nnp.random.seed(0)\n\n# Load mm10 dataset (https://github.com/moshi4/pycirclize-data/tree/main/eukaryote/mm10)\nchr_bed_file = load_eukaryote_example_dataset(\"mm10\")[0]\n\n# Initialize Circos from BED chromosomes\ncircos = Circos.initialize_from_bed(chr_bed_file, space=2, start=10, end=350, endspace=False)\ncircos.text(\"Mus musculus\\n(mm10)\", size=12)\n\nheatmap_cmaps = [\"bwr\", \"Spectral\", \"viridis\", \"plasma\", \"Reds\", \"Blues\", \"Greens\", \"Greys\"]\nColorCycler.set_cmap(\"gist_rainbow\")\ncolors = ColorCycler.get_color_list(len(circos.sectors))\nfor sector, color in zip(circos.sectors, colors):\n    sector.text(sector.name.replace(\"chr\", \"\"), size=10)\n    # Plot chromosome outer track\n    chr_track = sector.add_track((95, 100))\n    chr_track.axis(fc=color)\n    # Create random test data for heatmap plot\n    window_size = 10_000_000\n    data_num = int(sector.size // window_size) + 1\n    vmin, vmax = 0, 100\n    data = np.random.randint(vmin, vmax, data_num)\n    # Plot heatmap tracks with various cmap\n    track_r_size, r_interval, r_start = 4, 2, 90\n    for idx, cmap in enumerate(heatmap_cmaps):\n        r_pos = r_start - (track_r_size + r_interval) * idx\n        track_r_lim = (r_pos - track_r_size, r_pos)\n        track = sector.add_track(track_r_lim)\n        track.axis(ec=\"grey\")\n        track.heatmap(data, width=window_size, vmin=vmin, vmax=vmax, cmap=cmap)\n        # Plot colormap name on center\n        if sector.name == circos.sectors[0].name:\n            circos.text(cmap, r=track.r_center, size=8)\n\nfig = circos.plotfig()\n</pre> from pycirclize import Circos from pycirclize.utils import ColorCycler, load_eukaryote_example_dataset import numpy as np np.random.seed(0)  # Load mm10 dataset (https://github.com/moshi4/pycirclize-data/tree/main/eukaryote/mm10) chr_bed_file = load_eukaryote_example_dataset(\"mm10\")[0]  # Initialize Circos from BED chromosomes circos = Circos.initialize_from_bed(chr_bed_file, space=2, start=10, end=350, endspace=False) circos.text(\"Mus musculus\\n(mm10)\", size=12)  heatmap_cmaps = [\"bwr\", \"Spectral\", \"viridis\", \"plasma\", \"Reds\", \"Blues\", \"Greens\", \"Greys\"] ColorCycler.set_cmap(\"gist_rainbow\") colors = ColorCycler.get_color_list(len(circos.sectors)) for sector, color in zip(circos.sectors, colors):     sector.text(sector.name.replace(\"chr\", \"\"), size=10)     # Plot chromosome outer track     chr_track = sector.add_track((95, 100))     chr_track.axis(fc=color)     # Create random test data for heatmap plot     window_size = 10_000_000     data_num = int(sector.size // window_size) + 1     vmin, vmax = 0, 100     data = np.random.randint(vmin, vmax, data_num)     # Plot heatmap tracks with various cmap     track_r_size, r_interval, r_start = 4, 2, 90     for idx, cmap in enumerate(heatmap_cmaps):         r_pos = r_start - (track_r_size + r_interval) * idx         track_r_lim = (r_pos - track_r_size, r_pos)         track = sector.add_track(track_r_lim)         track.axis(ec=\"grey\")         track.heatmap(data, width=window_size, vmin=vmin, vmax=vmax, cmap=cmap)         # Plot colormap name on center         if sector.name == circos.sectors[0].name:             circos.text(cmap, r=track.r_center, size=8)  fig = circos.plotfig()"},{"location":"circos_plot/#1-enterobacteria-phage","title":"1. Enterobacteria phage\u00b6","text":""},{"location":"circos_plot/#2-escherichia-coli","title":"2. Escherichia coli\u00b6","text":""},{"location":"circos_plot/#3-mycoplasma-alvi","title":"3. Mycoplasma alvi\u00b6","text":""},{"location":"circos_plot/#4-homo-sapiens-hg38","title":"4. Homo sapiens (hg38)\u00b6","text":"<p>hg38 data files are obtained from UCSC Table Browser.</p> <p>Dataset Repository: https://github.com/moshi4/pycirclize-data/tree/main/eukaryote/hg38</p>"},{"location":"circos_plot/#4-1-ideograms","title":"4-1. Ideograms\u00b6","text":""},{"location":"circos_plot/#4-2-segmental-dups-link","title":"4-2. Segmental Dups Link\u00b6","text":""},{"location":"circos_plot/#4-3-plot-graphs","title":"4-3. Plot Graphs\u00b6","text":""},{"location":"circos_plot/#5-mus-musculus-mm10","title":"5. Mus musculus (mm10)\u00b6","text":"<p>mm10 data files are obtained from UCSC Table Browser.</p> <p>Dataset Repository: https://github.com/moshi4/pycirclize-data/tree/main/eukaryote/mm10</p>"},{"location":"circos_plot/#5-1-ideograms","title":"5-1. Ideograms\u00b6","text":""},{"location":"circos_plot/#5-2-segmental-dups-link","title":"5-2. Segmental Dups Link\u00b6","text":""},{"location":"circos_plot/#5-3-plot-heatmaps","title":"5-3. Plot Heatmaps\u00b6","text":""},{"location":"comparative_genomics/","title":"Comparative Genomics","text":"In\u00a0[1]: Copied! <pre># !pip install pycirclize pygenomeviz\n# !apt install ncbi-blast+ mummer mmseqs2\n</pre> # !pip install pycirclize pygenomeviz # !apt install ncbi-blast+ mummer mmseqs2 <p>Advanced users can plot figures for comparative genomics flexibly with pyCirclize API. In this notebook, simple code recipes for comparative genomics Circos visualization utilizing pyGenomeViz align module are shown.</p> In\u00a0[2]: Copied! <pre>from pycirclize import Circos\nfrom pygenomeviz.parser import Genbank\nfrom pygenomeviz.utils import load_example_genbank_dataset\nfrom pygenomeviz.align import MUMmer\n\nTICKS_INTERVAL = 1000000\n\n# Load query &amp; reference genbank files\ngbk_files = load_example_genbank_dataset(\"escherichia_coli\")\nref_gbk = Genbank(gbk_files[2])\nquery_gbk = Genbank(gbk_files[3])\n\n# Initialize circos instance\ncircos = Circos(\n    sectors=dict(**ref_gbk.get_seqid2size(), **dict(reversed(list(query_gbk.get_seqid2size().items())))),\n    start=-358,\n    end=2,\n    space=4,\n    sector2clockwise={seqid: False for seqid in query_gbk.get_seqid2size().keys()},\n)\ncircos.text(f\"{ref_gbk.name}\\n({ref_gbk.full_genome_length:,} bp)\", r=130, deg=35, size=13)\ncircos.text(f\"{query_gbk.name}\\n({query_gbk.full_genome_length:,} bp)\", r=130, deg=-35, size=13)\n\n# Plot genomic sector axis &amp; xticks\nfor sector in circos.sectors:\n    track = sector.add_track((99.8, 100))\n    track.axis(fc=\"black\")\n    if sector.size &gt;= TICKS_INTERVAL:\n        track.xticks_by_interval(\n            TICKS_INTERVAL,\n            label_formatter=lambda v: f\"{v/1000000:.1f} Mb\",\n            label_orientation=\"vertical\",\n        )\n\n# MUMmer genome comparison &amp; plot links\nalign_coords = MUMmer([query_gbk, ref_gbk]).run()\nfor ac in align_coords:\n    region1 = (ac.query_name, ac.query_start, ac.query_end)\n    region2 = (ac.ref_name, ac.ref_start, ac.ref_end)\n    color = \"red\" if ac.is_inverted else \"grey\"\n    circos.link(region1, region2, color=color, r1=98, r2=98)\n\nfig = circos.plotfig()\n</pre> from pycirclize import Circos from pygenomeviz.parser import Genbank from pygenomeviz.utils import load_example_genbank_dataset from pygenomeviz.align import MUMmer  TICKS_INTERVAL = 1000000  # Load query &amp; reference genbank files gbk_files = load_example_genbank_dataset(\"escherichia_coli\") ref_gbk = Genbank(gbk_files[2]) query_gbk = Genbank(gbk_files[3])  # Initialize circos instance circos = Circos(     sectors=dict(**ref_gbk.get_seqid2size(), **dict(reversed(list(query_gbk.get_seqid2size().items())))),     start=-358,     end=2,     space=4,     sector2clockwise={seqid: False for seqid in query_gbk.get_seqid2size().keys()}, ) circos.text(f\"{ref_gbk.name}\\n({ref_gbk.full_genome_length:,} bp)\", r=130, deg=35, size=13) circos.text(f\"{query_gbk.name}\\n({query_gbk.full_genome_length:,} bp)\", r=130, deg=-35, size=13)  # Plot genomic sector axis &amp; xticks for sector in circos.sectors:     track = sector.add_track((99.8, 100))     track.axis(fc=\"black\")     if sector.size &gt;= TICKS_INTERVAL:         track.xticks_by_interval(             TICKS_INTERVAL,             label_formatter=lambda v: f\"{v/1000000:.1f} Mb\",             label_orientation=\"vertical\",         )  # MUMmer genome comparison &amp; plot links align_coords = MUMmer([query_gbk, ref_gbk]).run() for ac in align_coords:     region1 = (ac.query_name, ac.query_start, ac.query_end)     region2 = (ac.ref_name, ac.ref_start, ac.ref_end)     color = \"red\" if ac.is_inverted else \"grey\"     circos.link(region1, region2, color=color, r1=98, r2=98)  fig = circos.plotfig() In\u00a0[3]: Copied! <pre>from pycirclize import Circos\nfrom pygenomeviz.parser import Genbank\nfrom pygenomeviz.utils import load_example_genbank_dataset\nfrom pygenomeviz.align import MMseqs\nfrom matplotlib.patches import Patch\n\nQUERY_COLOR = \"salmon\"\nREF_COLOR = \"skyblue\"\nTICKS_INTERVAL = 100000\n\n# Load query &amp; reference genbank files\ngbk_files = load_example_genbank_dataset(\"mycoplasma_mycoides\")\nquery_gbk = Genbank(gbk_files[3])\nref_gbk = Genbank(gbk_files[2])\n\n# Initialize circos instance\ncircos = Circos(\n    sectors=dict(**ref_gbk.get_seqid2size(), **dict(reversed(list(query_gbk.get_seqid2size().items())))),\n    start=-358,\n    end=2,\n    space=4,\n    sector2clockwise={seqid: False for seqid in query_gbk.get_seqid2size()},\n)\n\n# Plot genomic sector axis &amp; xticks\nfor sector in circos.sectors:\n    track = sector.add_track((98, 100))\n    color = QUERY_COLOR if sector.name in query_gbk.get_seqid2size() else REF_COLOR\n    track.axis(fc=color)\n    if sector.size &gt;= TICKS_INTERVAL:\n        track.xticks_by_interval(\n            TICKS_INTERVAL,\n            label_formatter=lambda v: f\"{v/1000000:.1f} Mb\",\n            label_orientation=\"vertical\",\n        )\n\n# Search MMseqs RBH CDSs &amp; plot hit links\nalign_coords = MMseqs([query_gbk, ref_gbk]).run()\nfor ac in align_coords:\n    region1 = (ac.query_name, ac.query_start, ac.query_end)\n    region2 = (ac.ref_name, ac.ref_start, ac.ref_end)\n    color = \"red\" if ac.is_inverted else \"grey\"\n    circos.link(region1, region2, color=color)\n\nfig = circos.plotfig()\n\n# Plot legend\n_ = circos.ax.legend(\n    handles=[\n        Patch(label=f\"{query_gbk.name} (Query)\", fc=QUERY_COLOR, ec=\"black\", lw=0.5),\n        Patch(label=f\"{ref_gbk.name} (Ref)\", fc=REF_COLOR, ec=\"black\", lw=0.5),\n    ],\n    loc=\"center\",\n    bbox_to_anchor=(0.5, -0.1),\n    ncols=2,\n)\n</pre> from pycirclize import Circos from pygenomeviz.parser import Genbank from pygenomeviz.utils import load_example_genbank_dataset from pygenomeviz.align import MMseqs from matplotlib.patches import Patch  QUERY_COLOR = \"salmon\" REF_COLOR = \"skyblue\" TICKS_INTERVAL = 100000  # Load query &amp; reference genbank files gbk_files = load_example_genbank_dataset(\"mycoplasma_mycoides\") query_gbk = Genbank(gbk_files[3]) ref_gbk = Genbank(gbk_files[2])  # Initialize circos instance circos = Circos(     sectors=dict(**ref_gbk.get_seqid2size(), **dict(reversed(list(query_gbk.get_seqid2size().items())))),     start=-358,     end=2,     space=4,     sector2clockwise={seqid: False for seqid in query_gbk.get_seqid2size()}, )  # Plot genomic sector axis &amp; xticks for sector in circos.sectors:     track = sector.add_track((98, 100))     color = QUERY_COLOR if sector.name in query_gbk.get_seqid2size() else REF_COLOR     track.axis(fc=color)     if sector.size &gt;= TICKS_INTERVAL:         track.xticks_by_interval(             TICKS_INTERVAL,             label_formatter=lambda v: f\"{v/1000000:.1f} Mb\",             label_orientation=\"vertical\",         )  # Search MMseqs RBH CDSs &amp; plot hit links align_coords = MMseqs([query_gbk, ref_gbk]).run() for ac in align_coords:     region1 = (ac.query_name, ac.query_start, ac.query_end)     region2 = (ac.ref_name, ac.ref_start, ac.ref_end)     color = \"red\" if ac.is_inverted else \"grey\"     circos.link(region1, region2, color=color)  fig = circos.plotfig()  # Plot legend _ = circos.ax.legend(     handles=[         Patch(label=f\"{query_gbk.name} (Query)\", fc=QUERY_COLOR, ec=\"black\", lw=0.5),         Patch(label=f\"{ref_gbk.name} (Ref)\", fc=REF_COLOR, ec=\"black\", lw=0.5),     ],     loc=\"center\",     bbox_to_anchor=(0.5, -0.1),     ncols=2, ) In\u00a0[4]: Copied! <pre>from pycirclize import Circos\nfrom pygenomeviz.parser import Fasta\nfrom pygenomeviz.utils import load_example_fasta_dataset, ColorCycler, interpolate_color\nfrom pygenomeviz.align import AlignCoord, Blast\nfrom matplotlib.patches import Patch\nColorCycler.set_cmap(\"Set1\")\n\nQUERY_TRACK_SIZE = 5\nMIN_IDENTITY = 70\nTICKS_INTERVAL = 100000\n\n# Load target &amp; comparison fasta files\nfasta_files = load_example_fasta_dataset(\"mycoplasma_mycoides\")\ntarget_fasta = Fasta(fasta_files[0])\ncomp_fasta_list = list(map(Fasta, fasta_files[1:]))\n\n# Initialize circos instance\ncircos = Circos(\n    sectors=target_fasta.get_seqid2size(),\n    space=0 if len(target_fasta.get_seqid2size()) == 1 else 2,\n)\ncircos.text(f\"{target_fasta.name}\\n({target_fasta.full_genome_length:,} bp)\", size=13)\n\n# Blast genome comparison &amp; plot match blocks\nmin_r_pos = 100\ncomp_name2color = {}\nfor idx, comp_fasta in enumerate(comp_fasta_list):\n    align_coords = Blast([target_fasta, comp_fasta]).run()\n    align_coords = AlignCoord.filter(align_coords, identity_thr=MIN_IDENTITY)\n    color = ColorCycler()\n    comp_name2color[comp_fasta.name] = color\n    min_r_pos -= QUERY_TRACK_SIZE\n    for sector in circos.sectors:\n        sector.add_track((min_r_pos, min_r_pos + QUERY_TRACK_SIZE), r_pad_ratio=0.1)\n    for ac in align_coords:\n        track = circos.get_sector(ac.query_name).tracks[-1] # Last added track in sector\n        rect_color = interpolate_color(color, v=ac.identity, vmin=MIN_IDENTITY) # type: ignore\n        track.rect(ac.query_start, ac.query_end, color=rect_color)\n\n# Plot genomic sector axis &amp; xticks\nfor sector in circos.sectors:\n    track = sector.add_track((min_r_pos - 0.3, min_r_pos))\n    track.axis(fc=\"black\")\n    if sector.size &gt;= TICKS_INTERVAL:\n        track.xticks_by_interval(\n            TICKS_INTERVAL,\n            outer=False,\n            label_formatter=lambda v: f\"{v/1000000:.1f} Mb\",\n            label_orientation=\"vertical\",\n        )\n\nfig = circos.plotfig()\n\n# Plot legend\n_ = fig.legend(\n    handles=[Patch(label=query_name, fc=color) for query_name, color in comp_name2color.items()],\n    loc=\"upper center\",\n    bbox_to_anchor=(0.5, 0.45),\n)\n</pre> from pycirclize import Circos from pygenomeviz.parser import Fasta from pygenomeviz.utils import load_example_fasta_dataset, ColorCycler, interpolate_color from pygenomeviz.align import AlignCoord, Blast from matplotlib.patches import Patch ColorCycler.set_cmap(\"Set1\")  QUERY_TRACK_SIZE = 5 MIN_IDENTITY = 70 TICKS_INTERVAL = 100000  # Load target &amp; comparison fasta files fasta_files = load_example_fasta_dataset(\"mycoplasma_mycoides\") target_fasta = Fasta(fasta_files[0]) comp_fasta_list = list(map(Fasta, fasta_files[1:]))  # Initialize circos instance circos = Circos(     sectors=target_fasta.get_seqid2size(),     space=0 if len(target_fasta.get_seqid2size()) == 1 else 2, ) circos.text(f\"{target_fasta.name}\\n({target_fasta.full_genome_length:,} bp)\", size=13)  # Blast genome comparison &amp; plot match blocks min_r_pos = 100 comp_name2color = {} for idx, comp_fasta in enumerate(comp_fasta_list):     align_coords = Blast([target_fasta, comp_fasta]).run()     align_coords = AlignCoord.filter(align_coords, identity_thr=MIN_IDENTITY)     color = ColorCycler()     comp_name2color[comp_fasta.name] = color     min_r_pos -= QUERY_TRACK_SIZE     for sector in circos.sectors:         sector.add_track((min_r_pos, min_r_pos + QUERY_TRACK_SIZE), r_pad_ratio=0.1)     for ac in align_coords:         track = circos.get_sector(ac.query_name).tracks[-1] # Last added track in sector         rect_color = interpolate_color(color, v=ac.identity, vmin=MIN_IDENTITY) # type: ignore         track.rect(ac.query_start, ac.query_end, color=rect_color)  # Plot genomic sector axis &amp; xticks for sector in circos.sectors:     track = sector.add_track((min_r_pos - 0.3, min_r_pos))     track.axis(fc=\"black\")     if sector.size &gt;= TICKS_INTERVAL:         track.xticks_by_interval(             TICKS_INTERVAL,             outer=False,             label_formatter=lambda v: f\"{v/1000000:.1f} Mb\",             label_orientation=\"vertical\",         )  fig = circos.plotfig()  # Plot legend _ = fig.legend(     handles=[Patch(label=query_name, fc=color) for query_name, color in comp_name2color.items()],     loc=\"upper center\",     bbox_to_anchor=(0.5, 0.45), )"},{"location":"comparative_genomics/#mummer","title":"MUMmer\u00b6","text":"<p>Plot MUMmer alignment links between query-reference genomes.</p>"},{"location":"comparative_genomics/#mmseqs","title":"MMseqs\u00b6","text":"<p>Search RBH(Reciprocal Best Hit) CDSs and plot hit links between query-reference genomes by MMseqs.</p>"},{"location":"comparative_genomics/#blast","title":"Blast\u00b6","text":"<p>Plot BRIG(Blast Ring Image Generator) like genome comparison figure.</p>"},{"location":"getting_started/","title":"Getting Started","text":"In\u00a0[1]: Copied! <pre># %pip install pycirclize\n</pre> # %pip install pycirclize In\u00a0[2]: Copied! <pre>from pycirclize import Circos\n\n# Initialize circos sectors\nsectors = {\"A\": 10, \"B\": 15, \"C\": 12, \"D\": 20, \"E\": 15}\ncircos = Circos(sectors, space=5)\n\nfor sector in circos.sectors:\n    # Plot sector axis &amp; name text\n    sector.axis(fc=\"none\", ls=\"dashdot\", lw=2, ec=\"black\", alpha=0.5)\n    sector.text(f\"Sector: {sector.name}={sector.size}\", size=15)\n\nfig = circos.plotfig()\n</pre> from pycirclize import Circos  # Initialize circos sectors sectors = {\"A\": 10, \"B\": 15, \"C\": 12, \"D\": 20, \"E\": 15} circos = Circos(sectors, space=5)  for sector in circos.sectors:     # Plot sector axis &amp; name text     sector.axis(fc=\"none\", ls=\"dashdot\", lw=2, ec=\"black\", alpha=0.5)     sector.text(f\"Sector: {sector.name}={sector.size}\", size=15)  fig = circos.plotfig() <p>From the data size of each sector and the space size between sectors, the appropriate circular layout of the sectors is set as shown in the figure above.</p> <p>In addition, user can freely set the start-end degrees of the circular layout in the range from -360 to 360. The following code is an example of setting <code>start=-270</code> and <code>end=30</code>.</p> In\u00a0[3]: Copied! <pre>from pycirclize import Circos\n\n# Initialize circos sectors\nsectors = {\"A\": 10, \"B\": 15, \"C\": 12, \"D\": 20, \"E\": 15}\ncircos = Circos(sectors, space=5, start=-270, end=30) # Set start-end degree ranges\n\nfor sector in circos.sectors:\n    # Plot sector axis &amp; name text\n    sector.axis(fc=\"none\", ls=\"dashdot\", lw=2, ec=\"black\", alpha=0.5)\n    sector.text(f\"Sector: {sector.name}={sector.size}\", size=15)\n\nfig = circos.plotfig()\n</pre> from pycirclize import Circos  # Initialize circos sectors sectors = {\"A\": 10, \"B\": 15, \"C\": 12, \"D\": 20, \"E\": 15} circos = Circos(sectors, space=5, start=-270, end=30) # Set start-end degree ranges  for sector in circos.sectors:     # Plot sector axis &amp; name text     sector.axis(fc=\"none\", ls=\"dashdot\", lw=2, ec=\"black\", alpha=0.5)     sector.text(f\"Sector: {sector.name}={sector.size}\", size=15)  fig = circos.plotfig() In\u00a0[4]: Copied! <pre>from pycirclize import Circos\n\n# Initialize circos sectors\nsectors = {\"A\": 10, \"B\": 15, \"C\": 12, \"D\": 20, \"E\": 15}\ncircos = Circos(sectors, space=5)\n\nfor sector in circos.sectors:\n    # Plot sector axis &amp; name text\n    sector.axis(fc=\"none\", ls=\"dashdot\", lw=2, ec=\"black\", alpha=0.5)\n    sector.text(f\"Sector: {sector.name}={sector.size}\", size=15)\n    # Set Track01 (Radius: 75 - 100)\n    track1 = sector.add_track((75, 100))\n    track1.axis(fc=\"tomato\", alpha=0.5)\n    track1.text(track1.name)\n    # Set Track02 (Radius: 45 - 70)\n    track2 = sector.add_track((45, 70))\n    track2.axis(fc=\"cyan\", alpha=0.5)\n    track2.text(track2.name)\n    # Set Track03 (Radius: 15 - 40)\n    track3 = sector.add_track((15, 40))\n    track3.axis(fc=\"lime\", alpha=0.5)\n    track3.text(track3.name)\n\nfig = circos.plotfig()\n</pre> from pycirclize import Circos  # Initialize circos sectors sectors = {\"A\": 10, \"B\": 15, \"C\": 12, \"D\": 20, \"E\": 15} circos = Circos(sectors, space=5)  for sector in circos.sectors:     # Plot sector axis &amp; name text     sector.axis(fc=\"none\", ls=\"dashdot\", lw=2, ec=\"black\", alpha=0.5)     sector.text(f\"Sector: {sector.name}={sector.size}\", size=15)     # Set Track01 (Radius: 75 - 100)     track1 = sector.add_track((75, 100))     track1.axis(fc=\"tomato\", alpha=0.5)     track1.text(track1.name)     # Set Track02 (Radius: 45 - 70)     track2 = sector.add_track((45, 70))     track2.axis(fc=\"cyan\", alpha=0.5)     track2.text(track2.name)     # Set Track03 (Radius: 15 - 40)     track3 = sector.add_track((15, 40))     track3.axis(fc=\"lime\", alpha=0.5)     track3.text(track3.name)  fig = circos.plotfig() <p>In the above figure example, the tracks are just placed, but in reality, various numerical and statistical data are plotted to the tracks. The next section explains how to plot within a track.</p> In\u00a0[5]: Copied! <pre>from pycirclize import Circos\nimport numpy as np\nnp.random.seed(0)\n\nsectors = {\"A\": 10, \"B\": 15, \"C\": 12, \"D\": 20, \"E\": 15}\ncircos = Circos(sectors, space=5)\nfor sector in circos.sectors:\n    # Plot sector name\n    sector.text(f\"Sector: {sector.name}\", r=110, size=15)\n    # Create x positions &amp; randomized y values for data plotting\n    x = np.arange(sector.start, sector.end) + 0.5\n    y = np.random.randint(0, 100, len(x))\n    # Plot line\n    line_track = sector.add_track((75, 100), r_pad_ratio=0.1)\n    line_track.axis()\n    line_track.xticks_by_interval(1)\n    line_track.line(x, y)\n    # Plot points\n    points_track = sector.add_track((45, 70), r_pad_ratio=0.1)\n    points_track.axis()\n    points_track.scatter(x, y)\n    # Plot bar\n    bar_track = sector.add_track((15, 40), r_pad_ratio=0.1)\n    bar_track.axis()\n    bar_track.bar(x, y)\n\nfig = circos.plotfig()\n</pre> from pycirclize import Circos import numpy as np np.random.seed(0)  sectors = {\"A\": 10, \"B\": 15, \"C\": 12, \"D\": 20, \"E\": 15} circos = Circos(sectors, space=5) for sector in circos.sectors:     # Plot sector name     sector.text(f\"Sector: {sector.name}\", r=110, size=15)     # Create x positions &amp; randomized y values for data plotting     x = np.arange(sector.start, sector.end) + 0.5     y = np.random.randint(0, 100, len(x))     # Plot line     line_track = sector.add_track((75, 100), r_pad_ratio=0.1)     line_track.axis()     line_track.xticks_by_interval(1)     line_track.line(x, y)     # Plot points     points_track = sector.add_track((45, 70), r_pad_ratio=0.1)     points_track.axis()     points_track.scatter(x, y)     # Plot bar     bar_track = sector.add_track((15, 40), r_pad_ratio=0.1)     bar_track.axis()     bar_track.bar(x, y)  fig = circos.plotfig() <p>User can also plot more data in a complex circular layout as follows.</p> In\u00a0[6]: Copied! <pre>from pycirclize import Circos\nfrom pycirclize.utils import ColorCycler\nimport numpy as np\n\nnp.random.seed(0)\nColorCycler.set_cmap(\"tab10\")\n\nsectors = {\"A\": 200, \"B\": 140, \"C\": 160}\nsector_colors = {\"A\": \"red\", \"B\": \"blue\", \"C\": \"green\"}\ncircos = Circos(sectors, space=10, start=90, end=360, endspace=False)\n\nfor sector in circos.sectors:\n    # Outer Track\n    outer_track = sector.add_track((95, 100))\n    outer_track.text(sector.name, color=\"white\")\n    outer_track.axis(fc=sector_colors[sector.name])\n    outer_track.xticks_by_interval(interval=10, label_orientation=\"vertical\")\n    # Rectangle Track\n    rect_track = sector.add_track((90, 95))\n    rect_size = 10\n    for i in range(int(rect_track.size / rect_size)):\n        x1, x2 = i * rect_size, i * rect_size + rect_size\n        rect_track.rect(x1, x2, ec=\"black\", lw=0.5, color=ColorCycler())\n        rect_track.text(str(i + 1), (x1 + x2) / 2, size=8, color=\"white\")\n    # Generate random x, y plot data\n    x = np.arange(1, int(sector.size), 2)\n    y = np.random.randint(0, 10, len(x))\n    # Line Track\n    line_track = sector.add_track((80, 90), r_pad_ratio=0.1)\n    line_track.axis()\n    line_track.line(x, y, color=\"blue\")\n    # Scatter Track\n    scatter_track = sector.add_track((70, 80), r_pad_ratio=0.1)\n    scatter_track.axis()\n    scatter_track.bar(x, y, width=0.8, color=\"orange\")\n    # Bar Track\n    bar_track = sector.add_track((60, 70), r_pad_ratio=0.1)\n    bar_track.axis()\n    bar_track.scatter(x, y, color=\"green\", s=3)\n    # Fill Track\n    fill_track = sector.add_track((50, 60), r_pad_ratio=0.1)\n    fill_track.axis()\n    fill_track.fill_between(x, y, y2=0, fc=\"red\", ec=\"black\", lw=0.5, alpha=0.5)\n    # Line + Bar + Scatter Track\n    line_bar_scatter_track = sector.add_track((40, 50), r_pad_ratio=0.1)\n    line_bar_scatter_track.axis()\n    line_bar_scatter_track.line(x, y, color=\"blue\")\n    line_bar_scatter_track.bar(x, y, width=0.8, color=\"orange\")\n    line_bar_scatter_track.scatter(x, y, color=\"green\", s=3)\n\n# Plot text description\ntext_common_kws = dict(ha=\"left\", va=\"center\", size=8)\ncircos.text(\" 01. Outer Track\", r=97.5, color=\"black\", **text_common_kws)\ncircos.text(\" 02. Rectangle Track\", r=92.5, color=\"grey\", **text_common_kws)\ncircos.text(\" 03. Line Track\", r=85, color=\"blue\", **text_common_kws)\ncircos.text(\" 04. Bar Track\", r=75, color=\"orange\", **text_common_kws)\ncircos.text(\" 05. Scatter Track\", r=65, color=\"green\", **text_common_kws)\ncircos.text(\" 06. Fill between Track\", r=55, color=\"red\", **text_common_kws)\ncircos.text(\" 07. Line + Bar + Scatter Track\", r=45, color=\"purple\", **text_common_kws)\n\nfig = circos.plotfig()\n</pre> from pycirclize import Circos from pycirclize.utils import ColorCycler import numpy as np  np.random.seed(0) ColorCycler.set_cmap(\"tab10\")  sectors = {\"A\": 200, \"B\": 140, \"C\": 160} sector_colors = {\"A\": \"red\", \"B\": \"blue\", \"C\": \"green\"} circos = Circos(sectors, space=10, start=90, end=360, endspace=False)  for sector in circos.sectors:     # Outer Track     outer_track = sector.add_track((95, 100))     outer_track.text(sector.name, color=\"white\")     outer_track.axis(fc=sector_colors[sector.name])     outer_track.xticks_by_interval(interval=10, label_orientation=\"vertical\")     # Rectangle Track     rect_track = sector.add_track((90, 95))     rect_size = 10     for i in range(int(rect_track.size / rect_size)):         x1, x2 = i * rect_size, i * rect_size + rect_size         rect_track.rect(x1, x2, ec=\"black\", lw=0.5, color=ColorCycler())         rect_track.text(str(i + 1), (x1 + x2) / 2, size=8, color=\"white\")     # Generate random x, y plot data     x = np.arange(1, int(sector.size), 2)     y = np.random.randint(0, 10, len(x))     # Line Track     line_track = sector.add_track((80, 90), r_pad_ratio=0.1)     line_track.axis()     line_track.line(x, y, color=\"blue\")     # Scatter Track     scatter_track = sector.add_track((70, 80), r_pad_ratio=0.1)     scatter_track.axis()     scatter_track.bar(x, y, width=0.8, color=\"orange\")     # Bar Track     bar_track = sector.add_track((60, 70), r_pad_ratio=0.1)     bar_track.axis()     bar_track.scatter(x, y, color=\"green\", s=3)     # Fill Track     fill_track = sector.add_track((50, 60), r_pad_ratio=0.1)     fill_track.axis()     fill_track.fill_between(x, y, y2=0, fc=\"red\", ec=\"black\", lw=0.5, alpha=0.5)     # Line + Bar + Scatter Track     line_bar_scatter_track = sector.add_track((40, 50), r_pad_ratio=0.1)     line_bar_scatter_track.axis()     line_bar_scatter_track.line(x, y, color=\"blue\")     line_bar_scatter_track.bar(x, y, width=0.8, color=\"orange\")     line_bar_scatter_track.scatter(x, y, color=\"green\", s=3)  # Plot text description text_common_kws = dict(ha=\"left\", va=\"center\", size=8) circos.text(\" 01. Outer Track\", r=97.5, color=\"black\", **text_common_kws) circos.text(\" 02. Rectangle Track\", r=92.5, color=\"grey\", **text_common_kws) circos.text(\" 03. Line Track\", r=85, color=\"blue\", **text_common_kws) circos.text(\" 04. Bar Track\", r=75, color=\"orange\", **text_common_kws) circos.text(\" 05. Scatter Track\", r=65, color=\"green\", **text_common_kws) circos.text(\" 06. Fill between Track\", r=55, color=\"red\", **text_common_kws) circos.text(\" 07. Line + Bar + Scatter Track\", r=45, color=\"purple\", **text_common_kws)  fig = circos.plotfig() In\u00a0[7]: Copied! <pre>from pycirclize import Circos\n\nsectors = {\"A\": 10, \"B\": 20, \"C\": 15}\nname2color = {\"A\": \"red\", \"B\": \"blue\", \"C\": \"green\"}\ncircos = Circos(sectors, space=5)\nfor sector in circos.sectors:\n    track = sector.add_track((95, 100))\n    track.axis(fc=name2color[sector.name])\n    track.text(sector.name, color=\"white\", size=12)\n    track.xticks_by_interval(1)\n\n# Plot links\ncircos.link((\"A\", 0, 1), (\"A\", 7, 8))\ncircos.link((\"A\", 1, 2), (\"A\", 7, 6))\ncircos.link((\"A\", 9, 10), (\"B\", 4, 3))\ncircos.link((\"B\", 5, 7), (\"C\", 6, 8))\ncircos.link((\"B\", 18, 16), (\"B\", 11, 13))\ncircos.link((\"C\", 1, 3), (\"B\", 2, 0))\ncircos.link((\"C\", 11.5, 14), (\"A\", 4, 3))\n\nfig = circos.plotfig()\n</pre> from pycirclize import Circos  sectors = {\"A\": 10, \"B\": 20, \"C\": 15} name2color = {\"A\": \"red\", \"B\": \"blue\", \"C\": \"green\"} circos = Circos(sectors, space=5) for sector in circos.sectors:     track = sector.add_track((95, 100))     track.axis(fc=name2color[sector.name])     track.text(sector.name, color=\"white\", size=12)     track.xticks_by_interval(1)  # Plot links circos.link((\"A\", 0, 1), (\"A\", 7, 8)) circos.link((\"A\", 1, 2), (\"A\", 7, 6)) circos.link((\"A\", 9, 10), (\"B\", 4, 3)) circos.link((\"B\", 5, 7), (\"C\", 6, 8)) circos.link((\"B\", 18, 16), (\"B\", 11, 13)) circos.link((\"C\", 1, 3), (\"B\", 2, 0)) circos.link((\"C\", 11.5, 14), (\"A\", 4, 3))  fig = circos.plotfig() <p>User can freely set the plotting style of each link, such as color, texture, and direction.</p> In\u00a0[8]: Copied! <pre>from pycirclize import Circos\n\nsectors = {\"A\": 10, \"B\": 20, \"C\": 15}\nname2color = {\"A\": \"red\", \"B\": \"blue\", \"C\": \"green\"}\ncircos = Circos(sectors, space=5)\nfor sector in circos.sectors:\n    track = sector.add_track((95, 100))\n    track.axis(fc=name2color[sector.name])\n    track.text(sector.name, color=\"white\", size=12)\n    track.xticks_by_interval(1)\n\n# Plot links with various styles\ncircos.link((\"A\", 0, 1), (\"A\", 7, 8))\ncircos.link((\"A\", 1, 2), (\"A\", 7, 6), color=\"skyblue\")\ncircos.link((\"A\", 9, 10), (\"B\", 4, 3), direction=1, color=\"tomato\")\ncircos.link((\"B\", 5, 7), (\"C\", 6, 8), direction=1, ec=\"black\", lw=1, hatch=\"//\")\ncircos.link((\"B\", 18, 16), (\"B\", 11, 13), r1=90, r2=90, color=\"violet\", ec=\"red\", lw=2, ls=\"dashed\")\ncircos.link((\"C\", 1, 3), (\"B\", 2, 0), direction=1, color=\"limegreen\")\ncircos.link((\"C\", 11.5, 14), (\"A\", 4, 3), direction=2, color=\"chocolate\", ec=\"black\", lw=1, ls=\"dotted\")\n\nfig = circos.plotfig()\n</pre> from pycirclize import Circos  sectors = {\"A\": 10, \"B\": 20, \"C\": 15} name2color = {\"A\": \"red\", \"B\": \"blue\", \"C\": \"green\"} circos = Circos(sectors, space=5) for sector in circos.sectors:     track = sector.add_track((95, 100))     track.axis(fc=name2color[sector.name])     track.text(sector.name, color=\"white\", size=12)     track.xticks_by_interval(1)  # Plot links with various styles circos.link((\"A\", 0, 1), (\"A\", 7, 8)) circos.link((\"A\", 1, 2), (\"A\", 7, 6), color=\"skyblue\") circos.link((\"A\", 9, 10), (\"B\", 4, 3), direction=1, color=\"tomato\") circos.link((\"B\", 5, 7), (\"C\", 6, 8), direction=1, ec=\"black\", lw=1, hatch=\"//\") circos.link((\"B\", 18, 16), (\"B\", 11, 13), r1=90, r2=90, color=\"violet\", ec=\"red\", lw=2, ls=\"dashed\") circos.link((\"C\", 1, 3), (\"B\", 2, 0), direction=1, color=\"limegreen\") circos.link((\"C\", 11.5, 14), (\"A\", 4, 3), direction=2, color=\"chocolate\", ec=\"black\", lw=1, ls=\"dotted\")  fig = circos.plotfig() <p>Of course, it is also possible to combine data plots to track with link plots.</p> In\u00a0[9]: Copied! <pre>from pycirclize import Circos\nimport numpy as np\nnp.random.seed(0)\n\n# Initialize Circos sectors\nsectors = {\"A\": 10, \"B\": 15, \"C\": 12, \"D\": 20, \"E\": 15}\ncircos = Circos(sectors, space=5)\n\nfor sector in circos.sectors:\n    # Plot sector name\n    sector.text(f\"Sector: {sector.name}\", r=110, size=15)\n    # Create x positions &amp; randomized y values\n    x = np.arange(sector.start, sector.end) + 0.5\n    y = np.random.randint(0, 100, len(x))\n    # Plot line track\n    line_track = sector.add_track((80, 100), r_pad_ratio=0.1)\n    line_track.xticks_by_interval(interval=1)\n    line_track.axis()\n    line_track.line(x, y)\n    # Plot points track\n    points_track = sector.add_track((55, 75), r_pad_ratio=0.1)\n    points_track.axis()\n    points_track.scatter(x, y)\n    # Plot bar track\n    bar_track = sector.add_track((30, 50), r_pad_ratio=0.1)\n    bar_track.axis()\n    bar_track.bar(x, y)\n\n# Plot links\ncircos.link((\"A\", 0, 3), (\"B\", 15, 12))\ncircos.link((\"B\", 0, 3), (\"C\", 7, 11), color=\"skyblue\")\ncircos.link((\"C\", 2, 5), (\"E\", 15, 12), color=\"chocolate\", direction=1)\ncircos.link((\"D\", 3, 5), (\"D\", 18, 15), color=\"lime\", ec=\"black\", lw=0.5, hatch=\"//\", direction=2)\ncircos.link((\"D\", 8, 10), (\"E\", 2, 8), color=\"violet\", ec=\"red\", lw=1.0, ls=\"dashed\")\n\nfig = circos.plotfig()\n</pre> from pycirclize import Circos import numpy as np np.random.seed(0)  # Initialize Circos sectors sectors = {\"A\": 10, \"B\": 15, \"C\": 12, \"D\": 20, \"E\": 15} circos = Circos(sectors, space=5)  for sector in circos.sectors:     # Plot sector name     sector.text(f\"Sector: {sector.name}\", r=110, size=15)     # Create x positions &amp; randomized y values     x = np.arange(sector.start, sector.end) + 0.5     y = np.random.randint(0, 100, len(x))     # Plot line track     line_track = sector.add_track((80, 100), r_pad_ratio=0.1)     line_track.xticks_by_interval(interval=1)     line_track.axis()     line_track.line(x, y)     # Plot points track     points_track = sector.add_track((55, 75), r_pad_ratio=0.1)     points_track.axis()     points_track.scatter(x, y)     # Plot bar track     bar_track = sector.add_track((30, 50), r_pad_ratio=0.1)     bar_track.axis()     bar_track.bar(x, y)  # Plot links circos.link((\"A\", 0, 3), (\"B\", 15, 12)) circos.link((\"B\", 0, 3), (\"C\", 7, 11), color=\"skyblue\") circos.link((\"C\", 2, 5), (\"E\", 15, 12), color=\"chocolate\", direction=1) circos.link((\"D\", 3, 5), (\"D\", 18, 15), color=\"lime\", ec=\"black\", lw=0.5, hatch=\"//\", direction=2) circos.link((\"D\", 8, 10), (\"E\", 2, 8), color=\"violet\", ec=\"red\", lw=1.0, ls=\"dashed\")  fig = circos.plotfig()"},{"location":"getting_started/#1-circular-layout-design","title":"1. Circular Layout Design\u00b6","text":"<p>pyCirclize uses a circular layout design with Sectors and Tracks inspired by circlize (R package). Different types of data can be assigned to each sector, and multiple tracks for data plotting can be freely placed within a sector.</p>"},{"location":"getting_started/#1-1-set-sectors","title":"1-1. Set Sectors\u00b6","text":"<p>The size of each data is required to set the sectors in a circular layout, and the space size between sectors can also be set. For example, if the data size of each sector is <code>A=10, B=15, C=12, D=20, E=15</code> and the space between sectors is <code>5 degrees</code>, it can be set up with the following code.</p>"},{"location":"getting_started/#1-2-set-tracks","title":"1-2. Set Tracks\u00b6","text":"<p>User can freely place tracks within the sector radius range (0 - 100). The following code is an example of placing 3 tracks in each sector.</p>"},{"location":"getting_started/#2-plot-data-on-track","title":"2. Plot Data on Track\u00b6","text":"<p>Track has a variety of plotting functions. This section shows how to perform basic plotting on track.</p> <p>Lines, Points, and Bars can be plotted with the <code>track.line()</code>, <code>track.scatter()</code>, and <code>track.bar()</code> methods, respectively. Also xticks can be plotted with the <code>track.xticks_by_interval()</code> method. Following is an example code.</p>"},{"location":"getting_started/#3-plot-link","title":"3. Plot Link\u00b6","text":"<p>pyCirclize implements the function to plot links within or between data in a sector. This function enables user to visualize interrelationships such as networks and flows between data.</p>"},{"location":"getting_started/#4-whats-next","title":"4. What's Next ?\u00b6","text":"<p>pyCirclize implements a variety of plotting functions. Only a few of the plotting functions are introduced in this section. If you want to know more about what kind of plotting function is available, I recommend you to look at the Plot API Example next.</p> <p>If you are interested in the contents of the following sections, you may want to look at them next.</p> <ul> <li>Chord Diagram</li> <li>Radar Chart</li> <li>Circos Plot (Genomics)</li> <li>Comparative Genomics</li> <li>Phylogenetic Tree</li> </ul>"},{"location":"phylogenetic_tree/","title":"Phylogenetic Tree","text":"In\u00a0[1]: Copied! <pre># %pip install pycirclize\n</pre> # %pip install pycirclize <p>User can plot the phylogenetic tree with <code>Circos.initialize_from_tree()</code> or <code>track.tree()</code> methods. Both methods return a TreeViz instance, which can be manipulated to set phylogenetic tree annotations such as marker and highlight.</p> In\u00a0[2]: Copied! <pre>from pycirclize import Circos\nfrom pycirclize.utils import load_example_tree_file\n\ntree_file = load_example_tree_file(\"alphabet.nwk\")\ncircos, tv = Circos.initialize_from_tree(tree_file)\nfig = circos.plotfig()\n</pre> from pycirclize import Circos from pycirclize.utils import load_example_tree_file  tree_file = load_example_tree_file(\"alphabet.nwk\") circos, tv = Circos.initialize_from_tree(tree_file) fig = circos.plotfig() In\u00a0[3]: Copied! <pre>from pycirclize import Circos\nfrom pycirclize.utils import load_example_tree_file\n\ntree_file = load_example_tree_file(\"alphabet.nwk\")\ncircos, tv = Circos.initialize_from_tree(\n    tree_file,\n    start=20,                                # Default: 0\n    end=340,                                 # Default: 360\n    r_lim=(10, 100),                         # Default: (50, 100)\n    line_kws=dict(color=\"red\", lw=2),        # Default: {}, Change color &amp; linewidth\n    align_line_kws=dict(ls=\"dashdot\", lw=1), # Default: {}, Change linestyle &amp; linewidth\n)\nfig = circos.plotfig()\n</pre> from pycirclize import Circos from pycirclize.utils import load_example_tree_file  tree_file = load_example_tree_file(\"alphabet.nwk\") circos, tv = Circos.initialize_from_tree(     tree_file,     start=20,                                # Default: 0     end=340,                                 # Default: 360     r_lim=(10, 100),                         # Default: (50, 100)     line_kws=dict(color=\"red\", lw=2),        # Default: {}, Change color &amp; linewidth     align_line_kws=dict(ls=\"dashdot\", lw=1), # Default: {}, Change linestyle &amp; linewidth ) fig = circos.plotfig() In\u00a0[4]: Copied! <pre>from pycirclize import Circos\nfrom pycirclize.utils import load_example_tree_file\nimport matplotlib.pyplot as plt\n\n# Create 2x2 polar subplots\nfig = plt.figure(figsize=(16, 16))\nfig.subplots_adjust(wspace=0.05, hspace=0.05)\nax_list = fig.subplots(2, 2, subplot_kw=dict(polar=True)).flatten()\n\n# Define 4 types kwargs for `Circos.initialize_from_tree()` method\nkwargs_list = [\n    dict(outer=True, align_leaf_label=True, ignore_branch_length=False),\n    dict(outer=True, align_leaf_label=False, ignore_branch_length=False),\n    dict(outer=False, align_leaf_label=True, ignore_branch_length=False),\n    dict(outer=True, align_leaf_label=True, ignore_branch_length=True),\n]\n\n# Plot trees with different kwargs\ntree_file = load_example_tree_file(\"alphabet.nwk\")\nfor ax, kwargs in zip(ax_list, kwargs_list):\n    circos, tv = Circos.initialize_from_tree(tree_file, r_lim=(60, 100), **kwargs)\n    kwargs_text = \"\\n\".join([f\"{k}: {v}\" for k, v in kwargs.items()])\n    circos.text(kwargs_text, size=14)\n    circos.plotfig(ax=ax)\n</pre> from pycirclize import Circos from pycirclize.utils import load_example_tree_file import matplotlib.pyplot as plt  # Create 2x2 polar subplots fig = plt.figure(figsize=(16, 16)) fig.subplots_adjust(wspace=0.05, hspace=0.05) ax_list = fig.subplots(2, 2, subplot_kw=dict(polar=True)).flatten()  # Define 4 types kwargs for `Circos.initialize_from_tree()` method kwargs_list = [     dict(outer=True, align_leaf_label=True, ignore_branch_length=False),     dict(outer=True, align_leaf_label=False, ignore_branch_length=False),     dict(outer=False, align_leaf_label=True, ignore_branch_length=False),     dict(outer=True, align_leaf_label=True, ignore_branch_length=True), ]  # Plot trees with different kwargs tree_file = load_example_tree_file(\"alphabet.nwk\") for ax, kwargs in zip(ax_list, kwargs_list):     circos, tv = Circos.initialize_from_tree(tree_file, r_lim=(60, 100), **kwargs)     kwargs_text = \"\\n\".join([f\"{k}: {v}\" for k, v in kwargs.items()])     circos.text(kwargs_text, size=14)     circos.plotfig(ax=ax) In\u00a0[5]: Copied! <pre>from pycirclize import Circos\nfrom pycirclize.utils import load_example_tree_file\nimport matplotlib.pyplot as plt\n\n# Create 2x2 polar subplots\nfig = plt.figure(figsize=(16, 16))\nfig.subplots_adjust(wspace=0.05, hspace=0.05)\nax_list = fig.subplots(2, 2, subplot_kw=dict(polar=True)).flatten()\n\n# Define 4 types kwargs for `Circos.initialize_from_tree()` method\nkwargs_list = [\n    dict(reverse=False, ladderize=False),\n    dict(reverse=True, ladderize=False),\n    dict(reverse=False, ladderize=True),\n    dict(reverse=True, ladderize=True),\n]\n\n# Plot trees with different kwargs\ntree_file = load_example_tree_file(\"alphabet.nwk\")\nfor ax, kwargs in zip(ax_list, kwargs_list):\n    circos, tv = Circos.initialize_from_tree(tree_file, line_kws=dict(lw=1), **kwargs)\n    kwargs_text = \"\\n\".join([f\"{k}: {v}\" for k, v in kwargs.items()])\n    circos.text(kwargs_text, size=14)\n    circos.plotfig(ax=ax)\n</pre> from pycirclize import Circos from pycirclize.utils import load_example_tree_file import matplotlib.pyplot as plt  # Create 2x2 polar subplots fig = plt.figure(figsize=(16, 16)) fig.subplots_adjust(wspace=0.05, hspace=0.05) ax_list = fig.subplots(2, 2, subplot_kw=dict(polar=True)).flatten()  # Define 4 types kwargs for `Circos.initialize_from_tree()` method kwargs_list = [     dict(reverse=False, ladderize=False),     dict(reverse=True, ladderize=False),     dict(reverse=False, ladderize=True),     dict(reverse=True, ladderize=True), ]  # Plot trees with different kwargs tree_file = load_example_tree_file(\"alphabet.nwk\") for ax, kwargs in zip(ax_list, kwargs_list):     circos, tv = Circos.initialize_from_tree(tree_file, line_kws=dict(lw=1), **kwargs)     kwargs_text = \"\\n\".join([f\"{k}: {v}\" for k, v in kwargs.items()])     circos.text(kwargs_text, size=14)     circos.plotfig(ax=ax) In\u00a0[6]: Copied! <pre>from pycirclize import Circos\nfrom pycirclize.utils import load_example_tree_file, ColorCycler\n\ntree_file = load_example_tree_file(\"alphabet.nwk\")\ncircos, tv = Circos.initialize_from_tree(tree_file)\n\n# Change label color\ntv.set_node_label_props(\"A\", color=\"red\")\n# Change label color &amp; size\ntv.set_node_label_props(\"D\", color=\"blue\", size=25)\n# Hide label\ntv.set_node_label_props(\"G\", size=0)\n# Change label colors\nColorCycler.set_cmap(\"tab10\")\nfor name in list(\"MNOPQRSTUVWXY\"):\n    tv.set_node_label_props(name, color=ColorCycler())\n\nfig = circos.plotfig()\n</pre> from pycirclize import Circos from pycirclize.utils import load_example_tree_file, ColorCycler  tree_file = load_example_tree_file(\"alphabet.nwk\") circos, tv = Circos.initialize_from_tree(tree_file)  # Change label color tv.set_node_label_props(\"A\", color=\"red\") # Change label color &amp; size tv.set_node_label_props(\"D\", color=\"blue\", size=25) # Hide label tv.set_node_label_props(\"G\", size=0) # Change label colors ColorCycler.set_cmap(\"tab10\") for name in list(\"MNOPQRSTUVWXY\"):     tv.set_node_label_props(name, color=ColorCycler())  fig = circos.plotfig() In\u00a0[7]: Copied! <pre>from pycirclize import Circos\nfrom pycirclize.utils import load_example_tree_file\n\ntree_file = load_example_tree_file(\"alphabet.nwk\")\ncircos, tv = Circos.initialize_from_tree(tree_file, line_kws=dict(lw=1.0))\n\n# Change line color on [A,B,C,D,E,F] MRCA(Most Recent Common Ancestor) node and its descendent nodes\ntv.set_node_line_props([\"A\", \"B\", \"C\", \"D\", \"E\", \"F\"], color=\"red\")\n# Change line color &amp; width on [G,I] MRCA node and its descendent nodes\ntv.set_node_line_props([\"G\", \"I\"], color=\"blue\", lw=2.0)\n# Change line color &amp; label color on [M,W] MRCA node and its descendent nodes\ntv.set_node_line_props([\"M\", \"W\"], color=\"green\", apply_label_color=True)\n# Change line color &amp; label color on [R,T] MRCA node and its descendent nodes\ntv.set_node_line_props([\"R\", \"T\"], color=\"purple\", apply_label_color=True)\n# Change line color &amp; style [X,Y] MRCA node\ntv.set_node_line_props([\"X\", \"Y\"], color=\"orange\", descendent=False, ls=\"dotted\")\n\nfig = circos.plotfig()\n</pre> from pycirclize import Circos from pycirclize.utils import load_example_tree_file  tree_file = load_example_tree_file(\"alphabet.nwk\") circos, tv = Circos.initialize_from_tree(tree_file, line_kws=dict(lw=1.0))  # Change line color on [A,B,C,D,E,F] MRCA(Most Recent Common Ancestor) node and its descendent nodes tv.set_node_line_props([\"A\", \"B\", \"C\", \"D\", \"E\", \"F\"], color=\"red\") # Change line color &amp; width on [G,I] MRCA node and its descendent nodes tv.set_node_line_props([\"G\", \"I\"], color=\"blue\", lw=2.0) # Change line color &amp; label color on [M,W] MRCA node and its descendent nodes tv.set_node_line_props([\"M\", \"W\"], color=\"green\", apply_label_color=True) # Change line color &amp; label color on [R,T] MRCA node and its descendent nodes tv.set_node_line_props([\"R\", \"T\"], color=\"purple\", apply_label_color=True) # Change line color &amp; style [X,Y] MRCA node tv.set_node_line_props([\"X\", \"Y\"], color=\"orange\", descendent=False, ls=\"dotted\")  fig = circos.plotfig() In\u00a0[8]: Copied! <pre>from pycirclize import Circos\nfrom pycirclize.utils import load_example_tree_file, ColorCycler\n\ntree_file = load_example_tree_file(\"alphabet.nwk\")\ncircos, tv = Circos.initialize_from_tree(tree_file)\n\n# Plot markers on [A,B,C,D,E,F] MRCA(Most Recent Common Ancestor) node and its descendent nodes\ntv.marker([\"A\", \"B\", \"C\", \"D\", \"E\", \"F\"], color=\"salmon\")\n# Plot square marker on [G,K] MRCA node\ntv.marker([\"G\", \"K\"], color=\"orange\", marker=\"s\", size=8, descendent=False)\n# Plot star markers on [X,Y] MRCA node and its descendent nodes\ntv.marker([\"X\", \"Y\"], color=\"lime\", marker=\"*\", size=10, ec=\"black\", lw=0.5)\n# Plot colored markers on M,N,O,P,Q,R,S,T,U,V,W leaf nodes\nColorCycler.set_cmap(\"Set3\")\nfor leaf_name in list(\"MNOPQRSTUVW\"):\n    tv.marker(leaf_name, color=ColorCycler(), ec=\"black\", lw=0.5)\n\nfig = circos.plotfig()\n</pre> from pycirclize import Circos from pycirclize.utils import load_example_tree_file, ColorCycler  tree_file = load_example_tree_file(\"alphabet.nwk\") circos, tv = Circos.initialize_from_tree(tree_file)  # Plot markers on [A,B,C,D,E,F] MRCA(Most Recent Common Ancestor) node and its descendent nodes tv.marker([\"A\", \"B\", \"C\", \"D\", \"E\", \"F\"], color=\"salmon\") # Plot square marker on [G,K] MRCA node tv.marker([\"G\", \"K\"], color=\"orange\", marker=\"s\", size=8, descendent=False) # Plot star markers on [X,Y] MRCA node and its descendent nodes tv.marker([\"X\", \"Y\"], color=\"lime\", marker=\"*\", size=10, ec=\"black\", lw=0.5) # Plot colored markers on M,N,O,P,Q,R,S,T,U,V,W leaf nodes ColorCycler.set_cmap(\"Set3\") for leaf_name in list(\"MNOPQRSTUVW\"):     tv.marker(leaf_name, color=ColorCycler(), ec=\"black\", lw=0.5)  fig = circos.plotfig() In\u00a0[9]: Copied! <pre>from pycirclize import Circos\nfrom pycirclize.utils import load_example_tree_file\n\ntree_file = load_example_tree_file(\"alphabet.nwk\")\ncircos, tv = Circos.initialize_from_tree(tree_file, line_kws=dict(lw=1))\n\n# Plot highlight on [A,B,C,D,E,F] MRCA(Most Recent Common Ancestor) node\ntv.highlight([\"A\", \"B\", \"C\", \"D\", \"E\", \"F\"], color=\"salmon\")\n# Plot highlight on [G,K] MRCA node\ntv.highlight([\"G\", \"K\"], color=\"orange\")\n# Plot highlight on L node with '//' hatch pattern\ntv.highlight(\"L\", color=\"lime\", hatch=\"//\", ec=\"white\")\n# Plot highlight on [N,W] MRCA node with edge line\ntv.highlight([\"N\", \"W\"], color=\"lightgrey\", alpha=0.5, ec=\"red\", lw=0.5)\n\nfig = circos.plotfig()\n</pre> from pycirclize import Circos from pycirclize.utils import load_example_tree_file  tree_file = load_example_tree_file(\"alphabet.nwk\") circos, tv = Circos.initialize_from_tree(tree_file, line_kws=dict(lw=1))  # Plot highlight on [A,B,C,D,E,F] MRCA(Most Recent Common Ancestor) node tv.highlight([\"A\", \"B\", \"C\", \"D\", \"E\", \"F\"], color=\"salmon\") # Plot highlight on [G,K] MRCA node tv.highlight([\"G\", \"K\"], color=\"orange\") # Plot highlight on L node with '//' hatch pattern tv.highlight(\"L\", color=\"lime\", hatch=\"//\", ec=\"white\") # Plot highlight on [N,W] MRCA node with edge line tv.highlight([\"N\", \"W\"], color=\"lightgrey\", alpha=0.5, ec=\"red\", lw=0.5)  fig = circos.plotfig() In\u00a0[10]: Copied! <pre>from pycirclize import Circos\nfrom pycirclize.utils import load_example_tree_file\nimport numpy as np\nnp.random.seed(0)\n\ntree_file = load_example_tree_file(\"alphabet.nwk\")\ncircos, tv = Circos.initialize_from_tree(\n    tree_file,\n    r_lim=(30, 80),\n    # Set large margin to insert heatmap track between tree and labels\n    leaf_label_rmargin=22,\n    line_kws=dict(lw=1),\n)\n\n# Plot heatmap\nsector = tv.track.parent_sector\ntrack = sector.add_track((80, 100))\ntrack.axis(ec=\"grey\")\nvmin, vmax, cmap = 0, 100, \"bwr\"\ndata = np.random.randint(vmin, vmax + 1, (3, tv.leaf_num))\ntrack.heatmap(data, cmap=cmap, show_value=True)\n\ncircos.colorbar((0.4, 0.495, 0.2, 0.01), vmin=vmin, vmax=vmax, cmap=cmap, orientation=\"horizontal\")\n\nfig = circos.plotfig()\n</pre> from pycirclize import Circos from pycirclize.utils import load_example_tree_file import numpy as np np.random.seed(0)  tree_file = load_example_tree_file(\"alphabet.nwk\") circos, tv = Circos.initialize_from_tree(     tree_file,     r_lim=(30, 80),     # Set large margin to insert heatmap track between tree and labels     leaf_label_rmargin=22,     line_kws=dict(lw=1), )  # Plot heatmap sector = tv.track.parent_sector track = sector.add_track((80, 100)) track.axis(ec=\"grey\") vmin, vmax, cmap = 0, 100, \"bwr\" data = np.random.randint(vmin, vmax + 1, (3, tv.leaf_num)) track.heatmap(data, cmap=cmap, show_value=True)  circos.colorbar((0.4, 0.495, 0.2, 0.01), vmin=vmin, vmax=vmax, cmap=cmap, orientation=\"horizontal\")  fig = circos.plotfig() In\u00a0[11]: Copied! <pre>from pycirclize import Circos\nfrom pycirclize.utils import load_example_tree_file\nimport pandas as pd\nimport numpy as np\nnp.random.seed(0)\n\ntree_file = load_example_tree_file(\"alphabet.nwk\")\ncircos, tv = Circos.initialize_from_tree(\n    tree_file,\n    start=5,\n    end=355,\n    r_lim=(30, 70),\n    # Set large margin to insert heatmap &amp; bar track between tree and labels\n    leaf_label_rmargin=32,\n    ignore_branch_length=True,\n    line_kws=dict(lw=1),\n)\n\n# Create example dataframe for heatmap &amp; bar plot\ndf = pd.DataFrame(\n    dict(\n        s1=np.random.randint(0, 100, tv.leaf_num),\n        s2=np.random.randint(0, 100, tv.leaf_num),\n        s3=np.random.randint(0, 100, tv.leaf_num),\n        count=np.random.randint(1, 10, tv.leaf_num),\n    ),\n    index=tv.leaf_labels,\n)\nprint(df.head())\n\n# Plot bar (from `count` column data)\nsector = tv.track.parent_sector\nbar_track = sector.add_track((85, 100), r_pad_ratio=0.1)\nbar_track.axis()\nbar_track.grid()\nx = np.arange(0, tv.leaf_num) + 0.5\ny = df[\"count\"].to_numpy()\nbar_track.bar(x, y, width=0.3, color=\"orange\")\n\n# Plot heatmaps (from `s1, s2, s3` column data)\ntrack1 = sector.add_track((80, 85))\ntrack1.heatmap(df[\"s1\"].to_numpy(), cmap=\"Reds\", show_value=True, rect_kws=dict(ec=\"grey\", lw=0.5))\ntrack2 = sector.add_track((75, 80))\ntrack2.heatmap(df[\"s2\"].to_numpy(), cmap=\"Blues\", show_value=True, rect_kws=dict(ec=\"grey\", lw=0.5))\ntrack3 = sector.add_track((70, 75))\ntrack3.heatmap(df[\"s3\"].to_numpy(), cmap=\"Greens\", show_value=True, rect_kws=dict(ec=\"grey\", lw=0.5))\n\n# Plot track labels\ncircos.text(\"count\", r=bar_track.r_center, color=\"orange\")\ncircos.text(\"s1\", r=track1.r_center, color=\"red\")\ncircos.text(\"s2\", r=track2.r_center, color=\"blue\")\ncircos.text(\"s3\", r=track3.r_center, color=\"green\")\n\nfig = circos.plotfig()\n</pre> from pycirclize import Circos from pycirclize.utils import load_example_tree_file import pandas as pd import numpy as np np.random.seed(0)  tree_file = load_example_tree_file(\"alphabet.nwk\") circos, tv = Circos.initialize_from_tree(     tree_file,     start=5,     end=355,     r_lim=(30, 70),     # Set large margin to insert heatmap &amp; bar track between tree and labels     leaf_label_rmargin=32,     ignore_branch_length=True,     line_kws=dict(lw=1), )  # Create example dataframe for heatmap &amp; bar plot df = pd.DataFrame(     dict(         s1=np.random.randint(0, 100, tv.leaf_num),         s2=np.random.randint(0, 100, tv.leaf_num),         s3=np.random.randint(0, 100, tv.leaf_num),         count=np.random.randint(1, 10, tv.leaf_num),     ),     index=tv.leaf_labels, ) print(df.head())  # Plot bar (from `count` column data) sector = tv.track.parent_sector bar_track = sector.add_track((85, 100), r_pad_ratio=0.1) bar_track.axis() bar_track.grid() x = np.arange(0, tv.leaf_num) + 0.5 y = df[\"count\"].to_numpy() bar_track.bar(x, y, width=0.3, color=\"orange\")  # Plot heatmaps (from `s1, s2, s3` column data) track1 = sector.add_track((80, 85)) track1.heatmap(df[\"s1\"].to_numpy(), cmap=\"Reds\", show_value=True, rect_kws=dict(ec=\"grey\", lw=0.5)) track2 = sector.add_track((75, 80)) track2.heatmap(df[\"s2\"].to_numpy(), cmap=\"Blues\", show_value=True, rect_kws=dict(ec=\"grey\", lw=0.5)) track3 = sector.add_track((70, 75)) track3.heatmap(df[\"s3\"].to_numpy(), cmap=\"Greens\", show_value=True, rect_kws=dict(ec=\"grey\", lw=0.5))  # Plot track labels circos.text(\"count\", r=bar_track.r_center, color=\"orange\") circos.text(\"s1\", r=track1.r_center, color=\"red\") circos.text(\"s2\", r=track2.r_center, color=\"blue\") circos.text(\"s3\", r=track3.r_center, color=\"green\")  fig = circos.plotfig() <pre>   s1  s2  s3  count\nA  44  20  28      6\nB  47  80  34      5\nC  64  69   0      5\nD  67  79   0      7\nE  67  47  36      5\n</pre> In\u00a0[12]: Copied! <pre>from pycirclize import Circos\nfrom pycirclize.utils import load_example_tree_file\n\ntree_file = load_example_tree_file(\"large_example.nwk\")\ncircos, tv = Circos.initialize_from_tree(tree_file, leaf_label_size=5)\nfig = circos.plotfig()\n</pre> from pycirclize import Circos from pycirclize.utils import load_example_tree_file  tree_file = load_example_tree_file(\"large_example.nwk\") circos, tv = Circos.initialize_from_tree(tree_file, leaf_label_size=5) fig = circos.plotfig() In\u00a0[13]: Copied! <pre>from pycirclize import Circos\nfrom pycirclize.utils import load_example_tree_file, ColorCycler\nfrom matplotlib.lines import Line2D\n\ntree_file = load_example_tree_file(\"large_example.nwk\")\ncircos, tv = Circos.initialize_from_tree(\n    tree_file,\n    start=-90,\n    end=270,\n    r_lim=(30, 100),\n    leaf_label_size=5,\n    ignore_branch_length=True,\n    label_formatter=lambda t: t.replace(\"_\", \" \"),\n)\n\n# Define group-species dict for tree annotation\n# In this example, set minimum species list to specify group's MRCA node\ngroup_name2species_list = dict(\n    Monotremata=[\"Tachyglossus_aculeatus\", \"Ornithorhynchus_anatinus\"],\n    Marsupialia=[\"Monodelphis_domestica\", \"Vombatus_ursinus\"],\n    Xenarthra=[\"Choloepus_didactylus\", \"Dasypus_novemcinctus\"],\n    Afrotheria=[\"Trichechus_manatus\", \"Chrysochloris_asiatica\"],\n    Euarchontes=[\"Galeopterus_variegatus\", \"Theropithecus_gelada\"],\n    Glires=[\"Oryctolagus_cuniculus\", \"Microtus_oregoni\"],\n    Laurasiatheria=[\"Talpa_occidentalis\", \"Mirounga_leonina\"],\n)\n\n# Set tree line color &amp; label color\nColorCycler.set_cmap(\"tab10\")\ngroup_name2color = {name: ColorCycler() for name in group_name2species_list.keys()}\nfor group_name, species_list in group_name2species_list.items():\n    color = group_name2color[group_name]\n    tv.set_node_line_props(species_list, color=color, apply_label_color=True)\n\n# Plot figure &amp; set legend on center\nfig = circos.plotfig()\n_ = circos.ax.legend(\n    handles=[Line2D([], [], label=n, color=c) for n, c in group_name2color.items()],\n    labelcolor=group_name2color.values(),\n    fontsize=6,\n    loc=\"center\",\n    bbox_to_anchor=(0.5, 0.5),\n)\n</pre> from pycirclize import Circos from pycirclize.utils import load_example_tree_file, ColorCycler from matplotlib.lines import Line2D  tree_file = load_example_tree_file(\"large_example.nwk\") circos, tv = Circos.initialize_from_tree(     tree_file,     start=-90,     end=270,     r_lim=(30, 100),     leaf_label_size=5,     ignore_branch_length=True,     label_formatter=lambda t: t.replace(\"_\", \" \"), )  # Define group-species dict for tree annotation # In this example, set minimum species list to specify group's MRCA node group_name2species_list = dict(     Monotremata=[\"Tachyglossus_aculeatus\", \"Ornithorhynchus_anatinus\"],     Marsupialia=[\"Monodelphis_domestica\", \"Vombatus_ursinus\"],     Xenarthra=[\"Choloepus_didactylus\", \"Dasypus_novemcinctus\"],     Afrotheria=[\"Trichechus_manatus\", \"Chrysochloris_asiatica\"],     Euarchontes=[\"Galeopterus_variegatus\", \"Theropithecus_gelada\"],     Glires=[\"Oryctolagus_cuniculus\", \"Microtus_oregoni\"],     Laurasiatheria=[\"Talpa_occidentalis\", \"Mirounga_leonina\"], )  # Set tree line color &amp; label color ColorCycler.set_cmap(\"tab10\") group_name2color = {name: ColorCycler() for name in group_name2species_list.keys()} for group_name, species_list in group_name2species_list.items():     color = group_name2color[group_name]     tv.set_node_line_props(species_list, color=color, apply_label_color=True)  # Plot figure &amp; set legend on center fig = circos.plotfig() _ = circos.ax.legend(     handles=[Line2D([], [], label=n, color=c) for n, c in group_name2color.items()],     labelcolor=group_name2color.values(),     fontsize=6,     loc=\"center\",     bbox_to_anchor=(0.5, 0.5), ) In\u00a0[14]: Copied! <pre>from pycirclize import Circos\nfrom pycirclize.utils import load_example_tree_file, ColorCycler\nimport numpy as np\nnp.random.seed(0)\n\ntree_file = load_example_tree_file(\"large_example.nwk\")\ncircos, tv = Circos.initialize_from_tree(\n    tree_file,\n    start=-350,\n    end=0,\n    r_lim=(10, 80),\n    leaf_label_size=5,\n    leaf_label_rmargin=21,\n    line_kws=dict(color=\"lightgrey\", lw=1),\n)\n\n# Define group-species dict for tree annotation\n# In this example, set minimum species list to specify group's MRCA node\ngroup_name2species_list = dict(\n    Monotremata=[\"Tachyglossus_aculeatus\", \"Ornithorhynchus_anatinus\"],\n    Marsupialia=[\"Monodelphis_domestica\", \"Vombatus_ursinus\"],\n    Xenarthra=[\"Choloepus_didactylus\", \"Dasypus_novemcinctus\"],\n    Afrotheria=[\"Trichechus_manatus\", \"Chrysochloris_asiatica\"],\n    Euarchontes=[\"Galeopterus_variegatus\", \"Theropithecus_gelada\"],\n    Glires=[\"Oryctolagus_cuniculus\", \"Microtus_oregoni\"],\n    Laurasiatheria=[\"Talpa_occidentalis\", \"Mirounga_leonina\"],\n)\n\n# Set tree line color\nColorCycler.set_cmap(\"Set2\")\nfor species_list in group_name2species_list.values():\n    tv.set_node_line_props(species_list, color=ColorCycler())\n\n# Plot heatmap\nsector = circos.sectors[0]\nheatmap_track = sector.add_track((80, 100))\nmatrix_data = np.random.randint(0, 100, (5, tv.leaf_num))\nheatmap_track.heatmap(matrix_data, cmap=\"viridis\")\nheatmap_track.yticks([0.5, 1.5, 2.5, 3.5, 4.5], list(\"EDCBA\"), vmax=5, tick_length=0)\n\nfig = circos.plotfig()\n</pre> from pycirclize import Circos from pycirclize.utils import load_example_tree_file, ColorCycler import numpy as np np.random.seed(0)  tree_file = load_example_tree_file(\"large_example.nwk\") circos, tv = Circos.initialize_from_tree(     tree_file,     start=-350,     end=0,     r_lim=(10, 80),     leaf_label_size=5,     leaf_label_rmargin=21,     line_kws=dict(color=\"lightgrey\", lw=1), )  # Define group-species dict for tree annotation # In this example, set minimum species list to specify group's MRCA node group_name2species_list = dict(     Monotremata=[\"Tachyglossus_aculeatus\", \"Ornithorhynchus_anatinus\"],     Marsupialia=[\"Monodelphis_domestica\", \"Vombatus_ursinus\"],     Xenarthra=[\"Choloepus_didactylus\", \"Dasypus_novemcinctus\"],     Afrotheria=[\"Trichechus_manatus\", \"Chrysochloris_asiatica\"],     Euarchontes=[\"Galeopterus_variegatus\", \"Theropithecus_gelada\"],     Glires=[\"Oryctolagus_cuniculus\", \"Microtus_oregoni\"],     Laurasiatheria=[\"Talpa_occidentalis\", \"Mirounga_leonina\"], )  # Set tree line color ColorCycler.set_cmap(\"Set2\") for species_list in group_name2species_list.values():     tv.set_node_line_props(species_list, color=ColorCycler())  # Plot heatmap sector = circos.sectors[0] heatmap_track = sector.add_track((80, 100)) matrix_data = np.random.randint(0, 100, (5, tv.leaf_num)) heatmap_track.heatmap(matrix_data, cmap=\"viridis\") heatmap_track.yticks([0.5, 1.5, 2.5, 3.5, 4.5], list(\"EDCBA\"), vmax=5, tick_length=0)  fig = circos.plotfig() In\u00a0[15]: Copied! <pre>from pycirclize import Circos\nfrom pycirclize.utils import load_example_tree_file\nfrom matplotlib.colors import LinearSegmentedColormap\nimport pandas as pd\nimport numpy as np\nnp.random.seed(0)\n\ntree_file = load_example_tree_file(\"large_example.nwk\")\ncircos, tv = Circos.initialize_from_tree(\n    tree_file,\n    start=-355,\n    end=-5,\n    r_lim=(10, 80),\n    leaf_label_size=0,\n)\ntv.track.axis(fc=\"lightgrey\", ec=\"lightgrey\", alpha=0.2)\n\n# Create example dataframe for heatmap plot\nheatmap_df = pd.DataFrame(\n    dict(\n        A=np.random.randint(0, 100, tv.leaf_num),\n        B=np.random.randint(0, 100, tv.leaf_num),\n        C=np.random.randint(0, 2, tv.leaf_num),\n        D=np.random.randint(0, 2, tv.leaf_num).astype(bool),\n    ),\n    index=tv.leaf_labels,\n)\nprint(heatmap_df)\n\n# Plot heatmap with various style\nsector = circos.sectors[0]\nsector.rect(r_lim=(80, 100), ec=\"grey\", lw=1)\n\nheatmap_track1 = sector.add_track((95, 100))\nheatmap_track1.heatmap(heatmap_df[\"A\"].to_numpy(), cmap=\"Reds\", vmin=0, vmax=100, show_value=True, text_kws=dict(size=5, orientation=\"vertical\"))\ncircos.text(\"A\", r=heatmap_track1.r_center, size=8, color=\"red\")\n\nheatmap_track2 = sector.add_track((90, 95))\nheatmap_track2.heatmap(heatmap_df[\"B\"].to_numpy(), cmap=\"Blues\", vmin=0, vmax=100)\ncircos.text(\"B\", r=heatmap_track2.r_center, size=8, color=\"blue\")\n\nheatmap_track3 = sector.add_track((85, 90))\nlime_cmap = LinearSegmentedColormap.from_list(\"limecmap\", [\"white\", \"lime\"])\nheatmap_track3.heatmap(heatmap_df[\"C\"].to_numpy(), cmap=lime_cmap, vmin=0, vmax=1, show_value=True, text_kws=dict(size=5), rect_kws=dict(ec=\"lightgrey\", lw=0.5))\ncircos.text(\"C\", r=heatmap_track3.r_center, size=8, color=\"lime\")\n\nheatmap_track4 = sector.add_track((80, 85))\norange_cmap = LinearSegmentedColormap.from_list(\"orangecmap\", [\"white\", \"orange\"])\nheatmap_track4.heatmap(heatmap_df[\"D\"].to_numpy(), cmap=orange_cmap, vmin=0, vmax=1, rect_kws=dict(ec=\"lightgrey\", lw=0.5))\ncircos.text(\"D\", r=heatmap_track4.r_center, size=8, color=\"orange\")\n\nfig = circos.plotfig()\n</pre> from pycirclize import Circos from pycirclize.utils import load_example_tree_file from matplotlib.colors import LinearSegmentedColormap import pandas as pd import numpy as np np.random.seed(0)  tree_file = load_example_tree_file(\"large_example.nwk\") circos, tv = Circos.initialize_from_tree(     tree_file,     start=-355,     end=-5,     r_lim=(10, 80),     leaf_label_size=0, ) tv.track.axis(fc=\"lightgrey\", ec=\"lightgrey\", alpha=0.2)  # Create example dataframe for heatmap plot heatmap_df = pd.DataFrame(     dict(         A=np.random.randint(0, 100, tv.leaf_num),         B=np.random.randint(0, 100, tv.leaf_num),         C=np.random.randint(0, 2, tv.leaf_num),         D=np.random.randint(0, 2, tv.leaf_num).astype(bool),     ),     index=tv.leaf_labels, ) print(heatmap_df)  # Plot heatmap with various style sector = circos.sectors[0] sector.rect(r_lim=(80, 100), ec=\"grey\", lw=1)  heatmap_track1 = sector.add_track((95, 100)) heatmap_track1.heatmap(heatmap_df[\"A\"].to_numpy(), cmap=\"Reds\", vmin=0, vmax=100, show_value=True, text_kws=dict(size=5, orientation=\"vertical\")) circos.text(\"A\", r=heatmap_track1.r_center, size=8, color=\"red\")  heatmap_track2 = sector.add_track((90, 95)) heatmap_track2.heatmap(heatmap_df[\"B\"].to_numpy(), cmap=\"Blues\", vmin=0, vmax=100) circos.text(\"B\", r=heatmap_track2.r_center, size=8, color=\"blue\")  heatmap_track3 = sector.add_track((85, 90)) lime_cmap = LinearSegmentedColormap.from_list(\"limecmap\", [\"white\", \"lime\"]) heatmap_track3.heatmap(heatmap_df[\"C\"].to_numpy(), cmap=lime_cmap, vmin=0, vmax=1, show_value=True, text_kws=dict(size=5), rect_kws=dict(ec=\"lightgrey\", lw=0.5)) circos.text(\"C\", r=heatmap_track3.r_center, size=8, color=\"lime\")  heatmap_track4 = sector.add_track((80, 85)) orange_cmap = LinearSegmentedColormap.from_list(\"orangecmap\", [\"white\", \"orange\"]) heatmap_track4.heatmap(heatmap_df[\"D\"].to_numpy(), cmap=orange_cmap, vmin=0, vmax=1, rect_kws=dict(ec=\"lightgrey\", lw=0.5)) circos.text(\"D\", r=heatmap_track4.r_center, size=8, color=\"orange\")  fig = circos.plotfig() <pre>                            A   B  C      D\nTachyglossus_aculeatus     44  21  0  False\nOrnithorhynchus_anatinus   47  25  1   True\nMonodelphis_domestica      64  80  1   True\nGracilinanus_agilis        67  60  1   True\nDromiciops_gliroides       67  61  1  False\n...                        ..  .. ..    ...\nHalichoerus_grypus         75  72  1   True\nNeomonachus_schauinslandi  56  61  1   True\nLeptonychotes_weddellii    16  13  0   True\nMirounga_leonina           24   5  1   True\nMirounga_angustirostris    29   0  0  False\n\n[190 rows x 4 columns]\n</pre> In\u00a0[16]: Copied! <pre>from pycirclize import Circos\nfrom Bio.Phylo.BaseTree import Tree\nimport random\nrandom.seed(0)\n\n# Create 3 randomized trees\ntree_size_list = [60, 40, 50]\ntrees = [Tree.randomized(size, branch_stdev=0.5) for size in tree_size_list]\n\n# Initialize circos sector with 3 randomized tree size\nsectors = {name: tree.count_terminals() for name, tree in zip(list(\"ABC\"), trees)}\ncircos = Circos(sectors, space=5)\n\nfor sector, tree in zip(circos.sectors, trees):\n    sector.text(f\"{sector.name} ({sector.size})\", r=120, size=12)\n    track = sector.add_track((30, 100))\n    track.tree(tree, leaf_label_size=8)\n\nfig = circos.plotfig()\n</pre> from pycirclize import Circos from Bio.Phylo.BaseTree import Tree import random random.seed(0)  # Create 3 randomized trees tree_size_list = [60, 40, 50] trees = [Tree.randomized(size, branch_stdev=0.5) for size in tree_size_list]  # Initialize circos sector with 3 randomized tree size sectors = {name: tree.count_terminals() for name, tree in zip(list(\"ABC\"), trees)} circos = Circos(sectors, space=5)  for sector, tree in zip(circos.sectors, trees):     sector.text(f\"{sector.name} ({sector.size})\", r=120, size=12)     track = sector.add_track((30, 100))     track.tree(tree, leaf_label_size=8)  fig = circos.plotfig() In\u00a0[17]: Copied! <pre>from pycirclize import Circos\nfrom Bio.Phylo.BaseTree import Tree\nimport random\nimport numpy as np\nrandom.seed(0)\nnp.random.seed(0)\n\n# Create 3 randomized trees\ntree_size_list = [60, 40, 50]\ntrees = [Tree.randomized(size, branch_stdev=0.5) for size in tree_size_list]\n\n# Initialize circos sector with 3 randomized tree size\nsectors = {name: tree.count_terminals() for name, tree in zip(list(\"ABC\"), trees)}\ncircos = Circos(sectors, space=5)\n\ncolors = [\"tomato\", \"skyblue\", \"limegreen\"]\ncmaps = [\"bwr\", \"viridis\", \"Spectral\"]\nfor sector, tree, color, cmap in zip(circos.sectors, trees, colors, cmaps):\n    sector.text(f\"{sector.name} ({sector.size})\", size=12)\n    # Plot randomized tree\n    tree_track = sector.add_track((30, 70))\n    tree_track.axis(fc=color, alpha=0.2)\n    tree_track.tree(tree, leaf_label_size=0)\n    # Plot randomized heatmap\n    heatmap_track = sector.add_track((70, 85))\n    matrix_data = np.random.randint(0, 100, (5, int(sector.size)))\n    heatmap_track.axis(ec=\"grey\")\n    heatmap_track.heatmap(matrix_data, cmap=cmap)\n    # Plot randomized bar\n    bar_track = sector.add_track((85, 100))\n    x = np.arange(0, int(sector.size)) + 0.5\n    height = np.random.randint(1, 10, int(sector.size))\n    bar_track.bar(x, height, fc=color, ec=\"grey\", lw=0.5, hatch=\"//\")\n\nfig = circos.plotfig()\n</pre> from pycirclize import Circos from Bio.Phylo.BaseTree import Tree import random import numpy as np random.seed(0) np.random.seed(0)  # Create 3 randomized trees tree_size_list = [60, 40, 50] trees = [Tree.randomized(size, branch_stdev=0.5) for size in tree_size_list]  # Initialize circos sector with 3 randomized tree size sectors = {name: tree.count_terminals() for name, tree in zip(list(\"ABC\"), trees)} circos = Circos(sectors, space=5)  colors = [\"tomato\", \"skyblue\", \"limegreen\"] cmaps = [\"bwr\", \"viridis\", \"Spectral\"] for sector, tree, color, cmap in zip(circos.sectors, trees, colors, cmaps):     sector.text(f\"{sector.name} ({sector.size})\", size=12)     # Plot randomized tree     tree_track = sector.add_track((30, 70))     tree_track.axis(fc=color, alpha=0.2)     tree_track.tree(tree, leaf_label_size=0)     # Plot randomized heatmap     heatmap_track = sector.add_track((70, 85))     matrix_data = np.random.randint(0, 100, (5, int(sector.size)))     heatmap_track.axis(ec=\"grey\")     heatmap_track.heatmap(matrix_data, cmap=cmap)     # Plot randomized bar     bar_track = sector.add_track((85, 100))     x = np.arange(0, int(sector.size)) + 0.5     height = np.random.randint(1, 10, int(sector.size))     bar_track.bar(x, height, fc=color, ec=\"grey\", lw=0.5, hatch=\"//\")  fig = circos.plotfig()"},{"location":"phylogenetic_tree/#1-simple-tree","title":"1. Simple Tree\u00b6","text":""},{"location":"phylogenetic_tree/#1-1-default-style","title":"1-1. Default Style\u00b6","text":""},{"location":"phylogenetic_tree/#1-2-change-style-1","title":"1-2. Change Style 1\u00b6","text":""},{"location":"phylogenetic_tree/#1-3-change-style-2","title":"1-3. Change Style 2\u00b6","text":""},{"location":"phylogenetic_tree/#1-4-change-style-3","title":"1-4. Change Style 3\u00b6","text":""},{"location":"phylogenetic_tree/#1-5-set-label-properties","title":"1-5. Set Label Properties\u00b6","text":""},{"location":"phylogenetic_tree/#1-6-set-line-properties","title":"1-6. Set Line Properties\u00b6","text":""},{"location":"phylogenetic_tree/#1-7-plot-marker","title":"1-7. Plot Marker\u00b6","text":""},{"location":"phylogenetic_tree/#1-8-plot-highlight","title":"1-8. Plot Highlight\u00b6","text":""},{"location":"phylogenetic_tree/#1-9-with-heatmap","title":"1-9. With Heatmap\u00b6","text":""},{"location":"phylogenetic_tree/#1-10-with-heatmap-bar","title":"1-10. With Heatmap + Bar\u00b6","text":""},{"location":"phylogenetic_tree/#2-large-tree","title":"2. Large Tree\u00b6","text":"<p>Example mammalian phylogenetic tree data is obtained from OrthoMaM.</p>"},{"location":"phylogenetic_tree/#2-1-default-style","title":"2-1. Default Style\u00b6","text":""},{"location":"phylogenetic_tree/#2-2-coloring-style","title":"2-2. Coloring Style\u00b6","text":""},{"location":"phylogenetic_tree/#2-3-with-heatmap","title":"2-3. With Heatmap\u00b6","text":""},{"location":"phylogenetic_tree/#2-4-with-complex-heatmap","title":"2-4. With Complex Heatmap\u00b6","text":""},{"location":"phylogenetic_tree/#3-multiple-trees","title":"3. Multiple Trees\u00b6","text":""},{"location":"phylogenetic_tree/#3-1-default-style","title":"3-1. Default Style\u00b6","text":""},{"location":"phylogenetic_tree/#3-2-with-heatmap-bar","title":"3-2. With Heatmap + Bar\u00b6","text":""},{"location":"plot_api_example/","title":"Plot API Example","text":"In\u00a0[1]: Copied! <pre># %pip install pycirclize\n</pre> # %pip install pycirclize In\u00a0[2]: Copied! <pre>from pycirclize import Circos\n\nsectors = {\"A\": 10, \"B\": 20, \"C\": 15}\ncircos = Circos(sectors, space=5)\ncircos.axis()\nfig = circos.plotfig()\n</pre> from pycirclize import Circos  sectors = {\"A\": 10, \"B\": 20, \"C\": 15} circos = Circos(sectors, space=5) circos.axis() fig = circos.plotfig() In\u00a0[3]: Copied! <pre>from pycirclize import Circos\n\nsectors = {\"A\": 10, \"B\": 20, \"C\": 15}\ncircos = Circos(sectors, end=270, space=5)\ncircos.axis(fc=\"lightgrey\", ec=\"red\")\nfig = circos.plotfig()\n</pre> from pycirclize import Circos  sectors = {\"A\": 10, \"B\": 20, \"C\": 15} circos = Circos(sectors, end=270, space=5) circos.axis(fc=\"lightgrey\", ec=\"red\") fig = circos.plotfig() In\u00a0[4]: Copied! <pre>from pycirclize import Circos\nimport math\n\nsectors = {\"A\": 10, \"B\": 20, \"C\": 15}\ncircos = Circos(sectors, space=5)\ncircos.text(\"center\")\ncircos.text(\"top\", r=100)\ncircos.text(\"right\", r=100, deg=90)\ncircos.text(\"right-middle\", r=50, deg=90)\ncircos.text(\"bottom\", r=100, deg=180)\ncircos.text(\"left\", r=100, deg=270)\ncircos.text(\"left-top\", r=100 * math.sqrt(2), deg=315)\nfig = circos.plotfig()\n</pre> from pycirclize import Circos import math  sectors = {\"A\": 10, \"B\": 20, \"C\": 15} circos = Circos(sectors, space=5) circos.text(\"center\") circos.text(\"top\", r=100) circos.text(\"right\", r=100, deg=90) circos.text(\"right-middle\", r=50, deg=90) circos.text(\"bottom\", r=100, deg=180) circos.text(\"left\", r=100, deg=270) circos.text(\"left-top\", r=100 * math.sqrt(2), deg=315) fig = circos.plotfig() In\u00a0[5]: Copied! <pre>from pycirclize import Circos\n\nsectors = {\"A\": 10, \"B\": 20, \"C\": 15}\ncircos = Circos(sectors, space=5)\ncircos.line(r=100)\ncircos.line(r=80, deg_lim=(0, 270), color=\"red\")\ncircos.line(r=60, deg_lim=(90, 360), color=\"blue\", lw=3, ls=\"dotted\")\nfig = circos.plotfig()\n</pre> from pycirclize import Circos  sectors = {\"A\": 10, \"B\": 20, \"C\": 15} circos = Circos(sectors, space=5) circos.line(r=100) circos.line(r=80, deg_lim=(0, 270), color=\"red\") circos.line(r=60, deg_lim=(90, 360), color=\"blue\", lw=3, ls=\"dotted\") fig = circos.plotfig() In\u00a0[6]: Copied! <pre>from pycirclize import Circos\n\nsectors = {\"A\": 10, \"B\": 20, \"C\": 15}\ncircos = Circos(sectors, space=5)\ncircos.rect(r_lim=(80, 100))\ncircos.rect(r_lim=(60, 80), deg_lim=(0, 270), fc=\"tomato\")\ncircos.rect(r_lim=(30, 50), deg_lim=(90, 360), fc=\"lime\", ec=\"grey\", lw=2, hatch=\"//\")\ncircos.rect(r_lim=(30, 100), deg_lim=(0, 90), fc=\"orange\", alpha=0.2)\nfig = circos.plotfig()\n</pre> from pycirclize import Circos  sectors = {\"A\": 10, \"B\": 20, \"C\": 15} circos = Circos(sectors, space=5) circos.rect(r_lim=(80, 100)) circos.rect(r_lim=(60, 80), deg_lim=(0, 270), fc=\"tomato\") circos.rect(r_lim=(30, 50), deg_lim=(90, 360), fc=\"lime\", ec=\"grey\", lw=2, hatch=\"//\") circos.rect(r_lim=(30, 100), deg_lim=(0, 90), fc=\"orange\", alpha=0.2) fig = circos.plotfig() In\u00a0[7]: Copied! <pre>from pycirclize import Circos\n\nsectors = {\"A\": 10, \"B\": 20, \"C\": 15}\nname2color = {\"A\": \"red\", \"B\": \"blue\", \"C\": \"green\"}\ncircos = Circos(sectors, space=5)\nfor sector in circos.sectors:\n    track = sector.add_track((95, 100))\n    track.axis(fc=name2color[sector.name])\n    track.text(sector.name, color=\"white\", size=12)\n    track.xticks_by_interval(1)\n\n# Plot links in various styles\ncircos.link((\"A\", 0, 1), (\"A\", 7, 8))\ncircos.link((\"A\", 1, 2), (\"A\", 7, 6), color=\"skyblue\")\ncircos.link((\"A\", 9, 10), (\"B\", 4, 3), direction=1, color=\"tomato\")\ncircos.link((\"B\", 5, 7), (\"C\", 6, 8), direction=1, ec=\"black\", lw=1, hatch=\"//\")\ncircos.link((\"B\", 18, 16), (\"B\", 11, 13), r1=90, r2=90, color=\"violet\", ec=\"red\", lw=2, ls=\"dashed\")\ncircos.link((\"C\", 1, 3), (\"B\", 2, 0), direction=1, color=\"limegreen\")\ncircos.link((\"C\", 11.5, 14), (\"A\", 4, 3), direction=2, color=\"chocolate\", ec=\"black\", lw=1, ls=\"dotted\")\n\nfig = circos.plotfig()\n</pre> from pycirclize import Circos  sectors = {\"A\": 10, \"B\": 20, \"C\": 15} name2color = {\"A\": \"red\", \"B\": \"blue\", \"C\": \"green\"} circos = Circos(sectors, space=5) for sector in circos.sectors:     track = sector.add_track((95, 100))     track.axis(fc=name2color[sector.name])     track.text(sector.name, color=\"white\", size=12)     track.xticks_by_interval(1)  # Plot links in various styles circos.link((\"A\", 0, 1), (\"A\", 7, 8)) circos.link((\"A\", 1, 2), (\"A\", 7, 6), color=\"skyblue\") circos.link((\"A\", 9, 10), (\"B\", 4, 3), direction=1, color=\"tomato\") circos.link((\"B\", 5, 7), (\"C\", 6, 8), direction=1, ec=\"black\", lw=1, hatch=\"//\") circos.link((\"B\", 18, 16), (\"B\", 11, 13), r1=90, r2=90, color=\"violet\", ec=\"red\", lw=2, ls=\"dashed\") circos.link((\"C\", 1, 3), (\"B\", 2, 0), direction=1, color=\"limegreen\") circos.link((\"C\", 11.5, 14), (\"A\", 4, 3), direction=2, color=\"chocolate\", ec=\"black\", lw=1, ls=\"dotted\")  fig = circos.plotfig() In\u00a0[8]: Copied! <pre>from pycirclize import Circos\n\nsectors = {\"A\": 10, \"B\": 20, \"C\": 15}\nname2color = {\"A\": \"red\", \"B\": \"blue\", \"C\": \"green\"}\ncircos = Circos(sectors, space=5)\nfor sector in circos.sectors:\n    track = sector.add_track((95, 100))\n    track.axis(fc=name2color[sector.name])\n    track.text(sector.name, color=\"white\", size=12)\n    track.xticks_by_interval(1)\n\n# Plot link lines in various styles\ncircos.link_line((\"A\", 0), (\"A\", 7))\ncircos.link_line((\"A\", 9), (\"B\", 3), direction=1, color=\"red\")\ncircos.link_line((\"B\", 5), (\"B\", 7), direction=-1, color=\"blue\", lw=1.0)\ncircos.link_line((\"B\", 8), (\"B\", 15), r1=90, r2=90, direction=2, color=\"green\", ls=\"dashed\")\n\ncircos.link((\"B\", 17, 19), (\"C\", 11, 9), color=\"black\")\ncircos.link_line((\"B\", 18), (\"C\", 10), direction=1, arrow_height=6, arrow_width=4, color=\"white\", lw=1.0)\n\nfig = circos.plotfig()\n</pre> from pycirclize import Circos  sectors = {\"A\": 10, \"B\": 20, \"C\": 15} name2color = {\"A\": \"red\", \"B\": \"blue\", \"C\": \"green\"} circos = Circos(sectors, space=5) for sector in circos.sectors:     track = sector.add_track((95, 100))     track.axis(fc=name2color[sector.name])     track.text(sector.name, color=\"white\", size=12)     track.xticks_by_interval(1)  # Plot link lines in various styles circos.link_line((\"A\", 0), (\"A\", 7)) circos.link_line((\"A\", 9), (\"B\", 3), direction=1, color=\"red\") circos.link_line((\"B\", 5), (\"B\", 7), direction=-1, color=\"blue\", lw=1.0) circos.link_line((\"B\", 8), (\"B\", 15), r1=90, r2=90, direction=2, color=\"green\", ls=\"dashed\")  circos.link((\"B\", 17, 19), (\"C\", 11, 9), color=\"black\") circos.link_line((\"B\", 18), (\"C\", 10), direction=1, arrow_height=6, arrow_width=4, color=\"white\", lw=1.0)  fig = circos.plotfig() In\u00a0[9]: Copied! <pre>from pycirclize import Circos\n\nsectors = {\"A\": 10, \"B\": 20, \"C\": 15}\ncircos = Circos(sectors, space=5)\nsector_a = circos.get_sector(\"A\")\nsector_a.axis()\nsector_b = circos.get_sector(\"B\")\nsector_b.axis(fc=\"lightgrey\", lw=2, ls=\"dotted\")\nsector_c = circos.get_sector(\"C\")\nsector_c.axis(fc=\"tomato\", ec=\"blue\", hatch=\"//\")\nfig = circos.plotfig()\n</pre> from pycirclize import Circos  sectors = {\"A\": 10, \"B\": 20, \"C\": 15} circos = Circos(sectors, space=5) sector_a = circos.get_sector(\"A\") sector_a.axis() sector_b = circos.get_sector(\"B\") sector_b.axis(fc=\"lightgrey\", lw=2, ls=\"dotted\") sector_c = circos.get_sector(\"C\") sector_c.axis(fc=\"tomato\", ec=\"blue\", hatch=\"//\") fig = circos.plotfig() In\u00a0[10]: Copied! <pre>from pycirclize import Circos\n\nsectors = {\"A\": 10, \"B\": 20, \"C\": 15}\nname2color = {\"A\": \"red\", \"B\": \"blue\", \"C\": \"green\"}\ncircos = Circos(sectors, space=5)\nfor sector in circos.sectors:\n    sector.axis()\n    sector.text(sector.name)\n    sector.text(f\"Center\\n{sector.name}\", r=50, size=12, color=name2color[sector.name])\n\nfig = circos.plotfig()\n</pre> from pycirclize import Circos  sectors = {\"A\": 10, \"B\": 20, \"C\": 15} name2color = {\"A\": \"red\", \"B\": \"blue\", \"C\": \"green\"} circos = Circos(sectors, space=5) for sector in circos.sectors:     sector.axis()     sector.text(sector.name)     sector.text(f\"Center\\n{sector.name}\", r=50, size=12, color=name2color[sector.name])  fig = circos.plotfig() In\u00a0[11]: Copied! <pre>from pycirclize import Circos\n\nsectors = {\"A\": 10, \"B\": 20, \"C\": 15}\ncircos = Circos(sectors, space=5)\nfor sector in circos.sectors:\n    sector.axis()\n    sector.line(r=90)\n    sector_center = (sector.start + sector.end) / 2\n    sector.line(r=80, end=sector_center, color=\"red\")\n    sector.line(r=80, start=sector_center, color=\"blue\")\n    sector.line(r=60, color=\"green\", lw=2, ls=\"dotted\")\n\nfig = circos.plotfig()\n</pre> from pycirclize import Circos  sectors = {\"A\": 10, \"B\": 20, \"C\": 15} circos = Circos(sectors, space=5) for sector in circos.sectors:     sector.axis()     sector.line(r=90)     sector_center = (sector.start + sector.end) / 2     sector.line(r=80, end=sector_center, color=\"red\")     sector.line(r=80, start=sector_center, color=\"blue\")     sector.line(r=60, color=\"green\", lw=2, ls=\"dotted\")  fig = circos.plotfig() In\u00a0[12]: Copied! <pre>from pycirclize import Circos\nfrom pycirclize.utils import ColorCycler\n\nColorCycler.set_cmap(\"tab10\")\n\nsectors = {\"A\": 10, \"B\": 20, \"C\": 15}\ncircos = Circos(sectors, space=5)\nfor sector in circos.sectors:\n    sector.axis()\n    sector.rect(r_lim=(90, 100), fc=\"tomato\")\n    sector_center = (sector.start + sector.end) / 2\n    sector.rect(end=sector_center, r_lim=(70, 80), color=\"skyblue\")\n    sector.rect(start=sector_center, r_lim=(70, 80), color=\"limegreen\")\n    for i in range(int(sector.size)):\n        sector.rect(start=i, end=i + 1, r_lim=(50, 60), fc=ColorCycler(), ec=\"black\", lw=1)\n    sector.rect(sector.start + 3, sector.end - 3, r_lim=(30, 100), color=\"orange\", alpha=0.2)\n\nfig = circos.plotfig()\n</pre> from pycirclize import Circos from pycirclize.utils import ColorCycler  ColorCycler.set_cmap(\"tab10\")  sectors = {\"A\": 10, \"B\": 20, \"C\": 15} circos = Circos(sectors, space=5) for sector in circos.sectors:     sector.axis()     sector.rect(r_lim=(90, 100), fc=\"tomato\")     sector_center = (sector.start + sector.end) / 2     sector.rect(end=sector_center, r_lim=(70, 80), color=\"skyblue\")     sector.rect(start=sector_center, r_lim=(70, 80), color=\"limegreen\")     for i in range(int(sector.size)):         sector.rect(start=i, end=i + 1, r_lim=(50, 60), fc=ColorCycler(), ec=\"black\", lw=1)     sector.rect(sector.start + 3, sector.end - 3, r_lim=(30, 100), color=\"orange\", alpha=0.2)  fig = circos.plotfig() In\u00a0[13]: Copied! <pre>from pycirclize import Circos\nfrom pycirclize.utils import load_example_image_file\n\nsectors = {\"A\": 10, \"B\": 15, \"C\": 12, \"D\": 20, \"E\": 15}\ncircos = Circos(sectors, space=5)\nfor sector in circos.sectors:\n    # Plot line in sector region\n    sector.axis(ec=\"grey\")\n    for r in range(10, 100, 10):\n        sector.line(r=r, ec=\"lightgrey\")\n    # Plot raster image (python logo)\n    logo_file = load_example_image_file(\"python_logo.png\")\n    sector.raster(logo_file, r=110, label=sector.name)\n    sector.raster(logo_file, r=50, size=0.1, rotation=\"auto\", border_width=5)\n    sector.text(sector.name, r=62)\n\nfig = circos.plotfig()\n</pre> from pycirclize import Circos from pycirclize.utils import load_example_image_file  sectors = {\"A\": 10, \"B\": 15, \"C\": 12, \"D\": 20, \"E\": 15} circos = Circos(sectors, space=5) for sector in circos.sectors:     # Plot line in sector region     sector.axis(ec=\"grey\")     for r in range(10, 100, 10):         sector.line(r=r, ec=\"lightgrey\")     # Plot raster image (python logo)     logo_file = load_example_image_file(\"python_logo.png\")     sector.raster(logo_file, r=110, label=sector.name)     sector.raster(logo_file, r=50, size=0.1, rotation=\"auto\", border_width=5)     sector.text(sector.name, r=62)  fig = circos.plotfig() In\u00a0[14]: Copied! <pre>from pycirclize import Circos\n\nsectors = {\"A\": 10, \"B\": 20, \"C\": 15}\ncircos = Circos(sectors, space=5)\nfor sector in circos.sectors:\n    track1 = sector.add_track((90, 100))\n    track1.axis()\n    track2 = sector.add_track((70, 80))\n    track2.axis(fc=\"lightgrey\")\n\nfig = circos.plotfig()\n</pre> from pycirclize import Circos  sectors = {\"A\": 10, \"B\": 20, \"C\": 15} circos = Circos(sectors, space=5) for sector in circos.sectors:     track1 = sector.add_track((90, 100))     track1.axis()     track2 = sector.add_track((70, 80))     track2.axis(fc=\"lightgrey\")  fig = circos.plotfig() In\u00a0[15]: Copied! <pre>from pycirclize import Circos\n\nsectors = {\"A\": 10, \"B\": 20, \"C\": 15}\ncircos = Circos(sectors, space=5)\nfor sector in circos.sectors:\n    track1 = sector.add_track((90, 100))\n    track1.axis()\n    track1.text(sector.name)\n    track2 = sector.add_track((70, 80))\n    track2.axis(fc=\"lightgrey\")\n    track2.text(sector.name, orientation=\"vertical\", color=\"red\", size=15)\n\nfig = circos.plotfig()\n</pre> from pycirclize import Circos  sectors = {\"A\": 10, \"B\": 20, \"C\": 15} circos = Circos(sectors, space=5) for sector in circos.sectors:     track1 = sector.add_track((90, 100))     track1.axis()     track1.text(sector.name)     track2 = sector.add_track((70, 80))     track2.axis(fc=\"lightgrey\")     track2.text(sector.name, orientation=\"vertical\", color=\"red\", size=15)  fig = circos.plotfig() In\u00a0[16]: Copied! <pre>from pycirclize import Circos\nfrom pycirclize.utils import ColorCycler\nColorCycler.set_cmap(\"tab10\")\n\nsectors = {\"A\": 10, \"B\": 20, \"C\": 15}\ncircos = Circos(sectors, space=5)\nfor sector in circos.sectors:\n    track1 = sector.add_track((90, 100))\n    track1.axis()\n    # Plot rect &amp; text (style1)\n    for i in range(int(track1.size)):\n        start, end = i, i + 1\n        track1.rect(start, end, fc=ColorCycler())\n        track1.text(str(end), (end + start) / 2)\n    # Plot rect &amp; text (style2)\n    track2 = sector.add_track((70, 80))\n    for i in range(int(track2.size)):\n        start, end = i, i + 1\n        track2.rect(start, end, fc=ColorCycler(), ec=\"white\", lw=1)\n        track2.text(str(end), (end + start) / 2, color=\"white\", orientation=\"vertical\")\n\nfig = circos.plotfig()\n</pre> from pycirclize import Circos from pycirclize.utils import ColorCycler ColorCycler.set_cmap(\"tab10\")  sectors = {\"A\": 10, \"B\": 20, \"C\": 15} circos = Circos(sectors, space=5) for sector in circos.sectors:     track1 = sector.add_track((90, 100))     track1.axis()     # Plot rect &amp; text (style1)     for i in range(int(track1.size)):         start, end = i, i + 1         track1.rect(start, end, fc=ColorCycler())         track1.text(str(end), (end + start) / 2)     # Plot rect &amp; text (style2)     track2 = sector.add_track((70, 80))     for i in range(int(track2.size)):         start, end = i, i + 1         track2.rect(start, end, fc=ColorCycler(), ec=\"white\", lw=1)         track2.text(str(end), (end + start) / 2, color=\"white\", orientation=\"vertical\")  fig = circos.plotfig() In\u00a0[17]: Copied! <pre>from pycirclize import Circos\nfrom pycirclize.utils import ColorCycler\n\nColorCycler.set_cmap(\"tab10\")\n\nsectors = {\"A\": 10, \"B\": 20, \"C\": 15}\ncircos = Circos(sectors, space=5)\nfor sector in circos.sectors:\n    sector.axis()\n    # Plot forward arrow with default style\n    track1 = sector.add_track((90, 100))\n    for i in range(int(track1.size)):\n        start, end = i, i + 1\n        track1.arrow(start, end, fc=ColorCycler())\n    # Plot reverse arrow with user-specified style\n    track2 = sector.add_track((70, 80))\n    for i in range(int(track2.size)):\n        start, end = i, i + 1\n        track2.arrow(end, start, head_length=4, shaft_ratio=1.0, fc=ColorCycler(), ec=\"black\", lw=0.5)\n\nfig = circos.plotfig()\n</pre> from pycirclize import Circos from pycirclize.utils import ColorCycler  ColorCycler.set_cmap(\"tab10\")  sectors = {\"A\": 10, \"B\": 20, \"C\": 15} circos = Circos(sectors, space=5) for sector in circos.sectors:     sector.axis()     # Plot forward arrow with default style     track1 = sector.add_track((90, 100))     for i in range(int(track1.size)):         start, end = i, i + 1         track1.arrow(start, end, fc=ColorCycler())     # Plot reverse arrow with user-specified style     track2 = sector.add_track((70, 80))     for i in range(int(track2.size)):         start, end = i, i + 1         track2.arrow(end, start, head_length=4, shaft_ratio=1.0, fc=ColorCycler(), ec=\"black\", lw=0.5)  fig = circos.plotfig() In\u00a0[18]: Copied! <pre>from pycirclize import Circos\n\nsectors = {\"A\": 10, \"B\": 20, \"C\": 15}\ncircos = Circos(sectors, space=5)\nfor sector in circos.sectors:\n    track1 = sector.add_track((90, 100))\n    track1.axis()\n    # Plot outer xticks\n    pos_list = list(range(0, int(track1.size) + 1))\n    labels = [f\"{i:02d}\" for i in pos_list]\n    track1.xticks(pos_list, labels)\n    # Plot inner xticks label\n    labels = [f\"Label{i:02d}\" for i in pos_list]\n    track1.xticks(\n        pos_list,\n        labels,\n        outer=False,\n        tick_length=0,\n        label_margin=2,\n        label_orientation=\"vertical\",\n    )\nfig = circos.plotfig()\n</pre> from pycirclize import Circos  sectors = {\"A\": 10, \"B\": 20, \"C\": 15} circos = Circos(sectors, space=5) for sector in circos.sectors:     track1 = sector.add_track((90, 100))     track1.axis()     # Plot outer xticks     pos_list = list(range(0, int(track1.size) + 1))     labels = [f\"{i:02d}\" for i in pos_list]     track1.xticks(pos_list, labels)     # Plot inner xticks label     labels = [f\"Label{i:02d}\" for i in pos_list]     track1.xticks(         pos_list,         labels,         outer=False,         tick_length=0,         label_margin=2,         label_orientation=\"vertical\",     ) fig = circos.plotfig() In\u00a0[19]: Copied! <pre>from pycirclize import Circos\n\nsectors = {\"A\": 10, \"B\": 20, \"C\": 15}\ncircos = Circos(sectors, space=5)\nfor sector in circos.sectors:\n    # Plot outer xticks\n    track1 = sector.add_track((90, 100))\n    track1.axis()\n    track1.xticks_by_interval(1, label_size=12)\n    # Plot inner xticks\n    track2 = sector.add_track((70, 80))\n    track2.xticks_by_interval(\n        2,\n        outer=False,\n        show_bottom_line=True,\n        label_orientation=\"vertical\",\n        line_kws=dict(color=\"red\"),\n        text_kws=dict(color=\"blue\"),\n    )\nfig = circos.plotfig()\n</pre> from pycirclize import Circos  sectors = {\"A\": 10, \"B\": 20, \"C\": 15} circos = Circos(sectors, space=5) for sector in circos.sectors:     # Plot outer xticks     track1 = sector.add_track((90, 100))     track1.axis()     track1.xticks_by_interval(1, label_size=12)     # Plot inner xticks     track2 = sector.add_track((70, 80))     track2.xticks_by_interval(         2,         outer=False,         show_bottom_line=True,         label_orientation=\"vertical\",         line_kws=dict(color=\"red\"),         text_kws=dict(color=\"blue\"),     ) fig = circos.plotfig() In\u00a0[20]: Copied! <pre>from pycirclize import Circos\n\nsectors = {\"A\": 10000000, \"B\": 20000000, \"C\": 15000000}\ncircos = Circos(sectors, space=5)\nfor sector in circos.sectors:\n    # Major &amp; Minor xticks\n    track1 = sector.add_track((90, 100))\n    track1.axis()\n    mb_size = 1000000\n    track1.xticks_by_interval(mb_size, label_orientation=\"vertical\")\n    track1.xticks_by_interval(mb_size / 5, tick_length=1, show_label=False)\n    # Mb formatted xticks\n    track2 = sector.add_track((80, 90))\n    track2.xticks_by_interval(\n        mb_size,\n        outer=False,\n        show_bottom_line=True,\n        label_orientation=\"vertical\",\n        label_formatter=lambda v: f\"{v / mb_size:.1f} Mb\",\n    )\nfig = circos.plotfig()\n</pre> from pycirclize import Circos  sectors = {\"A\": 10000000, \"B\": 20000000, \"C\": 15000000} circos = Circos(sectors, space=5) for sector in circos.sectors:     # Major &amp; Minor xticks     track1 = sector.add_track((90, 100))     track1.axis()     mb_size = 1000000     track1.xticks_by_interval(mb_size, label_orientation=\"vertical\")     track1.xticks_by_interval(mb_size / 5, tick_length=1, show_label=False)     # Mb formatted xticks     track2 = sector.add_track((80, 90))     track2.xticks_by_interval(         mb_size,         outer=False,         show_bottom_line=True,         label_orientation=\"vertical\",         label_formatter=lambda v: f\"{v / mb_size:.1f} Mb\",     ) fig = circos.plotfig() In\u00a0[21]: Copied! <pre>from pycirclize import Circos\n\nsectors = {\"A\": 10000000, \"B\": 20000000, \"C\": 15000000}\ncircos = Circos(sectors, space=15)\nfor sector in circos.sectors:\n    # Plot yticks\n    track1 = sector.add_track((80, 100))\n    track1.axis()\n    y = [0, 5, 10, 15, 20]\n    y_labels = list(map(str, y))\n    track1.yticks(y, y_labels)\n    # Plot yticks label on left side\n    track2 = sector.add_track((50, 70), r_pad_ratio=0.1)\n    track2.axis()\n    y = [10, 15, 20]\n    y_labels = [\"Label1\", \"Label2\", \"Label3\"]\n    track2.yticks(y, y_labels, vmin=10, vmax=25, side=\"left\", line_kws=dict(color=\"red\", lw=1), text_kws=dict(color=\"blue\"))\n\nfig = circos.plotfig()\n</pre> from pycirclize import Circos  sectors = {\"A\": 10000000, \"B\": 20000000, \"C\": 15000000} circos = Circos(sectors, space=15) for sector in circos.sectors:     # Plot yticks     track1 = sector.add_track((80, 100))     track1.axis()     y = [0, 5, 10, 15, 20]     y_labels = list(map(str, y))     track1.yticks(y, y_labels)     # Plot yticks label on left side     track2 = sector.add_track((50, 70), r_pad_ratio=0.1)     track2.axis()     y = [10, 15, 20]     y_labels = [\"Label1\", \"Label2\", \"Label3\"]     track2.yticks(y, y_labels, vmin=10, vmax=25, side=\"left\", line_kws=dict(color=\"red\", lw=1), text_kws=dict(color=\"blue\"))  fig = circos.plotfig() In\u00a0[22]: Copied! <pre>from pycirclize import Circos\nimport numpy as np\nnp.random.seed(0)\n\nsectors = {\"A\": 10, \"B\": 20, \"C\": 15}\ncircos = Circos(sectors, space=5)\nfor sector in circos.sectors:\n    # Plot Y-axis grid line (Default: 6 grid line)\n    track1 = sector.add_track((80, 100), r_pad_ratio=0.1)\n    track1.axis()\n    track1.xticks_by_interval(interval=1)\n    track1.grid()\n    # Plot X-axis grid line (interval=1)\n    track2 = sector.add_track((55, 75))\n    track2.axis()\n    track2.grid(y_grid_num=None, x_grid_interval=1, color=\"red\")\n    # Plot both XY-axis grid line\n    track3 = sector.add_track((30, 50))\n    track3.grid(y_grid_num=11, x_grid_interval=0.5, color=\"blue\", ls=\"dashed\")\n\nfig = circos.plotfig()\n</pre> from pycirclize import Circos import numpy as np np.random.seed(0)  sectors = {\"A\": 10, \"B\": 20, \"C\": 15} circos = Circos(sectors, space=5) for sector in circos.sectors:     # Plot Y-axis grid line (Default: 6 grid line)     track1 = sector.add_track((80, 100), r_pad_ratio=0.1)     track1.axis()     track1.xticks_by_interval(interval=1)     track1.grid()     # Plot X-axis grid line (interval=1)     track2 = sector.add_track((55, 75))     track2.axis()     track2.grid(y_grid_num=None, x_grid_interval=1, color=\"red\")     # Plot both XY-axis grid line     track3 = sector.add_track((30, 50))     track3.grid(y_grid_num=11, x_grid_interval=0.5, color=\"blue\", ls=\"dashed\")  fig = circos.plotfig() In\u00a0[23]: Copied! <pre>from pycirclize import Circos\nimport numpy as np\nnp.random.seed(0)\n\nsectors = {\"A\": 10, \"B\": 20, \"C\": 15}\ncircos = Circos(sectors, space=5)\nfor sector in circos.sectors:\n    track = sector.add_track((80, 100), r_pad_ratio=0.1)\n    track.axis()\n    track.xticks_by_interval(1)\n    vmin, vmax = 0, 10\n    # Line between start-end two points\n    track.line([track.start, track.end], [vmin, vmax], lw=1.5, ls=\"dotted\")\n    # Line of random value points\n    x = np.linspace(track.start, track.end, int(track.size) * 5 + 1)\n    y = np.random.randint(vmin, vmax, len(x))\n    track.line(x, y)\nfig = circos.plotfig()\n</pre> from pycirclize import Circos import numpy as np np.random.seed(0)  sectors = {\"A\": 10, \"B\": 20, \"C\": 15} circos = Circos(sectors, space=5) for sector in circos.sectors:     track = sector.add_track((80, 100), r_pad_ratio=0.1)     track.axis()     track.xticks_by_interval(1)     vmin, vmax = 0, 10     # Line between start-end two points     track.line([track.start, track.end], [vmin, vmax], lw=1.5, ls=\"dotted\")     # Line of random value points     x = np.linspace(track.start, track.end, int(track.size) * 5 + 1)     y = np.random.randint(vmin, vmax, len(x))     track.line(x, y) fig = circos.plotfig() In\u00a0[24]: Copied! <pre>from pycirclize import Circos\nimport numpy as np\nnp.random.seed(0)\n\nsectors = {\"A\": 10, \"B\": 20, \"C\": 15}\ncircos = Circos(sectors, space=5)\nfor sector in circos.sectors:\n    track = sector.add_track((80, 100), r_pad_ratio=0.1)\n    track.axis()\n    track.xticks_by_interval(1)\n    vmin, vmax = 0, 10\n    x = np.linspace(track.start, track.end, int(track.size) * 5 + 1)\n    y = np.random.randint(vmin, vmax, len(x))\n    track.scatter(x, y)\nfig = circos.plotfig()\n</pre> from pycirclize import Circos import numpy as np np.random.seed(0)  sectors = {\"A\": 10, \"B\": 20, \"C\": 15} circos = Circos(sectors, space=5) for sector in circos.sectors:     track = sector.add_track((80, 100), r_pad_ratio=0.1)     track.axis()     track.xticks_by_interval(1)     vmin, vmax = 0, 10     x = np.linspace(track.start, track.end, int(track.size) * 5 + 1)     y = np.random.randint(vmin, vmax, len(x))     track.scatter(x, y) fig = circos.plotfig() In\u00a0[25]: Copied! <pre>from pycirclize import Circos\nfrom pycirclize.utils import ColorCycler\nimport numpy as np\nnp.random.seed(0)\n\nsectors = {\"A\": 10, \"B\": 20, \"C\": 15}\ncircos = Circos(sectors, space=5)\nfor sector in circos.sectors:\n    vmin, vmax = 1, 10\n    x = np.linspace(sector.start + 0.5, sector.end - 0.5, int(sector.size))\n    y = np.random.randint(vmin, vmax, len(x))\n    # Plot bar (default)\n    track1 = sector.add_track((80, 100), r_pad_ratio=0.1)\n    track1.axis()\n    track1.xticks_by_interval(1)\n    track1.xticks_by_interval(0.1, tick_length=1, show_label=False)\n    track1.bar(x, y)\n    # Plot stacked bar with user-specified params\n    track2 = sector.add_track((50, 70))\n    track2.axis()\n    track2.xticks_by_interval(1, outer=False)\n\n    ColorCycler.set_cmap(\"tab10\")\n    tab10_colors = [ColorCycler() for _ in range(len(x))]\n    track2.bar(x, y, width=1.0, color=tab10_colors, ec=\"grey\", lw=0.5, vmax=vmax * 2)\n\n    ColorCycler.set_cmap(\"Pastel1\")\n    pastel_colors = [ColorCycler() for _ in range(len(x))]\n    y2 = np.random.randint(vmin, vmax, len(x))\n    track2.bar(x, y2, width=1.0, bottom=y, color=pastel_colors, ec=\"grey\", lw=0.5, hatch=\"//\", vmax=vmax * 2)\n\nfig = circos.plotfig()\n</pre> from pycirclize import Circos from pycirclize.utils import ColorCycler import numpy as np np.random.seed(0)  sectors = {\"A\": 10, \"B\": 20, \"C\": 15} circos = Circos(sectors, space=5) for sector in circos.sectors:     vmin, vmax = 1, 10     x = np.linspace(sector.start + 0.5, sector.end - 0.5, int(sector.size))     y = np.random.randint(vmin, vmax, len(x))     # Plot bar (default)     track1 = sector.add_track((80, 100), r_pad_ratio=0.1)     track1.axis()     track1.xticks_by_interval(1)     track1.xticks_by_interval(0.1, tick_length=1, show_label=False)     track1.bar(x, y)     # Plot stacked bar with user-specified params     track2 = sector.add_track((50, 70))     track2.axis()     track2.xticks_by_interval(1, outer=False)      ColorCycler.set_cmap(\"tab10\")     tab10_colors = [ColorCycler() for _ in range(len(x))]     track2.bar(x, y, width=1.0, color=tab10_colors, ec=\"grey\", lw=0.5, vmax=vmax * 2)      ColorCycler.set_cmap(\"Pastel1\")     pastel_colors = [ColorCycler() for _ in range(len(x))]     y2 = np.random.randint(vmin, vmax, len(x))     track2.bar(x, y2, width=1.0, bottom=y, color=pastel_colors, ec=\"grey\", lw=0.5, hatch=\"//\", vmax=vmax * 2)  fig = circos.plotfig() In\u00a0[26]: Copied! <pre>from pycirclize import Circos\nimport numpy as np\nnp.random.seed(0)\n\nsectors = {\"A\": 10, \"B\": 20, \"C\": 15}\ncircos = Circos(sectors, space=5)\nfor sector in circos.sectors:\n    vmin, vmax = 0, 10\n    # Plot fill_between with simple lines\n    track1 = sector.add_track((80, 100), r_pad_ratio=0.1)\n    track1.axis()\n    track1.xticks_by_interval(1)\n    track1.fill_between(x=[track1.start, track1.end], y1=[vmin, vmax], y2=[vmin, vmax / 2])\n    # Plot fill_between with random points line\n    track2 = sector.add_track((50, 70), r_pad_ratio=0.1)\n    track2.axis()\n    x = np.linspace(track2.start, track2.end, int(track2.size) * 5 + 1)\n    y = np.random.randint(vmin, vmax, len(x))\n    track2.fill_between(x, y, ec=\"black\", lw=1, ls=\"dashed\")\n\nfig = circos.plotfig()\n</pre> from pycirclize import Circos import numpy as np np.random.seed(0)  sectors = {\"A\": 10, \"B\": 20, \"C\": 15} circos = Circos(sectors, space=5) for sector in circos.sectors:     vmin, vmax = 0, 10     # Plot fill_between with simple lines     track1 = sector.add_track((80, 100), r_pad_ratio=0.1)     track1.axis()     track1.xticks_by_interval(1)     track1.fill_between(x=[track1.start, track1.end], y1=[vmin, vmax], y2=[vmin, vmax / 2])     # Plot fill_between with random points line     track2 = sector.add_track((50, 70), r_pad_ratio=0.1)     track2.axis()     x = np.linspace(track2.start, track2.end, int(track2.size) * 5 + 1)     y = np.random.randint(vmin, vmax, len(x))     track2.fill_between(x, y, ec=\"black\", lw=1, ls=\"dashed\")  fig = circos.plotfig() In\u00a0[27]: Copied! <pre>from pycirclize import Circos\nimport numpy as np\nnp.random.seed(0)\n\nsectors = {\"A\": 10, \"B\": 20, \"C\": 15}\ncircos = Circos(sectors, space=10)\nvmin1, vmax1 = 0, 10\nvmin2, vmax2 = -100, 100\nfor sector in circos.sectors:\n    # Plot heatmap\n    track1 = sector.add_track((80, 100))\n    track1.axis()\n    track1.xticks_by_interval(1)\n    data = np.random.randint(vmin1, vmax1 + 1, (4, int(sector.size)))\n    track1.heatmap(data, vmin=vmin1, vmax=vmax1, show_value=True)\n    # Plot heatmap with labels\n    track2 = sector.add_track((50, 70))\n    track2.axis()\n    x = np.linspace(1, int(track2.size), int(track2.size)) - 0.5\n    xlabels = [str(int(v + 1)) for v in x]\n    track2.xticks(x, xlabels, outer=False)\n    track2.yticks([0.5, 1.5, 2.5, 3.5, 4.5], list(\"ABCDE\"), vmin=0, vmax=5)\n    data = np.random.randint(vmin2, vmax2 + 1, (5, int(sector.size)))\n    track2.heatmap(data, vmin=vmin2, vmax=vmax2, cmap=\"viridis\", rect_kws=dict(ec=\"white\", lw=1))\n\ncircos.colorbar(bounds=(0.35, 0.55, 0.3, 0.01), vmin=vmin1, vmax=vmax1, orientation=\"horizontal\")\ncircos.colorbar(bounds=(0.35, 0.45, 0.3, 0.01), vmin=vmin2, vmax=vmax2, orientation=\"horizontal\", cmap=\"viridis\")\n\nfig = circos.plotfig()\n</pre> from pycirclize import Circos import numpy as np np.random.seed(0)  sectors = {\"A\": 10, \"B\": 20, \"C\": 15} circos = Circos(sectors, space=10) vmin1, vmax1 = 0, 10 vmin2, vmax2 = -100, 100 for sector in circos.sectors:     # Plot heatmap     track1 = sector.add_track((80, 100))     track1.axis()     track1.xticks_by_interval(1)     data = np.random.randint(vmin1, vmax1 + 1, (4, int(sector.size)))     track1.heatmap(data, vmin=vmin1, vmax=vmax1, show_value=True)     # Plot heatmap with labels     track2 = sector.add_track((50, 70))     track2.axis()     x = np.linspace(1, int(track2.size), int(track2.size)) - 0.5     xlabels = [str(int(v + 1)) for v in x]     track2.xticks(x, xlabels, outer=False)     track2.yticks([0.5, 1.5, 2.5, 3.5, 4.5], list(\"ABCDE\"), vmin=0, vmax=5)     data = np.random.randint(vmin2, vmax2 + 1, (5, int(sector.size)))     track2.heatmap(data, vmin=vmin2, vmax=vmax2, cmap=\"viridis\", rect_kws=dict(ec=\"white\", lw=1))  circos.colorbar(bounds=(0.35, 0.55, 0.3, 0.01), vmin=vmin1, vmax=vmax1, orientation=\"horizontal\") circos.colorbar(bounds=(0.35, 0.45, 0.3, 0.01), vmin=vmin2, vmax=vmax2, orientation=\"horizontal\", cmap=\"viridis\")  fig = circos.plotfig() In\u00a0[28]: Copied! <pre>from pycirclize import Circos\nfrom pycirclize.utils import load_example_tree_file\nfrom Bio import Phylo\n\n# Load newick tree\ntree_file = load_example_tree_file(\"alphabet.nwk\")\ntree = Phylo.read(tree_file, \"newick\")\n# Initialize circos sector by tree size\ncircos = Circos(sectors=dict(tree=tree.count_terminals()))\nsector = circos.sectors[0]\n# Plot tree\ntrack = sector.add_track((50, 100))\ntrack.tree(tree)\n\nfig = circos.plotfig()\n</pre> from pycirclize import Circos from pycirclize.utils import load_example_tree_file from Bio import Phylo  # Load newick tree tree_file = load_example_tree_file(\"alphabet.nwk\") tree = Phylo.read(tree_file, \"newick\") # Initialize circos sector by tree size circos = Circos(sectors=dict(tree=tree.count_terminals())) sector = circos.sectors[0] # Plot tree track = sector.add_track((50, 100)) track.tree(tree)  fig = circos.plotfig() In\u00a0[29]: Copied! <pre>from pycirclize import Circos\nfrom pycirclize.utils import load_prokaryote_example_file\nfrom pycirclize.parser import Genbank\n\n# Load Genbank file\ngbk_file = load_prokaryote_example_file(\"enterobacteria_phage.gbk\")\ngbk = Genbank(gbk_file)\n# Initialize circos instance\nseqid2size = gbk.get_seqid2size()\nspace = 0 if len(seqid2size) == 1 else 2\ncircos = Circos(sectors=seqid2size, space=space)\ncircos.text(\"Enterobacteria phage\\n(NC_000902)\", size=15)\n\nseqid2features = gbk.get_seqid2features(\"CDS\")\nfor sector in circos.sectors:\n    # Setup outer track\n    outer_track = sector.add_track((99.7, 100))\n    outer_track.axis(fc=\"black\")\n    outer_track.xticks_by_interval(5000, label_formatter=lambda v: f\"{v / 1000:.0f} Kb\")\n    outer_track.xticks_by_interval(1000, tick_length=1, show_label=False)\n    # Plot forward &amp; reverse CDS genomic features\n    cds_track = sector.add_track((93, 98))\n    for feature in seqid2features[sector.name]:\n        color = \"salmon\" if feature.location.strand == 1 else \"skyblue\"\n        cds_track.genomic_features(feature, plotstyle=\"arrow\", fc=color)\n\nfig = circos.plotfig()\n</pre> from pycirclize import Circos from pycirclize.utils import load_prokaryote_example_file from pycirclize.parser import Genbank  # Load Genbank file gbk_file = load_prokaryote_example_file(\"enterobacteria_phage.gbk\") gbk = Genbank(gbk_file) # Initialize circos instance seqid2size = gbk.get_seqid2size() space = 0 if len(seqid2size) == 1 else 2 circos = Circos(sectors=seqid2size, space=space) circos.text(\"Enterobacteria phage\\n(NC_000902)\", size=15)  seqid2features = gbk.get_seqid2features(\"CDS\") for sector in circos.sectors:     # Setup outer track     outer_track = sector.add_track((99.7, 100))     outer_track.axis(fc=\"black\")     outer_track.xticks_by_interval(5000, label_formatter=lambda v: f\"{v / 1000:.0f} Kb\")     outer_track.xticks_by_interval(1000, tick_length=1, show_label=False)     # Plot forward &amp; reverse CDS genomic features     cds_track = sector.add_track((93, 98))     for feature in seqid2features[sector.name]:         color = \"salmon\" if feature.location.strand == 1 else \"skyblue\"         cds_track.genomic_features(feature, plotstyle=\"arrow\", fc=color)  fig = circos.plotfig() In\u00a0[30]: Copied! <pre>from pycirclize import Circos\nfrom pycirclize.utils import load_prokaryote_example_file, ColorCycler\nfrom pycirclize.parser import Gff\nColorCycler.set_cmap(\"Set3\")\n\n# Load GFF file\ngff_file = load_prokaryote_example_file(\"escherichia_coli.gff.gz\")\ngff = Gff(gff_file)\n# Initialize circos instance\nseqid2size= gff.get_seqid2size()\nspace = 0 if len(seqid2size) == 1 else 2\ncircos = Circos(sectors=seqid2size, space=space)\ncircos.text(\"Escherichia coli\\n(NC_000913)\", size=15)\n\nseqid2features = gff.get_seqid2features(feature_type=None)\nfor sector in circos.sectors:\n    # Setup outer track\n    outer_track = sector.add_track((98, 100))\n    outer_track.axis(fc=\"lightgrey\")\n    outer_track.xticks_by_interval(500000, label_formatter=lambda v: f\"{v / 1000000:.1f} Mb\")\n    outer_track.xticks_by_interval(100000, tick_length=1, show_label=False)\n    # Plot forward/reverse CDS, rRNA, tRNA tracks\n    f_cds_track = sector.add_track((88, 95), r_pad_ratio=0.1)\n    r_cds_track = sector.add_track((81, 88), r_pad_ratio=0.1)\n    rrna_track = sector.add_track((74, 81), r_pad_ratio=0.1)\n    trna_track = sector.add_track((67, 74), r_pad_ratio=0.1)\n    for feature in seqid2features[sector.name]:\n        if feature.type == \"CDS\":\n            if feature.location.strand == 1:\n                f_cds_track.genomic_features(feature, fc=ColorCycler())\n            else:\n                r_cds_track.genomic_features(feature, fc=ColorCycler())\n        elif feature.type == \"rRNA\":\n            rrna_track.genomic_features(feature, fc=\"limegreen\")\n        elif feature.type == \"tRNA\":\n            trna_track.genomic_features(feature, color=\"magenta\", lw=0.1)  # Set lw=0.1 to enphasize small tRNA plot\n\nfig = circos.plotfig()\n</pre> from pycirclize import Circos from pycirclize.utils import load_prokaryote_example_file, ColorCycler from pycirclize.parser import Gff ColorCycler.set_cmap(\"Set3\")  # Load GFF file gff_file = load_prokaryote_example_file(\"escherichia_coli.gff.gz\") gff = Gff(gff_file) # Initialize circos instance seqid2size= gff.get_seqid2size() space = 0 if len(seqid2size) == 1 else 2 circos = Circos(sectors=seqid2size, space=space) circos.text(\"Escherichia coli\\n(NC_000913)\", size=15)  seqid2features = gff.get_seqid2features(feature_type=None) for sector in circos.sectors:     # Setup outer track     outer_track = sector.add_track((98, 100))     outer_track.axis(fc=\"lightgrey\")     outer_track.xticks_by_interval(500000, label_formatter=lambda v: f\"{v / 1000000:.1f} Mb\")     outer_track.xticks_by_interval(100000, tick_length=1, show_label=False)     # Plot forward/reverse CDS, rRNA, tRNA tracks     f_cds_track = sector.add_track((88, 95), r_pad_ratio=0.1)     r_cds_track = sector.add_track((81, 88), r_pad_ratio=0.1)     rrna_track = sector.add_track((74, 81), r_pad_ratio=0.1)     trna_track = sector.add_track((67, 74), r_pad_ratio=0.1)     for feature in seqid2features[sector.name]:         if feature.type == \"CDS\":             if feature.location.strand == 1:                 f_cds_track.genomic_features(feature, fc=ColorCycler())             else:                 r_cds_track.genomic_features(feature, fc=ColorCycler())         elif feature.type == \"rRNA\":             rrna_track.genomic_features(feature, fc=\"limegreen\")         elif feature.type == \"tRNA\":             trna_track.genomic_features(feature, color=\"magenta\", lw=0.1)  # Set lw=0.1 to enphasize small tRNA plot  fig = circos.plotfig() In\u00a0[1]: Copied! <pre>from pycirclize import Circos\nfrom pycirclize.utils import load_example_image_file\n\nlogo_file = load_example_image_file(\"python_logo.png\")\n\nsectors = {\"A\": 10, \"B\": 15, \"C\": 12, \"D\": 20, \"E\": 15}\ncircos = Circos(sectors, space=5)\nfor sector in circos.sectors:\n    sector.text(sector.name)\n    track = sector.add_track((50, 100))\n    track.axis()\n    # Plot raster image on track\n    track.raster(logo_file, w=0.9, h=0.9)\n\nfig = circos.plotfig()\n</pre> from pycirclize import Circos from pycirclize.utils import load_example_image_file  logo_file = load_example_image_file(\"python_logo.png\")  sectors = {\"A\": 10, \"B\": 15, \"C\": 12, \"D\": 20, \"E\": 15} circos = Circos(sectors, space=5) for sector in circos.sectors:     sector.text(sector.name)     track = sector.add_track((50, 100))     track.axis()     # Plot raster image on track     track.raster(logo_file, w=0.9, h=0.9)  fig = circos.plotfig() In\u00a0[32]: Copied! <pre>from pycirclize import Circos\nfrom pycirclize.parser import Gff\nfrom pycirclize.utils import load_prokaryote_example_file\n\ngff_file = load_prokaryote_example_file(\"enterobacteria_phage.gff\")\ngff = Gff(gff_file)\n\nseqid2size = gff.get_seqid2size()\nspace = 0 if len(seqid2size) == 1 else 2\ncircos = Circos(sectors=seqid2size, space=space)\n\nseqid2features = gff.get_seqid2features(feature_type=\"CDS\")\nfor sector in circos.sectors:\n    track = sector.add_track((90, 100))\n    track.axis(fc=\"#EEEEEE\", ec=\"none\")\n    track.grid(2, color=\"black\")\n\n    features = seqid2features[sector.name]\n    for feature in features:\n        # Plot CDS feature\n        if feature.location.strand == 1:\n            track.genomic_features(feature, plotstyle=\"arrow\", r_lim=(95, 100), fc=\"salmon\")\n        else:\n            track.genomic_features(feature, plotstyle=\"arrow\", r_lim=(90, 95), fc=\"skyblue\")\n        # Plot feature annotation label\n        start, end = int(feature.location.start), int(feature.location.end)\n        label_pos = (start + end) / 2\n        label = feature.qualifiers.get(\"product\", [\"\"])[0]\n        if label == \"\" or label.startswith(\"hypothetical\"):\n            continue\n        track.annotate(label_pos, label, label_size=7)\n\nfig = circos.plotfig()\n</pre> from pycirclize import Circos from pycirclize.parser import Gff from pycirclize.utils import load_prokaryote_example_file  gff_file = load_prokaryote_example_file(\"enterobacteria_phage.gff\") gff = Gff(gff_file)  seqid2size = gff.get_seqid2size() space = 0 if len(seqid2size) == 1 else 2 circos = Circos(sectors=seqid2size, space=space)  seqid2features = gff.get_seqid2features(feature_type=\"CDS\") for sector in circos.sectors:     track = sector.add_track((90, 100))     track.axis(fc=\"#EEEEEE\", ec=\"none\")     track.grid(2, color=\"black\")      features = seqid2features[sector.name]     for feature in features:         # Plot CDS feature         if feature.location.strand == 1:             track.genomic_features(feature, plotstyle=\"arrow\", r_lim=(95, 100), fc=\"salmon\")         else:             track.genomic_features(feature, plotstyle=\"arrow\", r_lim=(90, 95), fc=\"skyblue\")         # Plot feature annotation label         start, end = int(feature.location.start), int(feature.location.end)         label_pos = (start + end) / 2         label = feature.qualifiers.get(\"product\", [\"\"])[0]         if label == \"\" or label.startswith(\"hypothetical\"):             continue         track.annotate(label_pos, label, label_size=7)  fig = circos.plotfig()"},{"location":"plot_api_example/#1-circos-class-plot","title":"1. Circos Class Plot\u00b6","text":""},{"location":"plot_api_example/#1-1-axis","title":"1-1. axis\u00b6","text":""},{"location":"plot_api_example/#1-2-text","title":"1-2. text\u00b6","text":""},{"location":"plot_api_example/#1-3-line","title":"1-3. line\u00b6","text":""},{"location":"plot_api_example/#1-4-rect","title":"1-4. rect\u00b6","text":""},{"location":"plot_api_example/#1-5-link","title":"1-5. link\u00b6","text":""},{"location":"plot_api_example/#1-6-link_line","title":"1-6. link_line\u00b6","text":""},{"location":"plot_api_example/#2-sector-class-plot","title":"2. Sector Class Plot\u00b6","text":""},{"location":"plot_api_example/#2-1-axis","title":"2-1. axis\u00b6","text":""},{"location":"plot_api_example/#2-2-text","title":"2-2. text\u00b6","text":""},{"location":"plot_api_example/#2-3-line","title":"2-3. line\u00b6","text":""},{"location":"plot_api_example/#2-4-rect","title":"2-4. rect\u00b6","text":""},{"location":"plot_api_example/#2-5-raster","title":"2-5. raster\u00b6","text":""},{"location":"plot_api_example/#3-track-class-plot","title":"3. Track Class Plot\u00b6","text":""},{"location":"plot_api_example/#3-1-axis","title":"3-1. axis\u00b6","text":""},{"location":"plot_api_example/#3-2-text","title":"3-2. text\u00b6","text":""},{"location":"plot_api_example/#3-3-rect","title":"3-3. rect\u00b6","text":""},{"location":"plot_api_example/#3-4-arrow","title":"3-4. arrow\u00b6","text":""},{"location":"plot_api_example/#3-5-xticks","title":"3-5. xticks\u00b6","text":""},{"location":"plot_api_example/#3-6-xticks_by_interval","title":"3-6. xticks_by_interval\u00b6","text":""},{"location":"plot_api_example/#3-6-1-small-interval","title":"3-6-1. Small interval\u00b6","text":""},{"location":"plot_api_example/#3-6-2-large-interval","title":"3-6-2. Large interval\u00b6","text":""},{"location":"plot_api_example/#3-7-yticks","title":"3-7. yticks\u00b6","text":""},{"location":"plot_api_example/#3-8-grid","title":"3-8. grid\u00b6","text":""},{"location":"plot_api_example/#3-9-line","title":"3-9. line\u00b6","text":""},{"location":"plot_api_example/#3-10-scatter","title":"3-10. scatter\u00b6","text":""},{"location":"plot_api_example/#3-11-bar","title":"3-11. bar\u00b6","text":""},{"location":"plot_api_example/#3-12-fill_between","title":"3-12. fill_between\u00b6","text":""},{"location":"plot_api_example/#3-13-heatmap","title":"3-13. heatmap\u00b6","text":""},{"location":"plot_api_example/#3-14-tree","title":"3-14. tree\u00b6","text":""},{"location":"plot_api_example/#3-15-genomic_features","title":"3-15. genomic_features\u00b6","text":""},{"location":"plot_api_example/#3-15-1-genbank-file","title":"3-15-1. Genbank file\u00b6","text":""},{"location":"plot_api_example/#3-15-2-gff-file","title":"3-15-2. GFF file\u00b6","text":""},{"location":"plot_api_example/#3-16-raster","title":"3-16. raster\u00b6","text":""},{"location":"plot_api_example/#3-17-annotate","title":"3-17. annotate\u00b6","text":""},{"location":"plot_tips/","title":"Plot Tips","text":"In\u00a0[1]: Copied! <pre># %pip install pycirclize\n</pre> # %pip install pycirclize In\u00a0[2]: Copied! <pre>from pycirclize import Circos\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\nnp.random.seed(0)\n\n# Create 4 subplots\nfig = plt.figure(figsize=(8, 8), dpi=150)\nax1 = fig.add_subplot(221)\npolar_ax2 = fig.add_subplot(222, polar=True)\npolar_ax3 = fig.add_subplot(223, polar=True)\npolar_ax4 = fig.add_subplot(224, polar=True)\n\n# Plot to first subplot (ax1)\nx = np.linspace(0, 2 * np.pi, 100)\nax1.plot(x, np.sin(x))\n\n# Plot circos to second subplot (polar_ax2)\nsectors = {\"A\": 10, \"B\": 20, \"C\": 15}\ncircos = Circos(sectors, space=10)\nfor sector in circos.sectors:\n    track = sector.add_track((80, 100), r_pad_ratio=0.1)\n    track.axis()\n    track.xticks_by_interval(5)\n    vmin, vmax = 0, 10\n    # Line between start-end two points\n    track.line([track.start, track.end], [vmin, vmax], lw=1, ls=\"dotted\")\n    # Line of random value points\n    x = np.linspace(track.start, track.end, int(track.size) * 5 + 1)\n    y = np.random.randint(vmin, vmax, len(x))\n    track.line(x, y)\n\nfig = circos.plotfig(ax=polar_ax2)\n\n# Plot chord diagram to fourth subplot (polar_ax4)\nrow_names = [\"F1\", \"F2\", \"F3\"]\ncol_names = [\"T1\", \"T2\", \"T3\", \"T4\", \"T5\", \"T6\"]\nmatrix_data = [\n    [4, 14, 13, 17, 5, 2],\n    [7, 1, 6, 8, 12, 15],\n    [9, 10, 3, 16, 11, 18],\n]\nmatrix_df = pd.DataFrame(matrix_data, index=row_names, columns=col_names)\n\ncircos = Circos.chord_diagram(\n    matrix_df,\n    r_lim=(95, 100),\n    space=5,\n    cmap=\"tab10\",\n    link_kws=dict(ec=\"black\", lw=0.5, direction=1),\n)\nfig = circos.plotfig(ax=polar_ax4)\n</pre> from pycirclize import Circos import matplotlib.pyplot as plt import numpy as np import pandas as pd np.random.seed(0)  # Create 4 subplots fig = plt.figure(figsize=(8, 8), dpi=150) ax1 = fig.add_subplot(221) polar_ax2 = fig.add_subplot(222, polar=True) polar_ax3 = fig.add_subplot(223, polar=True) polar_ax4 = fig.add_subplot(224, polar=True)  # Plot to first subplot (ax1) x = np.linspace(0, 2 * np.pi, 100) ax1.plot(x, np.sin(x))  # Plot circos to second subplot (polar_ax2) sectors = {\"A\": 10, \"B\": 20, \"C\": 15} circos = Circos(sectors, space=10) for sector in circos.sectors:     track = sector.add_track((80, 100), r_pad_ratio=0.1)     track.axis()     track.xticks_by_interval(5)     vmin, vmax = 0, 10     # Line between start-end two points     track.line([track.start, track.end], [vmin, vmax], lw=1, ls=\"dotted\")     # Line of random value points     x = np.linspace(track.start, track.end, int(track.size) * 5 + 1)     y = np.random.randint(vmin, vmax, len(x))     track.line(x, y)  fig = circos.plotfig(ax=polar_ax2)  # Plot chord diagram to fourth subplot (polar_ax4) row_names = [\"F1\", \"F2\", \"F3\"] col_names = [\"T1\", \"T2\", \"T3\", \"T4\", \"T5\", \"T6\"] matrix_data = [     [4, 14, 13, 17, 5, 2],     [7, 1, 6, 8, 12, 15],     [9, 10, 3, 16, 11, 18], ] matrix_df = pd.DataFrame(matrix_data, index=row_names, columns=col_names)  circos = Circos.chord_diagram(     matrix_df,     r_lim=(95, 100),     space=5,     cmap=\"tab10\",     link_kws=dict(ec=\"black\", lw=0.5, direction=1), ) fig = circos.plotfig(ax=polar_ax4) In\u00a0[3]: Copied! <pre>from pycirclize import Circos\nfrom pycirclize.utils import calc_group_spaces, ColorCycler\n\nsectors = {name: 10 for name in \"ABCDEFGHIJ\"}\ngroup1, group2, group3 = list(\"ABCD\"), list(\"EFG\"), list(\"HIJ\")\n\n# Calculate appropriate group between/within spaces\n# In this example, 10 sectors are displayed as groups dividied into [4, 3, 3]\nspaces = calc_group_spaces([4, 3, 3], space_bw_group=15, space_in_group=2)\ncircos = Circos(sectors, space=spaces)\n\n# Plot sector track\nColorCycler.set_cmap(\"Set3\")\nfor sector in circos.sectors:\n    track = sector.add_track(r_lim=(85, 90))\n    track.axis(fc=ColorCycler())\n    track.text(sector.name)\n\n# Plot group sectors range\nColorCycler.set_cmap(\"tab10\")\nfor idx, group in enumerate((group1, group2, group3), 1):\n    group_deg_lim = circos.get_group_sectors_deg_lim(group)\n    circos.rect(r_lim=(97, 100), deg_lim=group_deg_lim, fc=ColorCycler(), ec=\"black\", lw=0.5)\n    group_center_deg = sum(group_deg_lim) / 2\n    circos.text(f\"Group{idx}\", r=105, deg=group_center_deg, adjust_rotation=True)\n\nfig = circos.plotfig()\n</pre> from pycirclize import Circos from pycirclize.utils import calc_group_spaces, ColorCycler  sectors = {name: 10 for name in \"ABCDEFGHIJ\"} group1, group2, group3 = list(\"ABCD\"), list(\"EFG\"), list(\"HIJ\")  # Calculate appropriate group between/within spaces # In this example, 10 sectors are displayed as groups dividied into [4, 3, 3] spaces = calc_group_spaces([4, 3, 3], space_bw_group=15, space_in_group=2) circos = Circos(sectors, space=spaces)  # Plot sector track ColorCycler.set_cmap(\"Set3\") for sector in circos.sectors:     track = sector.add_track(r_lim=(85, 90))     track.axis(fc=ColorCycler())     track.text(sector.name)  # Plot group sectors range ColorCycler.set_cmap(\"tab10\") for idx, group in enumerate((group1, group2, group3), 1):     group_deg_lim = circos.get_group_sectors_deg_lim(group)     circos.rect(r_lim=(97, 100), deg_lim=group_deg_lim, fc=ColorCycler(), ec=\"black\", lw=0.5)     group_center_deg = sum(group_deg_lim) / 2     circos.text(f\"Group{idx}\", r=105, deg=group_center_deg, adjust_rotation=True)  fig = circos.plotfig() In\u00a0[1]: Copied! <pre>from pycirclize import Circos, config\nfrom pycirclize.parser import Gff\nfrom pycirclize.utils import load_prokaryote_example_file\n\ngff_file = load_prokaryote_example_file(\"enterobacteria_phage.gff\")\ngff = Gff(gff_file)\n\nseqid2size = gff.get_seqid2size()\nspace = 0 if len(seqid2size) == 1 else 2\ncircos = Circos(sectors=seqid2size, space=space)\n\nseqid2features = gff.get_seqid2features(feature_type=\"CDS\")\nfor sector in circos.sectors:\n    cds_track = sector.add_track((90, 100))\n    cds_track.axis(fc=\"#EEEEEE\", ec=\"none\")\n    cds_track.grid(2, color=\"black\")\n\n    features = seqid2features[sector.name]\n    for feature in features:\n        # Plot CDS feature\n        if feature.location.strand == 1:\n            cds_track.genomic_features(feature, plotstyle=\"arrow\", r_lim=(95, 100), fc=\"salmon\")\n        else:\n            cds_track.genomic_features(feature, plotstyle=\"arrow\", r_lim=(90, 95), fc=\"skyblue\")\n        # Plot feature annotation label\n        start, end = int(feature.location.start), int(feature.location.end)\n        label_pos = (start + end) / 2\n        label = feature.qualifiers.get(\"product\", [\"\"])[0]\n        if label == \"\" or label.startswith(\"hypothetical\"):\n            continue\n        cds_track.annotate(label_pos, label, label_size=7)\n\n# Disable annotation text adjustment\nconfig.ann_adjust.enable = False\nfig = circos.plotfig()\n_ = circos.ax.text(0, 0, \"Disable Annotation Text Adjustment\", size=12, va=\"center\", ha=\"center\")\n\n# Enable annotation text adjustment (Default)\nconfig.ann_adjust.enable = True\nfig = circos.plotfig()\n_ = circos.ax.text(0, 0, \"Enable Annotation Text Adjustment\", size=12, va=\"center\", ha=\"center\")\n</pre> from pycirclize import Circos, config from pycirclize.parser import Gff from pycirclize.utils import load_prokaryote_example_file  gff_file = load_prokaryote_example_file(\"enterobacteria_phage.gff\") gff = Gff(gff_file)  seqid2size = gff.get_seqid2size() space = 0 if len(seqid2size) == 1 else 2 circos = Circos(sectors=seqid2size, space=space)  seqid2features = gff.get_seqid2features(feature_type=\"CDS\") for sector in circos.sectors:     cds_track = sector.add_track((90, 100))     cds_track.axis(fc=\"#EEEEEE\", ec=\"none\")     cds_track.grid(2, color=\"black\")      features = seqid2features[sector.name]     for feature in features:         # Plot CDS feature         if feature.location.strand == 1:             cds_track.genomic_features(feature, plotstyle=\"arrow\", r_lim=(95, 100), fc=\"salmon\")         else:             cds_track.genomic_features(feature, plotstyle=\"arrow\", r_lim=(90, 95), fc=\"skyblue\")         # Plot feature annotation label         start, end = int(feature.location.start), int(feature.location.end)         label_pos = (start + end) / 2         label = feature.qualifiers.get(\"product\", [\"\"])[0]         if label == \"\" or label.startswith(\"hypothetical\"):             continue         cds_track.annotate(label_pos, label, label_size=7)  # Disable annotation text adjustment config.ann_adjust.enable = False fig = circos.plotfig() _ = circos.ax.text(0, 0, \"Disable Annotation Text Adjustment\", size=12, va=\"center\", ha=\"center\")  # Enable annotation text adjustment (Default) config.ann_adjust.enable = True fig = circos.plotfig() _ = circos.ax.text(0, 0, \"Enable Annotation Text Adjustment\", size=12, va=\"center\", ha=\"center\") In\u00a0[4]: Copied! <pre>from pycirclize import Circos\n\nsectors = dict(A1=18000, A2=13000, A3=6000, A4=5000, B3=12000, B2=13000, B1=15000)\ncircos = Circos(\n    sectors,\n    space=3,\n    # Set (B1, B2, B3) sector coordinate direction as anti-clockwise\n    sector2clockwise=dict(B1=False, B2=False, B3=False),\n)\n\nfor sector in circos.sectors:\n    # Plot track\n    color = \"orange\" if sector.name.startswith(\"A\") else \"skyblue\"\n    track = sector.add_track((94, 100), r_pad_ratio=0.1)\n    track.axis(fc=color)\n    track.text(sector.name)\n    # Plot xticks\n    major_interval, minor_interval = 5000, 1000\n    track.xticks_by_interval(major_interval, label_orientation=\"vertical\", label_formatter=lambda v: f\"{v / 1000:.0f} Kb\")\n    track.xticks_by_interval(minor_interval, tick_length=1, show_label=False)\n\n# Plot links\ncircos.link((\"A1\", 0, 10000), (\"B1\", 0, 10000))\ncircos.link((\"A1\", 18000, 13000), (\"B1\", 10000, 15000), color=\"tomato\")\ncircos.link((\"A2\", 0, 13000), (\"B2\", 0, 13000))\ncircos.link((\"A3\", 0, 6000), (\"B3\", 6000, 12000))\ncircos.link((\"A4\", 0, 5000), (\"B3\", 0, 5000))\n\nfig = circos.plotfig()\n</pre> from pycirclize import Circos  sectors = dict(A1=18000, A2=13000, A3=6000, A4=5000, B3=12000, B2=13000, B1=15000) circos = Circos(     sectors,     space=3,     # Set (B1, B2, B3) sector coordinate direction as anti-clockwise     sector2clockwise=dict(B1=False, B2=False, B3=False), )  for sector in circos.sectors:     # Plot track     color = \"orange\" if sector.name.startswith(\"A\") else \"skyblue\"     track = sector.add_track((94, 100), r_pad_ratio=0.1)     track.axis(fc=color)     track.text(sector.name)     # Plot xticks     major_interval, minor_interval = 5000, 1000     track.xticks_by_interval(major_interval, label_orientation=\"vertical\", label_formatter=lambda v: f\"{v / 1000:.0f} Kb\")     track.xticks_by_interval(minor_interval, tick_length=1, show_label=False)  # Plot links circos.link((\"A1\", 0, 10000), (\"B1\", 0, 10000)) circos.link((\"A1\", 18000, 13000), (\"B1\", 10000, 15000), color=\"tomato\") circos.link((\"A2\", 0, 13000), (\"B2\", 0, 13000)) circos.link((\"A3\", 0, 6000), (\"B3\", 6000, 12000)) circos.link((\"A4\", 0, 5000), (\"B3\", 0, 5000))  fig = circos.plotfig() In\u00a0[5]: Copied! <pre>from pycirclize import Circos\nimport numpy as np\nnp.random.seed(0)\n\n# Initialize Circos instance\ncircos = Circos(sectors=dict(data=100), start=90)\nsector = circos.sectors[0]\n\n# Plot heatmap track1 (cmap=\"bwr\")\ntrack1 = sector.add_track((85, 100))\ntrack1.axis()\nvmin1, vmax1, cmap1 = 0, 100, \"bwr\"\nmatrix1 = np.random.randint(vmin1, vmax1, (5, 100))\ntrack1.heatmap(matrix1, cmap=cmap1, vmin=vmin1, vmax=vmax1)\n\n# Plot heatmap track2 (cmap=\"viridis\")\ntrack2 = sector.add_track((65, 80))\ntrack2.axis()\nvmin2, vmax2, cmap2 = -200, 200, \"viridis\"\nmatrix2 = np.random.randint(vmin2, vmax2, (3, 100))\ntrack2.heatmap(matrix2, cmap=cmap2, vmin=vmin2, vmax=vmax2)\n\n# Plot colorbar in various style\n# bounds = (x, y, width, height)\ncircos.colorbar(vmin=vmin1, vmax=vmax1)\ncircos.colorbar(bounds=(0.7, 0.6, 0.02, 0.3), vmin=vmin1, vmax=vmax1, cmap=\"bwr\")\ncircos.colorbar(bounds=(0.8, 0.6, 0.02, 0.3), vmin=vmin2, vmax=vmax2, cmap=\"viridis\")\ncircos.colorbar(\n    bounds=(0.3, 0.485, 0.4, 0.03),\n    vmin=vmin2,\n    vmax=vmax2,\n    cmap=\"viridis\",\n    orientation=\"horizontal\",\n    label=\"Colorbar in center\",\n    label_kws=dict(size=12, color=\"blue\"),\n    tick_kws=dict(labelsize=12, colors=\"red\"),\n)\n\nfig = circos.plotfig()\n</pre> from pycirclize import Circos import numpy as np np.random.seed(0)  # Initialize Circos instance circos = Circos(sectors=dict(data=100), start=90) sector = circos.sectors[0]  # Plot heatmap track1 (cmap=\"bwr\") track1 = sector.add_track((85, 100)) track1.axis() vmin1, vmax1, cmap1 = 0, 100, \"bwr\" matrix1 = np.random.randint(vmin1, vmax1, (5, 100)) track1.heatmap(matrix1, cmap=cmap1, vmin=vmin1, vmax=vmax1)  # Plot heatmap track2 (cmap=\"viridis\") track2 = sector.add_track((65, 80)) track2.axis() vmin2, vmax2, cmap2 = -200, 200, \"viridis\" matrix2 = np.random.randint(vmin2, vmax2, (3, 100)) track2.heatmap(matrix2, cmap=cmap2, vmin=vmin2, vmax=vmax2)  # Plot colorbar in various style # bounds = (x, y, width, height) circos.colorbar(vmin=vmin1, vmax=vmax1) circos.colorbar(bounds=(0.7, 0.6, 0.02, 0.3), vmin=vmin1, vmax=vmax1, cmap=\"bwr\") circos.colorbar(bounds=(0.8, 0.6, 0.02, 0.3), vmin=vmin2, vmax=vmax2, cmap=\"viridis\") circos.colorbar(     bounds=(0.3, 0.485, 0.4, 0.03),     vmin=vmin2,     vmax=vmax2,     cmap=\"viridis\",     orientation=\"horizontal\",     label=\"Colorbar in center\",     label_kws=dict(size=12, color=\"blue\"),     tick_kws=dict(labelsize=12, colors=\"red\"), )  fig = circos.plotfig() In\u00a0[6]: Copied! <pre>from pycirclize import Circos\nfrom pycirclize.utils import ColorCycler\nfrom matplotlib.patches import Patch\nfrom matplotlib.lines import Line2D\nimport numpy as np\nnp.random.seed(0)\n\nline_colors = (\"red\", \"blue\", \"green\")\nscatter_colors = (\"orange\", \"purple\", \"black\")\nscatter_markers = (\"o\", \"^\", \"+\")\ncmap_name = \"tab10\"\n\nsectors = dict(A=10, B=15, C=12)\ncircos = Circos(sectors, space=5)\nfor sector in circos.sectors:\n    sector.text(sector.name, r=110, size=12)\n    # Plot line track\n    track1 = sector.add_track((80, 100), r_pad_ratio=0.1)\n    track1.axis()\n    track1.xticks_by_interval(interval=1)\n    for line_color in line_colors:\n        x = np.arange(sector.start, sector.end) + 0.5\n        y = np.random.randint(0, 100, len(x))\n        track1.line(x, y, vmax=100, color=line_color)\n    # Plot scatter track\n    track2 = sector.add_track((55, 75), r_pad_ratio=0.1)\n    track2.axis()\n    for color, marker in zip(scatter_colors, scatter_markers):\n        point_num = 10\n        x = np.random.rand(point_num) * (sector.end - 1) + 0.5\n        y = np.random.rand(point_num) * 10\n        track2.scatter(x, y, vmax=10, c=color, marker=marker, s=15)\n    # Plot rect track\n    track3 = sector.add_track((47, 50))\n    ColorCycler.set_cmap(cmap_name)\n    for idx in range(int(sector.start), int(sector.end)):\n        track3.rect(idx, idx + 1, color=ColorCycler(), ec=\"black\", lw=0.5)\n\nfig = circos.plotfig()\n\n# Plot legend\nline_handles = [\n    Line2D([], [], color=\"red\", label=\"Line 01\"),\n    Line2D([], [], color=\"blue\", label=\"Line 02\"),\n    Line2D([], [], color=\"green\", label=\"Line 03\"),\n]\nline_legend = circos.ax.legend(\n    handles=line_handles,\n    bbox_to_anchor=(0.93, 1.02),\n    fontsize=8,\n    title=\"Lines\",\n    handlelength=2,\n)\ncircos.ax.add_artist(line_legend)\n\nscatter_handles = [\n    # Marker List: https://matplotlib.org/stable/api/markers_api.html\n    Line2D([], [], color=\"orange\", marker=\"o\", label=\"Point 01\", ms=6, ls=\"None\"),\n    Line2D([], [], color=\"purple\", marker=\"^\", label=\"Point 02\", ms=6, ls=\"None\"),\n    Line2D([], [], color=\"black\", marker=\"+\", label=\"Point 03\", ms=6, ls=\"None\"),\n]\nscatter_legend = circos.ax.legend(\n    handles=scatter_handles,\n    bbox_to_anchor=(0.93, 0.90),\n    fontsize=8,\n    title=\"Points\",\n    handlelength=2,\n)\ncircos.ax.add_artist(scatter_legend)\n\nrect_handles = []\nrect_colors = ColorCycler.get_color_list()\nfor idx, color in enumerate(rect_colors, 1):\n    rect_handles.append(Patch(color=color, label=f\"Type {idx:02d}\"))\n_ = circos.ax.legend(\n    handles=rect_handles,\n    bbox_to_anchor=(0.5, 0.5),\n    loc=\"center\",\n    fontsize=8,\n    title=\"Types\",\n    ncol=2,\n)\n\n# *** To save a figure with legend as a file, use `fig.savefig()` method ***\n# *** `circos.savefig()` method does not save the figure with legend ***\n# fig.savefig(\"result.png\", dpi=100)\n</pre> from pycirclize import Circos from pycirclize.utils import ColorCycler from matplotlib.patches import Patch from matplotlib.lines import Line2D import numpy as np np.random.seed(0)  line_colors = (\"red\", \"blue\", \"green\") scatter_colors = (\"orange\", \"purple\", \"black\") scatter_markers = (\"o\", \"^\", \"+\") cmap_name = \"tab10\"  sectors = dict(A=10, B=15, C=12) circos = Circos(sectors, space=5) for sector in circos.sectors:     sector.text(sector.name, r=110, size=12)     # Plot line track     track1 = sector.add_track((80, 100), r_pad_ratio=0.1)     track1.axis()     track1.xticks_by_interval(interval=1)     for line_color in line_colors:         x = np.arange(sector.start, sector.end) + 0.5         y = np.random.randint(0, 100, len(x))         track1.line(x, y, vmax=100, color=line_color)     # Plot scatter track     track2 = sector.add_track((55, 75), r_pad_ratio=0.1)     track2.axis()     for color, marker in zip(scatter_colors, scatter_markers):         point_num = 10         x = np.random.rand(point_num) * (sector.end - 1) + 0.5         y = np.random.rand(point_num) * 10         track2.scatter(x, y, vmax=10, c=color, marker=marker, s=15)     # Plot rect track     track3 = sector.add_track((47, 50))     ColorCycler.set_cmap(cmap_name)     for idx in range(int(sector.start), int(sector.end)):         track3.rect(idx, idx + 1, color=ColorCycler(), ec=\"black\", lw=0.5)  fig = circos.plotfig()  # Plot legend line_handles = [     Line2D([], [], color=\"red\", label=\"Line 01\"),     Line2D([], [], color=\"blue\", label=\"Line 02\"),     Line2D([], [], color=\"green\", label=\"Line 03\"), ] line_legend = circos.ax.legend(     handles=line_handles,     bbox_to_anchor=(0.93, 1.02),     fontsize=8,     title=\"Lines\",     handlelength=2, ) circos.ax.add_artist(line_legend)  scatter_handles = [     # Marker List: https://matplotlib.org/stable/api/markers_api.html     Line2D([], [], color=\"orange\", marker=\"o\", label=\"Point 01\", ms=6, ls=\"None\"),     Line2D([], [], color=\"purple\", marker=\"^\", label=\"Point 02\", ms=6, ls=\"None\"),     Line2D([], [], color=\"black\", marker=\"+\", label=\"Point 03\", ms=6, ls=\"None\"), ] scatter_legend = circos.ax.legend(     handles=scatter_handles,     bbox_to_anchor=(0.93, 0.90),     fontsize=8,     title=\"Points\",     handlelength=2, ) circos.ax.add_artist(scatter_legend)  rect_handles = [] rect_colors = ColorCycler.get_color_list() for idx, color in enumerate(rect_colors, 1):     rect_handles.append(Patch(color=color, label=f\"Type {idx:02d}\")) _ = circos.ax.legend(     handles=rect_handles,     bbox_to_anchor=(0.5, 0.5),     loc=\"center\",     fontsize=8,     title=\"Types\",     ncol=2, )  # *** To save a figure with legend as a file, use `fig.savefig()` method *** # *** `circos.savefig()` method does not save the figure with legend *** # fig.savefig(\"result.png\", dpi=100) In\u00a0[7]: Copied! <pre>from pycirclize import Circos\nfrom matplotlib.patches import Patch\nimport pandas as pd\nimport numpy as np\nnp.random.seed(0)\n\n# Generate matrix data for stacked bar plot\nrow_num, col_num = 12, 6\nmatrix = np.random.randint(5, 20, (row_num, col_num))\nrow_names = [f\"R{i}\" for i in range(row_num)]\ncol_names = [f\"group{i}\" for i in range(col_num)]\ntable_df = pd.DataFrame(matrix, index=row_names, columns=col_names)\nprint(table_df)\n\n# Initialize Circos sector &amp; track\ncircos = Circos(sectors=dict(bar=len(table_df.index)))\nsector = circos.sectors[0]\ntrack = sector.add_track((50, 100))\ntrack.grid()\n\n# Plot stacked bar\ncolormap = \"Set3\"\nsb_table = track.stacked_bar(\n    table_df,\n    width=0.6,\n    cmap=colormap,\n    bar_kws=dict(ec=\"black\", lw=0.2),\n    label_pos=\"bottom\",\n    label_kws=dict(size=10, orientation=\"horizontal\"),\n)\n\nfig = circos.plotfig()\n\n# Plot legends\ncol_name2color = sb_table.get_col_name2color(colormap)\n_ = circos.ax.legend(\n    handles=[Patch(label=n, fc=c, ec=\"black\", lw=0.5) for n, c in col_name2color.items()],\n    bbox_to_anchor=(0.5, 0.5),\n    loc=\"center\",\n    ncols=2,\n)\n\n# fig.savefig(\"stacked_bar.png\")\n</pre> from pycirclize import Circos from matplotlib.patches import Patch import pandas as pd import numpy as np np.random.seed(0)  # Generate matrix data for stacked bar plot row_num, col_num = 12, 6 matrix = np.random.randint(5, 20, (row_num, col_num)) row_names = [f\"R{i}\" for i in range(row_num)] col_names = [f\"group{i}\" for i in range(col_num)] table_df = pd.DataFrame(matrix, index=row_names, columns=col_names) print(table_df)  # Initialize Circos sector &amp; track circos = Circos(sectors=dict(bar=len(table_df.index))) sector = circos.sectors[0] track = sector.add_track((50, 100)) track.grid()  # Plot stacked bar colormap = \"Set3\" sb_table = track.stacked_bar(     table_df,     width=0.6,     cmap=colormap,     bar_kws=dict(ec=\"black\", lw=0.2),     label_pos=\"bottom\",     label_kws=dict(size=10, orientation=\"horizontal\"), )  fig = circos.plotfig()  # Plot legends col_name2color = sb_table.get_col_name2color(colormap) _ = circos.ax.legend(     handles=[Patch(label=n, fc=c, ec=\"black\", lw=0.5) for n, c in col_name2color.items()],     bbox_to_anchor=(0.5, 0.5),     loc=\"center\",     ncols=2, )  # fig.savefig(\"stacked_bar.png\") <pre>     group0  group1  group2  group3  group4  group5\nR0       17      10       5       8      16       8\nR1       12      14       8      10       7       9\nR2       12      11      13      13      17      15\nR3        6      11      12      12      19      13\nR4        6      10      14      18      13      14\nR5        9       8       5       8      10      19\nR6        5       7       8      13       6       8\nR7       18       8       8      19      12       5\nR8        6      14      14       5      15       9\nR9       12       8      19      16       7      12\nR10      17       7       5       5       9      10\nR11      10      11      13       9       6       9\n</pre> In\u00a0[8]: Copied! <pre>from pycirclize import Circos\nfrom pycirclize.parser import StackedBarTable\nfrom matplotlib.patches import Patch\nimport pandas as pd\nimport numpy as np\nnp.random.seed(0)\n\n# Generate &amp; load matrix data for horizontal stacked bar plot\nrow_names = list(\"ABCDEF\")\ncol_names = [\"group1\", \"group2\", \"group3\", \"group4\", \"group5\", \"group6\"]\nmatrix = np.random.randint(5, 20, (len(row_names), len(col_names)))\ntable_df = pd.DataFrame(matrix, index=row_names, columns=col_names)\nsb_table = StackedBarTable(table_df)\nprint(table_df)\n\n# Initialize Circos sector &amp; track (0 &lt;= range &lt;= 270)\ncircos = Circos(sectors=dict(bar=sb_table.row_sum_vmax), start=0, end=270)\nsector = circos.sectors[0]\ntrack = sector.add_track((30, 100))\ntrack.axis(fc=\"lightgrey\", ec=\"black\", alpha=0.5)\n\n# Plot horizontal stacked bar &amp; label &amp; xticks\ncolormap = \"tab10\"\ntrack.stacked_barh(sb_table.dataframe, cmap=colormap, width=0.6)\nlabel_r_list = sb_table.calc_barh_label_r_list(track.r_plot_lim)\nfor label_r, row_name in zip(label_r_list, sb_table.row_names):\n    track.text(f\"{row_name} \", x=0, r=label_r, ha=\"right\")\ntrack.xticks_by_interval(interval=5)\ntrack.xticks_by_interval(interval=1, tick_length=1, show_label=False)\n\nfig = circos.plotfig()\n\n# Plot legends\ncol_name2color = sb_table.get_col_name2color(colormap)\n_ = circos.ax.legend(\n    handles=[Patch(label=n, fc=c, ec=\"black\", lw=0.5) for n, c in col_name2color.items()],\n    bbox_to_anchor=(0.2, 0.8),\n    fontsize=12,\n    loc=\"center\",\n    ncols=2,\n)\n\n# fig.savefig(\"stacked_barh.png\")\n</pre> from pycirclize import Circos from pycirclize.parser import StackedBarTable from matplotlib.patches import Patch import pandas as pd import numpy as np np.random.seed(0)  # Generate &amp; load matrix data for horizontal stacked bar plot row_names = list(\"ABCDEF\") col_names = [\"group1\", \"group2\", \"group3\", \"group4\", \"group5\", \"group6\"] matrix = np.random.randint(5, 20, (len(row_names), len(col_names))) table_df = pd.DataFrame(matrix, index=row_names, columns=col_names) sb_table = StackedBarTable(table_df) print(table_df)  # Initialize Circos sector &amp; track (0 &lt;= range &lt;= 270) circos = Circos(sectors=dict(bar=sb_table.row_sum_vmax), start=0, end=270) sector = circos.sectors[0] track = sector.add_track((30, 100)) track.axis(fc=\"lightgrey\", ec=\"black\", alpha=0.5)  # Plot horizontal stacked bar &amp; label &amp; xticks colormap = \"tab10\" track.stacked_barh(sb_table.dataframe, cmap=colormap, width=0.6) label_r_list = sb_table.calc_barh_label_r_list(track.r_plot_lim) for label_r, row_name in zip(label_r_list, sb_table.row_names):     track.text(f\"{row_name} \", x=0, r=label_r, ha=\"right\") track.xticks_by_interval(interval=5) track.xticks_by_interval(interval=1, tick_length=1, show_label=False)  fig = circos.plotfig()  # Plot legends col_name2color = sb_table.get_col_name2color(colormap) _ = circos.ax.legend(     handles=[Patch(label=n, fc=c, ec=\"black\", lw=0.5) for n, c in col_name2color.items()],     bbox_to_anchor=(0.2, 0.8),     fontsize=12,     loc=\"center\",     ncols=2, )  # fig.savefig(\"stacked_barh.png\") <pre>   group1  group2  group3  group4  group5  group6\nA      17      10       5       8      16       8\nB      12      14       8      10       7       9\nC      12      11      13      13      17      15\nD       6      11      12      12      19      13\nE       6      10      14      18      13      14\nF       9       8       5       8      10      19\n</pre> In\u00a0[9]: Copied! <pre>from pycirclize import Circos\nimport numpy as np\n\ncircos = Circos(sectors={\"clock\": 12})\nsector = circos.sectors[0]\n\n# Plot outer line &amp; xticks\ntrack = sector.add_track(r_lim=(100, 100))\nmajor_xticks = np.arange(0, 12, 1) + 1\ntrack.xticks(major_xticks, outer=False, show_bottom_line=True)\nminor_xticks = np.arange(0, 12, 0.2)\ntrack.xticks(minor_xticks, outer=False, tick_length=1)\n\n# Plot 1-12 hour characters\nfor x in major_xticks:\n    track.text(str(x), x=x, r=93, size=15, adjust_rotation=False)\n\n# Plot clock hands (hour, minute, second)\nsector.line(r=(0, 40), start=8, end=8, lw=3)\nsector.line(r=(0, 70), start=0, end=0, lw=1.5)\nsector.line(r=(0, 80), start=5, end=5, lw=0.5, color=\"red\")\n\nfig = circos.plotfig()\n</pre> from pycirclize import Circos import numpy as np  circos = Circos(sectors={\"clock\": 12}) sector = circos.sectors[0]  # Plot outer line &amp; xticks track = sector.add_track(r_lim=(100, 100)) major_xticks = np.arange(0, 12, 1) + 1 track.xticks(major_xticks, outer=False, show_bottom_line=True) minor_xticks = np.arange(0, 12, 0.2) track.xticks(minor_xticks, outer=False, tick_length=1)  # Plot 1-12 hour characters for x in major_xticks:     track.text(str(x), x=x, r=93, size=15, adjust_rotation=False)  # Plot clock hands (hour, minute, second) sector.line(r=(0, 40), start=8, end=8, lw=3) sector.line(r=(0, 70), start=0, end=0, lw=1.5) sector.line(r=(0, 80), start=5, end=5, lw=0.5, color=\"red\")  fig = circos.plotfig() In\u00a0[10]: Copied! <pre>from pycirclize import Circos\n\npoints = [20, 1, 18, 4, 13, 6, 10, 15, 2, 17, 3, 19, 7, 16, 8, 11, 14, 9, 12, 5]\nsectors = {str(p): 1 for p in points}\ncircos = Circos(sectors, space=0, start=-9, end=351)\n\nred_or_green = (\"red\", \"green\")\nblack_or_white = (\"black\", \"white\")\n\ncircos.rect(r_lim=(85, 100), fc=\"black\")\nfor idx, sector in enumerate(circos.sectors):\n    sector.text(sector.name, r=92.5, color=\"white\", size=12, adjust_rotation=False)\n    color_idx = idx % 2\n    sector.rect(r_lim=(80, 85), fc=red_or_green[color_idx], ec=\"lightgrey\", lw=1)\n    sector.rect(r_lim=(52.5, 80), fc=black_or_white[color_idx], ec=\"lightgrey\", lw=1)\n    sector.rect(r_lim=(47.5, 52.5), fc=red_or_green[color_idx], ec=\"lightgrey\", lw=1)\n    sector.rect(r_lim=(10, 47.5), fc=black_or_white[color_idx], ec=\"lightgrey\", lw=1)\ncircos.rect(r_lim=(5, 10), fc=\"green\")\ncircos.rect(r_lim=(0, 5), fc=\"red\")\ncircos.line(r=5, color=\"lightgrey\", lw=1)\n\nfig = circos.plotfig()\n</pre> from pycirclize import Circos  points = [20, 1, 18, 4, 13, 6, 10, 15, 2, 17, 3, 19, 7, 16, 8, 11, 14, 9, 12, 5] sectors = {str(p): 1 for p in points} circos = Circos(sectors, space=0, start=-9, end=351)  red_or_green = (\"red\", \"green\") black_or_white = (\"black\", \"white\")  circos.rect(r_lim=(85, 100), fc=\"black\") for idx, sector in enumerate(circos.sectors):     sector.text(sector.name, r=92.5, color=\"white\", size=12, adjust_rotation=False)     color_idx = idx % 2     sector.rect(r_lim=(80, 85), fc=red_or_green[color_idx], ec=\"lightgrey\", lw=1)     sector.rect(r_lim=(52.5, 80), fc=black_or_white[color_idx], ec=\"lightgrey\", lw=1)     sector.rect(r_lim=(47.5, 52.5), fc=red_or_green[color_idx], ec=\"lightgrey\", lw=1)     sector.rect(r_lim=(10, 47.5), fc=black_or_white[color_idx], ec=\"lightgrey\", lw=1) circos.rect(r_lim=(5, 10), fc=\"green\") circos.rect(r_lim=(0, 5), fc=\"red\") circos.line(r=5, color=\"lightgrey\", lw=1)  fig = circos.plotfig()"},{"location":"plot_tips/#subplots","title":"Subplots\u00b6","text":"<p>pyCirclize supports plotting to user-defined Polar Axes. Users can target subplot Polar Axes with the <code>circos.plotfig()</code> method to combine them with other plots.</p>"},{"location":"plot_tips/#grouping-sectors","title":"Grouping Sectors\u00b6","text":"<p>In pyCirclize, the space size between sectors can be set arbitrarily. By using the <code>calc_group_spaces</code> function, users can easily get the sector space size setting within/between groups based on the number of groups. Groups can be explicitly visualized as shown in the code example below.</p>"},{"location":"plot_tips/#annotation-overlap","title":"Annotation Overlap\u00b6","text":"<p>In data visualization, labels often overlap each other and interfere with data interpretation. pyCirclize implements a simple algorithm to automatically adjust label positions so that annotation labels plotted with <code>track.annotate()</code> do not overlap.</p>"},{"location":"plot_tips/#anti-clockwise","title":"Anti-clockwise\u00b6","text":"<p>pyCirclize sets the coordinate direction of each sector as clockwise by default. Users can set the coordinate direction of any sector to anti-clockwise with <code>sector2clockwise</code> option when initializing Circos instance.</p>"},{"location":"plot_tips/#colorbar","title":"Colorbar\u00b6","text":"<p>Users can easily plot colorbars with <code>circos.colorbar()</code> method.</p>"},{"location":"plot_tips/#legend","title":"Legend\u00b6","text":"<p>Example of manual legend plotting code using <code>Axes.legend()</code> method. See Legend guide for more details.</p>"},{"location":"plot_tips/#stacked-bar","title":"Stacked Bar\u00b6","text":"<p>Users can easily plot stacked bar chart from matrix dataframe with row and column names. Vertical and horizontal stacked bar chart can be plotted using <code>track.stacked_bar()</code> and <code>track.stacked_barh()</code> methods, respectively.</p>"},{"location":"plot_tips/#appendix","title":"Appendix\u00b6","text":""},{"location":"plot_tips/#1-clock","title":"1. Clock\u00b6","text":""},{"location":"plot_tips/#2-dartboard","title":"2. Dartboard\u00b6","text":""},{"location":"radar_chart/","title":"Radar Chart","text":"In\u00a0[1]: Copied! <pre># !pip install pycirclize\n</pre> # !pip install pycirclize <p>pyCirclize can plot a Radar Chart(wiki) from table dataframe.</p> In\u00a0[2]: Copied! <pre>from pycirclize import Circos\nimport pandas as pd\n\n# Create RPG jobs parameter dataframe (3 jobs, 6 parameters)\ndf = pd.DataFrame(\n    data=[\n        [80, 80, 80, 80, 80, 80],\n        [90, 95, 95, 30, 30, 80],\n        [60, 20, 20, 100, 90, 50],\n    ],\n    index=[\"Hero\", \"Warrior\", \"Wizard\"],\n    columns=[\"HP\", \"ATK\", \"DEF\", \"SP.ATK\", \"SP.DEF\", \"SPD\"],\n)\nprint(df)\n\n# Initialize Circos instance for radar chart plot\ncircos = Circos.radar_chart(df)\n\n# Plot figure\nfig = circos.plotfig()\n</pre> from pycirclize import Circos import pandas as pd  # Create RPG jobs parameter dataframe (3 jobs, 6 parameters) df = pd.DataFrame(     data=[         [80, 80, 80, 80, 80, 80],         [90, 95, 95, 30, 30, 80],         [60, 20, 20, 100, 90, 50],     ],     index=[\"Hero\", \"Warrior\", \"Wizard\"],     columns=[\"HP\", \"ATK\", \"DEF\", \"SP.ATK\", \"SP.DEF\", \"SPD\"], ) print(df)  # Initialize Circos instance for radar chart plot circos = Circos.radar_chart(df)  # Plot figure fig = circos.plotfig() <pre>         HP  ATK  DEF  SP.ATK  SP.DEF  SPD\nHero     80   80   80      80      80   80\nWarrior  90   95   95      30      30   80\nWizard   60   20   20     100      90   50\n</pre> In\u00a0[3]: Copied! <pre>from pycirclize import Circos\nimport pandas as pd\n\n# Create RPG jobs parameter dataframe (3 jobs, 7 parameters)\ndf = pd.DataFrame(\n    data=[\n        [80, 80, 80, 80, 80, 80, 80],\n        [90, 20, 95, 95, 30, 30, 80],\n        [60, 90, 20, 20, 100, 90, 50],\n    ],\n    index=[\"Hero\", \"Warrior\", \"Wizard\"],\n    columns=[\"HP\", \"MP\", \"ATK\", \"DEF\", \"SP.ATK\", \"SP.DEF\", \"SPD\"],\n)\nprint(df)\n\n# Initialize Circos instance for radar chart plot\ncircos = Circos.radar_chart(\n    df,\n    vmax=100,\n    marker_size=6,\n    circular=True,\n    cmap=\"Set2\",\n    grid_interval_ratio=0.25,\n)\n\n# Plot figure &amp; set legend on upper right\nfig = circos.plotfig()\n_ = circos.ax.legend(loc=\"upper right\")\n</pre> from pycirclize import Circos import pandas as pd  # Create RPG jobs parameter dataframe (3 jobs, 7 parameters) df = pd.DataFrame(     data=[         [80, 80, 80, 80, 80, 80, 80],         [90, 20, 95, 95, 30, 30, 80],         [60, 90, 20, 20, 100, 90, 50],     ],     index=[\"Hero\", \"Warrior\", \"Wizard\"],     columns=[\"HP\", \"MP\", \"ATK\", \"DEF\", \"SP.ATK\", \"SP.DEF\", \"SPD\"], ) print(df)  # Initialize Circos instance for radar chart plot circos = Circos.radar_chart(     df,     vmax=100,     marker_size=6,     circular=True,     cmap=\"Set2\",     grid_interval_ratio=0.25, )  # Plot figure &amp; set legend on upper right fig = circos.plotfig() _ = circos.ax.legend(loc=\"upper right\") <pre>         HP  MP  ATK  DEF  SP.ATK  SP.DEF  SPD\nHero     80  80   80   80      80      80   80\nWarrior  90  20   95   95      30      30   80\nWizard   60  90   20   20     100      90   50\n</pre> In\u00a0[6]: Copied! <pre>from pycirclize import Circos\nimport pandas as pd\n\n# Create RPG jobs parameter dataframe (4 jobs, 8 parameters)\ndf = pd.DataFrame(\n    data=[\n        [80, 80, 80, 80, 80, 80, 80, 80],\n        [90, 20, 95, 95, 30, 30, 80, 70],\n        [60, 90, 20, 20, 100, 90, 50, 70],\n        [70, 50, 60, 40, 60, 40, 100, 60],\n    ],\n    index=[\"Hero\", \"Warrior\", \"Wizard\", \"Assassin\"],\n    columns=[\"HP\", \"MP\", \"ATK\", \"DEF\", \"SP.ATK\", \"SP.DEF\", \"SPD\", \"LUK\"],\n)\nprint(df)\n\n# Define line keyword arguments handler\ndef line_kws_handler(col_name: str):\n    if col_name == \"Hero\":\n        return dict(ls=\"dotted\", lw=2.0)\n    else:\n        return dict(ls=\"solid\", lw=1.5)\n\n# Initialize Circos instance for radar chart plot\ncircos = Circos.radar_chart(\n    df,\n    vmax=100,\n    fill=False,\n    marker_size=6,\n    bg_color=None,\n    cmap=dict(Hero=\"salmon\", Warrior=\"skyblue\", Wizard=\"lime\", Assassin=\"magenta\"),\n    grid_interval_ratio=0.1,\n    grid_label_formatter=lambda v: f\"{v:.1f}pt\",\n    label_kws_handler=lambda _: dict(style=\"italic\"),\n    line_kws_handler=line_kws_handler,\n    marker_kws_handler=lambda _: dict(marker=\"s\", ec=\"grey\", lw=0.5),\n)\ncircos.text(\"RPG Jobs Radar Chart\", r=125, size=15, weight=\"bold\")\n\n# Plot figure &amp; set legend on upper right\nfig = circos.plotfig()\n_ = circos.ax.legend(\n    loc=\"upper right\",\n    handlelength=2,\n    bbox_to_anchor=(1.05, 1.05),\n    fontsize=10,\n    title=\"RPG Jobs\",\n)\n</pre> from pycirclize import Circos import pandas as pd  # Create RPG jobs parameter dataframe (4 jobs, 8 parameters) df = pd.DataFrame(     data=[         [80, 80, 80, 80, 80, 80, 80, 80],         [90, 20, 95, 95, 30, 30, 80, 70],         [60, 90, 20, 20, 100, 90, 50, 70],         [70, 50, 60, 40, 60, 40, 100, 60],     ],     index=[\"Hero\", \"Warrior\", \"Wizard\", \"Assassin\"],     columns=[\"HP\", \"MP\", \"ATK\", \"DEF\", \"SP.ATK\", \"SP.DEF\", \"SPD\", \"LUK\"], ) print(df)  # Define line keyword arguments handler def line_kws_handler(col_name: str):     if col_name == \"Hero\":         return dict(ls=\"dotted\", lw=2.0)     else:         return dict(ls=\"solid\", lw=1.5)  # Initialize Circos instance for radar chart plot circos = Circos.radar_chart(     df,     vmax=100,     fill=False,     marker_size=6,     bg_color=None,     cmap=dict(Hero=\"salmon\", Warrior=\"skyblue\", Wizard=\"lime\", Assassin=\"magenta\"),     grid_interval_ratio=0.1,     grid_label_formatter=lambda v: f\"{v:.1f}pt\",     label_kws_handler=lambda _: dict(style=\"italic\"),     line_kws_handler=line_kws_handler,     marker_kws_handler=lambda _: dict(marker=\"s\", ec=\"grey\", lw=0.5), ) circos.text(\"RPG Jobs Radar Chart\", r=125, size=15, weight=\"bold\")  # Plot figure &amp; set legend on upper right fig = circos.plotfig() _ = circos.ax.legend(     loc=\"upper right\",     handlelength=2,     bbox_to_anchor=(1.05, 1.05),     fontsize=10,     title=\"RPG Jobs\", ) <pre>          HP  MP  ATK  DEF  SP.ATK  SP.DEF  SPD  LUK\nHero      80  80   80   80      80      80   80   80\nWarrior   90  20   95   95      30      30   80   70\nWizard    60  90   20   20     100      90   50   70\nAssassin  70  50   60   40      60      40  100   60\n</pre> In\u00a0[5]: Copied! <pre>from pycirclize import Circos\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Create RPG jobs parameter dataframe (4 jobs, 8 parameters)\ndf = pd.DataFrame(\n    data=[\n        [80, 80, 80, 80, 80, 80, 80, 80],\n        [90, 20, 95, 95, 30, 30, 80, 70],\n        [60, 90, 20, 20, 100, 90, 50, 70],\n        [70, 50, 60, 40, 60, 40, 100, 60],\n    ],\n    index=[\"Hero\", \"Warrior\", \"Wizard\", \"Assassin\"],\n    columns=[\"HP\", \"MP\", \"ATK\", \"DEF\", \"SP.ATK\", \"SP.DEF\", \"SPD\", \"LUK\"],\n)\nprint(df)\n\n# Create 2 x 2 subplots\nfig = plt.figure(figsize=(16, 16), dpi=100)\nfig.subplots(2, 2, subplot_kw=dict(polar=True))\nfig.subplots_adjust(wspace=0.15, hspace=0.15)\n\n# Plot radar chart into subplots for each target\nfor target_name, ax in zip(df.index, fig.axes):\n    target_df = df.loc[[target_name]]\n\n    # Initialize Circos instance for radar chart plot\n    circos = Circos.radar_chart(\n        target_df,\n        vmax=100,\n        marker_size=6,\n        cmap=dict(Hero=\"salmon\", Warrior=\"skyblue\", Wizard=\"lime\", Assassin=\"magenta\"),\n        grid_interval_ratio=0.2,\n        line_kws_handler=lambda _: dict(lw=2, ls=\"solid\"),\n        marker_kws_handler=lambda _: dict(marker=\"D\", ec=\"grey\", lw=0.5),\n    )\n\n    # Plot figure &amp; set legend on upper right\n    circos.plotfig(ax=ax)\n    circos.ax.legend(loc=\"upper right\", fontsize=10)\n</pre> from pycirclize import Circos import pandas as pd import matplotlib.pyplot as plt  # Create RPG jobs parameter dataframe (4 jobs, 8 parameters) df = pd.DataFrame(     data=[         [80, 80, 80, 80, 80, 80, 80, 80],         [90, 20, 95, 95, 30, 30, 80, 70],         [60, 90, 20, 20, 100, 90, 50, 70],         [70, 50, 60, 40, 60, 40, 100, 60],     ],     index=[\"Hero\", \"Warrior\", \"Wizard\", \"Assassin\"],     columns=[\"HP\", \"MP\", \"ATK\", \"DEF\", \"SP.ATK\", \"SP.DEF\", \"SPD\", \"LUK\"], ) print(df)  # Create 2 x 2 subplots fig = plt.figure(figsize=(16, 16), dpi=100) fig.subplots(2, 2, subplot_kw=dict(polar=True)) fig.subplots_adjust(wspace=0.15, hspace=0.15)  # Plot radar chart into subplots for each target for target_name, ax in zip(df.index, fig.axes):     target_df = df.loc[[target_name]]      # Initialize Circos instance for radar chart plot     circos = Circos.radar_chart(         target_df,         vmax=100,         marker_size=6,         cmap=dict(Hero=\"salmon\", Warrior=\"skyblue\", Wizard=\"lime\", Assassin=\"magenta\"),         grid_interval_ratio=0.2,         line_kws_handler=lambda _: dict(lw=2, ls=\"solid\"),         marker_kws_handler=lambda _: dict(marker=\"D\", ec=\"grey\", lw=0.5),     )      # Plot figure &amp; set legend on upper right     circos.plotfig(ax=ax)     circos.ax.legend(loc=\"upper right\", fontsize=10) <pre>          HP  MP  ATK  DEF  SP.ATK  SP.DEF  SPD  LUK\nHero      80  80   80   80      80      80   80   80\nWarrior   90  20   95   95      30      30   80   70\nWizard    60  90   20   20     100      90   50   70\nAssassin  70  50   60   40      60      40  100   60\n</pre>"},{"location":"radar_chart/#default-style","title":"Default Style\u00b6","text":""},{"location":"radar_chart/#with-marker-legend","title":"With Marker &amp; Legend\u00b6","text":""},{"location":"radar_chart/#custom-style","title":"Custom Style\u00b6","text":""},{"location":"radar_chart/#subplots","title":"Subplots\u00b6","text":""},{"location":"api-docs/circos/","title":"Circos Class","text":""},{"location":"api-docs/circos/#pycirclize.circos.Circos","title":"Circos","text":"<pre><code>Circos(\n    sectors: Mapping[str, int | float | tuple[float, float]],\n    start: float = 0,\n    end: float = 360,\n    *,\n    space: float | list[float] = 0,\n    endspace: bool = True,\n    sector2clockwise: dict[str, bool] | None = None,\n    show_axis_for_debug: bool = False\n)\n</code></pre> <p>Circos Visualization Class</p> PARAMETER DESCRIPTION <code>sectors</code> <p>Sector name &amp; size (or range) dict</p> <p> TYPE: <code>Mapping[str, int | float | tuple[float, float]]</code> </p> <code>start</code> <p>Plot start degree (<code>-360 &lt;= start &lt; end &lt;= 360</code>)</p> <p> TYPE: <code>float</code> DEFAULT: <code>0</code> </p> <code>end</code> <p>Plot end degree (<code>-360 &lt;= start &lt; end &lt;= 360</code>)</p> <p> TYPE: <code>float</code> DEFAULT: <code>360</code> </p> <code>space</code> <p>Space degree(s) between sector</p> <p> TYPE: <code>float | list[float]</code> DEFAULT: <code>0</code> </p> <code>endspace</code> <p>If True, insert space after the end sector</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> <code>sector2clockwise</code> <p>Sector name &amp; clockwise bool dict. By default, <code>clockwise=True</code>.</p> <p> TYPE: <code>dict[str, bool] | None</code> DEFAULT: <code>None</code> </p> <code>show_axis_for_debug</code> <p>Show axis for position check debugging (Developer option)</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p>"},{"location":"api-docs/circos/#pycirclize.circos.Circos.rad_size","title":"rad_size  <code>property</code>","text":"<pre><code>rad_size: float\n</code></pre> <p>Circos radian size</p>"},{"location":"api-docs/circos/#pycirclize.circos.Circos.rad_lim","title":"rad_lim  <code>property</code>","text":"<pre><code>rad_lim: tuple[float, float]\n</code></pre> <p>Circos radian limit</p>"},{"location":"api-docs/circos/#pycirclize.circos.Circos.deg_size","title":"deg_size  <code>property</code>","text":"<pre><code>deg_size: float\n</code></pre> <p>Circos degree size</p>"},{"location":"api-docs/circos/#pycirclize.circos.Circos.deg_lim","title":"deg_lim  <code>property</code>","text":"<pre><code>deg_lim: tuple[float, float]\n</code></pre> <p>Circos degree limit</p>"},{"location":"api-docs/circos/#pycirclize.circos.Circos.sectors","title":"sectors  <code>property</code>","text":"<pre><code>sectors: list[Sector]\n</code></pre> <p>Sectors</p>"},{"location":"api-docs/circos/#pycirclize.circos.Circos.tracks","title":"tracks  <code>property</code>","text":"<pre><code>tracks: list[Track]\n</code></pre> <p>Tracks (from sectors)</p>"},{"location":"api-docs/circos/#pycirclize.circos.Circos.ax","title":"ax  <code>property</code>","text":"<pre><code>ax: PolarAxes\n</code></pre> <p>Plot polar axes</p> <p>Can't access <code>ax</code> property before calling <code>circos.plotfig()</code> method</p>"},{"location":"api-docs/circos/#pycirclize.circos.Circos.radar_chart","title":"radar_chart  <code>staticmethod</code>","text":"<pre><code>radar_chart(\n    table: str | Path | DataFrame | RadarTable,\n    *,\n    r_lim: tuple[float, float] = (0, 100),\n    vmin: float = 0,\n    vmax: float = 100,\n    fill: bool = True,\n    marker_size: int = 0,\n    bg_color: str | None = \"#eeeeee80\",\n    circular: bool = False,\n    cmap: str | dict[str, str] = \"Set2\",\n    show_grid_label: bool = True,\n    grid_interval_ratio: float | None = 0.2,\n    grid_line_kws: dict[str, Any] | None = None,\n    grid_label_kws: dict[str, Any] | None = None,\n    grid_label_formatter: Callable[[float], str] | None = None,\n    label_kws_handler: Callable[[str], dict[str, Any]] | None = None,\n    line_kws_handler: Callable[[str], dict[str, Any]] | None = None,\n    marker_kws_handler: Callable[[str], dict[str, Any]] | None = None\n) -&gt; Circos\n</code></pre> <p>Plot radar chart</p> PARAMETER DESCRIPTION <code>table</code> <p>Table file or Table dataframe or RadarTable instance</p> <p> TYPE: <code>str | Path | DataFrame | RadarTable</code> </p> <code>r_lim</code> <p>Radar chart radius limit region (0 - 100)</p> <p> TYPE: <code>tuple[float, float]</code> DEFAULT: <code>(0, 100)</code> </p> <code>vmin</code> <p>Min value</p> <p> TYPE: <code>float</code> DEFAULT: <code>0</code> </p> <code>vmax</code> <p>Max value</p> <p> TYPE: <code>float</code> DEFAULT: <code>100</code> </p> <code>fill</code> <p>If True, fill color of radar chart.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> <code>marker_size</code> <p>Marker size</p> <p> TYPE: <code>int</code> DEFAULT: <code>0</code> </p> <code>bg_color</code> <p>Background color</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>'#eeeeee80'</code> </p> <code>circular</code> <p>If True, plot with circular style.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>cmap</code> <p>Colormap assigned to each target row(index) in table. User can set matplotlib's colormap (e.g. <code>tab10</code>, <code>Set2</code>) or target_name -&gt; color dict (e.g. <code>dict(A=\"red\", B=\"blue\", C=\"green\", ...)</code>)</p> <p> TYPE: <code>str | dict[str, str]</code> DEFAULT: <code>'Set2'</code> </p> <code>show_grid_label</code> <p>If True, show grid label.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> <code>grid_interval_ratio</code> <p>Grid interval ratio (0.0 - 1.0)</p> <p> TYPE: <code>float | None</code> DEFAULT: <code>0.2</code> </p> <code>grid_line_kws</code> <p>Keyword arguments passed to <code>track.line()</code> method (e.g. <code>dict(color=\"black\", ls=\"dotted\", lw=1.0, ...)</code>)</p> <p> TYPE: <code>dict[str, Any] | None</code> DEFAULT: <code>None</code> </p> <code>grid_label_kws</code> <p>Keyword arguments passed to <code>track.text()</code> method (e.g. <code>dict(size=12, color=\"red\", ...)</code>)</p> <p> TYPE: <code>dict[str, Any] | None</code> DEFAULT: <code>None</code> </p> <code>grid_label_formatter</code> <p>User-defined function to format grid label (e.g. <code>lambda v: f\"{v:.1f}%\"</code>).</p> <p> TYPE: <code>Callable[[float], str] | None</code> DEFAULT: <code>None</code> </p> <code>label_kws_handler</code> <p>Handler function for keyword arguments passed to <code>track.text()</code> method. Handler function takes each column name of table as an argument.</p> <p> TYPE: <code>Callable[[str], dict[str, Any]] | None</code> DEFAULT: <code>None</code> </p> <code>line_kws_handler</code> <p>Handler function for keyword arguments passed to <code>track.line()</code> method. Handler function takes each row(index) name of table as an argument.</p> <p> TYPE: <code>Callable[[str], dict[str, Any]] | None</code> DEFAULT: <code>None</code> </p> <code>marker_kws_handler</code> <p>Handler function for keyword arguments passed to <code>track.scatter()</code> method. Handler function takes each row(index) name of table as an argument.</p> <p> TYPE: <code>Callable[[str], dict[str, Any]] | None</code> DEFAULT: <code>None</code> </p> RETURNS DESCRIPTION <code>circos</code> <p>Circos instance initialized for radar chart</p> <p> TYPE: <code>Circos</code> </p>"},{"location":"api-docs/circos/#pycirclize.circos.Circos.chord_diagram","title":"chord_diagram  <code>staticmethod</code>","text":"<pre><code>chord_diagram(\n    matrix: str | Path | DataFrame | Matrix,\n    *,\n    start: float = 0,\n    end: float = 360,\n    space: float | list[float] = 0,\n    endspace: bool = True,\n    r_lim: tuple[float, float] = (97, 100),\n    cmap: str | dict[str, str] = \"viridis\",\n    link_cmap: list[tuple[str, str, str]] | None = None,\n    ticks_interval: int | None = None,\n    order: str | list[str] | None = None,\n    label_kws: dict[str, Any] | None = None,\n    ticks_kws: dict[str, Any] | None = None,\n    link_kws: dict[str, Any] | None = None,\n    link_kws_handler: Callable[[str, str], dict[str, Any] | None] | None = None\n) -&gt; Circos\n</code></pre> <p>Plot chord diagram</p> <p>Circos tracks and links are auto-defined from Matrix</p> PARAMETER DESCRIPTION <code>matrix</code> <p>Matrix file or Matrix dataframe or Matrix instance</p> <p> TYPE: <code>str | Path | DataFrame | Matrix</code> </p> <code>start</code> <p>Plot start degree (-360 &lt;= start &lt; end &lt;= 360)</p> <p> TYPE: <code>float</code> DEFAULT: <code>0</code> </p> <code>end</code> <p>Plot end degree (-360 &lt;= start &lt; end &lt;= 360)</p> <p> TYPE: <code>float</code> DEFAULT: <code>360</code> </p> <code>space</code> <p>Space degree(s) between sector</p> <p> TYPE: <code>float | list[float]</code> DEFAULT: <code>0</code> </p> <code>endspace</code> <p>If True, insert space after the end sector</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> <code>r_lim</code> <p>Outer track radius limit region (0 - 100)</p> <p> TYPE: <code>tuple[float, float]</code> DEFAULT: <code>(97, 100)</code> </p> <code>cmap</code> <p>Colormap assigned to each outer track and link. User can set matplotlib's colormap (e.g. <code>viridis</code>, <code>jet</code>, <code>tab10</code>) or label_name -&gt; color dict (e.g. <code>dict(A=\"red\", B=\"blue\", C=\"green\", ...)</code>)</p> <p> TYPE: <code>str | dict[str, str]</code> DEFAULT: <code>'viridis'</code> </p> <code>link_cmap</code> <p>Link colormap to overwrite link colors automatically set by cmap. User can set list of <code>from_label</code>, <code>to_label</code>, <code>color</code> tuple (e.g. <code>[(\"A\", \"B\", \"red\"), (\"A\", \"C\", \"#ffff00\"), ...]</code>)</p> <p> TYPE: <code>list[tuple[str, str, str]] | None</code> DEFAULT: <code>None</code> </p> <code>ticks_interval</code> <p>Ticks interval. If None, ticks are not plotted.</p> <p> TYPE: <code>int | None</code> DEFAULT: <code>None</code> </p> <code>order</code> <p>Sort order of matrix for plotting Chord Diagram. If <code>None</code>, no sorting. If <code>asc</code>|<code>desc</code>, sort in ascending(or descending) order by node size. If node name list is set, sort in user specified node order.</p> <p> TYPE: <code>str | list[str] | None</code> DEFAULT: <code>None</code> </p> <code>label_kws</code> <p>Keyword arguments passed to <code>sector.text()</code> method (e.g. <code>dict(r=110, orientation=\"vertical\", size=15, ...)</code>)</p> <p> TYPE: <code>dict[str, Any] | None</code> DEFAULT: <code>None</code> </p> <code>ticks_kws</code> <p>Keyword arguments passed to <code>track.xticks_by_interval()</code> method (e.g. <code>dict(label_size=10, label_orientation=\"vertical\", ...)</code>)</p> <p> TYPE: <code>dict[str, Any] | None</code> DEFAULT: <code>None</code> </p> <code>link_kws</code> <p>Keyword arguments passed to <code>circos.link()</code> method (e.g. <code>dict(direction=1, ec=\"black\", lw=0.5, alpha=0.8, ...)</code>)</p> <p> TYPE: <code>dict[str, Any] | None</code> DEFAULT: <code>None</code> </p> <code>link_kws_handler</code> <p>User-defined function to handle keyword arguments for each link. This option allows user to set or override properties such as <code>fc</code>, <code>alpha</code>, <code>zorder</code>, etc... on each link. Handler function arguments <code>[str, str]</code> means <code>[from_label, to_label]</code>.</p> <p> TYPE: <code>Callable[[str, str], dict[str, Any] | None] | None</code> DEFAULT: <code>None</code> </p> RETURNS DESCRIPTION <code>circos</code> <p>Circos instance initialized from Matrix</p> <p> TYPE: <code>Circos</code> </p>"},{"location":"api-docs/circos/#pycirclize.circos.Circos.initialize_from_tree","title":"initialize_from_tree  <code>staticmethod</code>","text":"<pre><code>initialize_from_tree(\n    tree_data: str | Path | Tree,\n    *,\n    start: float = 0,\n    end: float = 360,\n    r_lim: tuple[float, float] = (50, 100),\n    format: str = \"newick\",\n    outer: bool = True,\n    align_leaf_label: bool = True,\n    ignore_branch_length: bool = False,\n    leaf_label_size: float = 12,\n    leaf_label_rmargin: float = 2.0,\n    reverse: bool = False,\n    ladderize: bool = False,\n    line_kws: dict[str, Any] | None = None,\n    label_formatter: Callable[[str], str] | None = None,\n    align_line_kws: dict[str, Any] | None = None\n) -&gt; tuple[Circos, TreeViz]\n</code></pre> <p>Initialize Circos instance from phylogenetic tree</p> <p>Circos sector and track are auto-defined by phylogenetic tree</p> PARAMETER DESCRIPTION <code>tree_data</code> <p>Tree data (<code>File</code>|<code>File URL</code>|<code>Tree Object</code>|<code>Tree String</code>)</p> <p> TYPE: <code>str | Path | Tree</code> </p> <code>start</code> <p>Plot start degree (-360 &lt;= start &lt; end &lt;= 360)</p> <p> TYPE: <code>float</code> DEFAULT: <code>0</code> </p> <code>end</code> <p>Plot end degree (-360 &lt;= start &lt; end &lt;= 360)</p> <p> TYPE: <code>float</code> DEFAULT: <code>360</code> </p> <code>r_lim</code> <p>Tree track radius limit region (0 - 100)</p> <p> TYPE: <code>tuple[float, float]</code> DEFAULT: <code>(50, 100)</code> </p> <code>format</code> <p>Tree format (<code>newick</code>|<code>phyloxml</code>|<code>nexus</code>|<code>nexml</code>|<code>cdao</code>)</p> <p> TYPE: <code>str</code> DEFAULT: <code>'newick'</code> </p> <code>outer</code> <p>If True, plot tree on outer side. If False, plot tree on inner side.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> <code>align_leaf_label</code> <p>If True, align leaf label.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> <code>ignore_branch_length</code> <p>If True, ignore branch length for plotting tree.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>leaf_label_size</code> <p>Leaf label size</p> <p> TYPE: <code>float</code> DEFAULT: <code>12</code> </p> <code>leaf_label_rmargin</code> <p>Leaf label radius margin</p> <p> TYPE: <code>float</code> DEFAULT: <code>2.0</code> </p> <code>reverse</code> <p>If True, reverse tree</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>ladderize</code> <p>If True, ladderize tree</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>line_kws</code> <p>Patch properties (e.g. <code>dict(color=\"red\", lw=1, ls=\"dashed\", ...)</code>) https://matplotlib.org/stable/api/_as_gen/matplotlib.patches.Patch.html</p> <p> TYPE: <code>dict[str, Any] | None</code> DEFAULT: <code>None</code> </p> <code>align_line_kws</code> <p>Patch properties (e.g. <code>dict(lw=1, ls=\"dotted\", alpha=1.0, ...)</code>) https://matplotlib.org/stable/api/_as_gen/matplotlib.patches.Patch.html</p> <p> TYPE: <code>dict[str, Any] | None</code> DEFAULT: <code>None</code> </p> <code>label_formatter</code> <p>User-defined label text format function to change plot label text content. For example, if you want to change underscore of the label to space, set <code>lambda t: t.replace(\"_\", \" \")</code>.</p> <p> TYPE: <code>Callable[[str], str] | None</code> DEFAULT: <code>None</code> </p> RETURNS DESCRIPTION <code>circos</code> <p>Circos instance</p> <p> TYPE: <code>Circos</code> </p> <code>tv</code> <p>TreeViz instance</p> <p> TYPE: <code>TreeViz</code> </p>"},{"location":"api-docs/circos/#pycirclize.circos.Circos.initialize_from_bed","title":"initialize_from_bed  <code>staticmethod</code>","text":"<pre><code>initialize_from_bed(\n    bed_file: str | Path,\n    start: float = 0,\n    end: float = 360,\n    *,\n    space: float | list[float] = 0,\n    endspace: bool = True,\n    sector2clockwise: dict[str, bool] | None = None\n) -&gt; Circos\n</code></pre> <p>Initialize Circos instance from BED file</p> <p>Circos sectors are auto-defined by BED chromosomes</p> PARAMETER DESCRIPTION <code>bed_file</code> <p>Chromosome BED format file (zero-based coordinate)</p> <p> TYPE: <code>str | Path</code> </p> <code>start</code> <p>Plot start degree (-360 &lt;= start &lt; end &lt;= 360)</p> <p> TYPE: <code>float</code> DEFAULT: <code>0</code> </p> <code>end</code> <p>Plot end degree (-360 &lt;= start &lt; end &lt;= 360)</p> <p> TYPE: <code>float</code> DEFAULT: <code>360</code> </p> <code>space</code> <p>Space degree(s) between sector</p> <p> TYPE: <code>float | list[float]</code> DEFAULT: <code>0</code> </p> <code>endspace</code> <p>If True, insert space after the end sector</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> <code>sector2clockwise</code> <p>Sector name &amp; clockwise bool dict. By default, <code>clockwise=True</code>.</p> <p> TYPE: <code>dict[str, bool] | None</code> DEFAULT: <code>None</code> </p> RETURNS DESCRIPTION <code>circos</code> <p>Circos instance initialized from BED file</p> <p> TYPE: <code>Circos</code> </p>"},{"location":"api-docs/circos/#pycirclize.circos.Circos.add_cytoband_tracks","title":"add_cytoband_tracks","text":"<pre><code>add_cytoband_tracks(\n    r_lim: tuple[float, float],\n    cytoband_file: str | Path,\n    *,\n    track_name: str = \"cytoband\",\n    cytoband_cmap: dict[str, str] | None = None\n) -&gt; None\n</code></pre> <p>Add track &amp; plot chromosome cytoband on each sector</p> PARAMETER DESCRIPTION <code>r_lim</code> <p>Radius limit region (0 - 100)</p> <p> TYPE: <code>tuple[float, float]</code> </p> <code>cytoband_file</code> <p>Cytoband tsv file (UCSC format)</p> <p> TYPE: <code>str | Path</code> </p> <code>track_name</code> <p>Cytoband track name. By default, <code>cytoband</code>.</p> <p> TYPE: <code>str</code> DEFAULT: <code>'cytoband'</code> </p> <code>cytoband_cmap</code> <p>User-defined cytoband colormap. If None, use Circos style colormap. (e.g. <code>{\"gpos100\": \"#000000\", \"gneg\": \"#FFFFFF\", ...}</code>)</p> <p> TYPE: <code>dict[str, str] | None</code> DEFAULT: <code>None</code> </p>"},{"location":"api-docs/circos/#pycirclize.circos.Circos.get_sector","title":"get_sector","text":"<pre><code>get_sector(name: str) -&gt; Sector\n</code></pre> <p>Get sector by name</p> PARAMETER DESCRIPTION <code>name</code> <p>Sector name</p> <p> TYPE: <code>str</code> </p> RETURNS DESCRIPTION <code>sector</code> <p>Sector</p> <p> TYPE: <code>Sector</code> </p>"},{"location":"api-docs/circos/#pycirclize.circos.Circos.get_group_sectors_deg_lim","title":"get_group_sectors_deg_lim","text":"<pre><code>get_group_sectors_deg_lim(group_sector_names: list[str]) -&gt; tuple[float, float]\n</code></pre> <p>Get degree min-max limit in target group sectors</p> PARAMETER DESCRIPTION <code>group_sector_names</code> <p>Group sector names</p> <p> TYPE: <code>list[str]</code> </p> RETURNS DESCRIPTION <code>group_sectors_deg_lim</code> <p>Degree limit in group sectors</p> <p> TYPE: <code>tuple[float, float]</code> </p>"},{"location":"api-docs/circos/#pycirclize.circos.Circos.axis","title":"axis","text":"<pre><code>axis(**kwargs) -&gt; None\n</code></pre> <p>Plot axis</p> <p>By default, simple black axis params(<code>fc=\"none\", ec=\"black\", lw=0.5</code>) are set.</p> PARAMETER DESCRIPTION <code>**kwargs</code> <p>Patch properties (e.g. <code>fc=\"red\", ec=\"blue\", lw=0.5, ...</code>) https://matplotlib.org/stable/api/_as_gen/matplotlib.patches.Patch.html</p> <p> TYPE: <code>dict</code> DEFAULT: <code>{}</code> </p>"},{"location":"api-docs/circos/#pycirclize.circos.Circos.text","title":"text","text":"<pre><code>text(\n    text: str,\n    *,\n    r: float = 0,\n    deg: float = 0,\n    adjust_rotation: bool = False,\n    orientation: str = \"horizontal\",\n    **kwargs\n) -&gt; None\n</code></pre> <p>Plot text</p> PARAMETER DESCRIPTION <code>text</code> <p>Text content</p> <p> TYPE: <code>str</code> </p> <code>r</code> <p>Radius position</p> <p> TYPE: <code>float</code> DEFAULT: <code>0</code> </p> <code>deg</code> <p>Degree position (0 - 360)</p> <p> TYPE: <code>float</code> DEFAULT: <code>0</code> </p> <code>adjust_rotation</code> <p>If True, text rotation is auto set based on <code>deg</code> param.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>orientation</code> <p>Text orientation (<code>horizontal</code> or <code>vertical</code>) If adjust_rotation=True, orientation is used for rotation calculation.</p> <p> TYPE: <code>str</code> DEFAULT: <code>'horizontal'</code> </p> <code>**kwargs</code> <p>Text properties (e.g. <code>size=12, color=\"red\", rotation=90, ...</code>) https://matplotlib.org/stable/api/_as_gen/matplotlib.axes.Axes.text.html</p> <p> TYPE: <code>dict</code> DEFAULT: <code>{}</code> </p>"},{"location":"api-docs/circos/#pycirclize.circos.Circos.line","title":"line","text":"<pre><code>line(\n    *,\n    r: float | tuple[float, float],\n    deg_lim: tuple[float, float] | None = None,\n    arc: bool = True,\n    **kwargs\n) -&gt; None\n</code></pre> <p>Plot line</p> PARAMETER DESCRIPTION <code>r</code> <p>Line radius position (0 - 100). If r is float, (r, r) is set.</p> <p> TYPE: <code>float | tuple[float, float]</code> </p> <code>deg_lim</code> <p>Degree limit region (-360 - 360). If None, <code>circos.deg_lim</code> is set.</p> <p> TYPE: <code>tuple[float, float] | None</code> DEFAULT: <code>None</code> </p> <code>arc</code> <p>If True, plot arc style line for polar projection. If False, simply plot linear style line.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> <code>**kwargs</code> <p>Patch properties (e.g. <code>color=\"red\", lw=3, ...</code>) https://matplotlib.org/stable/api/_as_gen/matplotlib.patches.Patch.html</p> <p> TYPE: <code>dict</code> DEFAULT: <code>{}</code> </p>"},{"location":"api-docs/circos/#pycirclize.circos.Circos.rect","title":"rect","text":"<pre><code>rect(\n    r_lim: tuple[float, float] = (0, 100),\n    deg_lim: tuple[float, float] | None = None,\n    **kwargs\n) -&gt; None\n</code></pre> <p>Plot rectangle</p> PARAMETER DESCRIPTION <code>r_lim</code> <p>Radius limit region (0 - 100)</p> <p> TYPE: <code>tuple[float, float]</code> DEFAULT: <code>(0, 100)</code> </p> <code>deg_lim</code> <p>Degree limit region (-360 - 360). If None, <code>circos.deg_lim</code> is set.</p> <p> TYPE: <code>tuple[float, float]</code> DEFAULT: <code>None</code> </p> <code>**kwargs</code> <p>Patch properties (e.g. <code>fc=\"red\", ec=\"black\", lw=1, hatch=\"//\", ...</code>) https://matplotlib.org/stable/api/_as_gen/matplotlib.patches.Patch.html</p> <p> TYPE: <code>dict</code> DEFAULT: <code>{}</code> </p>"},{"location":"api-docs/circos/#pycirclize.circos.Circos.link","title":"link","text":"<pre><code>link(\n    sector_region1: tuple[str, float, float],\n    sector_region2: tuple[str, float, float],\n    r1: float | None = None,\n    r2: float | None = None,\n    *,\n    color: str = \"grey\",\n    alpha: float = 0.5,\n    height_ratio: float = 0.5,\n    direction: int = 0,\n    arrow_length_ratio: float = 0.05,\n    allow_twist: bool = True,\n    **kwargs\n) -&gt; None\n</code></pre> <p>Plot link to specified region within or between sectors</p> PARAMETER DESCRIPTION <code>sector_region1</code> <p>Link sector region1 (name, start, end)</p> <p> TYPE: <code>tuple[str, float, float]</code> </p> <code>sector_region2</code> <p>Link sector region2 (name, start, end)</p> <p> TYPE: <code>tuple[str, float, float]</code> </p> <code>r1</code> <p>Link radius end position for sector_region1. If None, lowest radius position of track in target sector is set.</p> <p> TYPE: <code>float | None</code> DEFAULT: <code>None</code> </p> <code>r2</code> <p>Link radius end position for sector_region2. If None, lowest radius position of track in target sector is set.</p> <p> TYPE: <code>float | None</code> DEFAULT: <code>None</code> </p> <code>color</code> <p>Link color</p> <p> TYPE: <code>str</code> DEFAULT: <code>'grey'</code> </p> <code>alpha</code> <p>Link color alpha (transparency) value</p> <p> TYPE: <code>float</code> DEFAULT: <code>0.5</code> </p> <code>height_ratio</code> <p>Bezier curve height ratio</p> <p> TYPE: <code>float</code> DEFAULT: <code>0.5</code> </p> <code>direction</code> <p><code>0</code>: No direction edge shape (Default) <code>1</code>: Forward direction arrow edge shape (region1 -&gt; region2) <code>-1</code>: Reverse direction arrow edge shape (region1 &lt;- region2) <code>2</code>: Bidirectional arrow edge shape (region1 &lt;-&gt; region2)</p> <p> TYPE: <code>int</code> DEFAULT: <code>0</code> </p> <code>arrow_length_ratio</code> <p>Direction arrow length ratio</p> <p> TYPE: <code>float</code> DEFAULT: <code>0.05</code> </p> <code>allow_twist</code> <p>If False, twisted link is automatically resolved. http://circos.ca/documentation/tutorials/links/twists/images</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> <code>**kwargs</code> <p>Patch properties (e.g. <code>ec=\"red\", lw=1.0, hatch=\"//\", ...</code>) https://matplotlib.org/stable/api/_as_gen/matplotlib.patches.Patch.html</p> <p> TYPE: <code>dict</code> DEFAULT: <code>{}</code> </p>"},{"location":"api-docs/circos/#pycirclize.circos.Circos.link_line","title":"link_line","text":"<pre><code>link_line(\n    sector_pos1: tuple[str, float],\n    sector_pos2: tuple[str, float],\n    r1: float | None = None,\n    r2: float | None = None,\n    *,\n    color: str = \"black\",\n    height_ratio: float = 0.5,\n    direction: int = 0,\n    arrow_height: float = 3.0,\n    arrow_width: float = 2.0,\n    **kwargs\n) -&gt; None\n</code></pre> <p>Plot link line to specified position within or between sectors</p> PARAMETER DESCRIPTION <code>sector_pos1</code> <p>Link line sector position1 (name, position)</p> <p> TYPE: <code>tuple[str, float]</code> </p> <code>sector_pos2</code> <p>Link line sector position2 (name, position)</p> <p> TYPE: <code>tuple[str, float]</code> </p> <code>r1</code> <p>Link line radius end position for sector_pos1. If None, lowest radius position of track in target sector is set.</p> <p> TYPE: <code>float | None</code> DEFAULT: <code>None</code> </p> <code>r2</code> <p>Link line radius end position for sector_pos2. If None, lowest radius position of track in target sector is set.</p> <p> TYPE: <code>float | None</code> DEFAULT: <code>None</code> </p> <code>color</code> <p>Link line color</p> <p> TYPE: <code>str</code> DEFAULT: <code>'black'</code> </p> <code>height_ratio</code> <p>Bezier curve height ratio</p> <p> TYPE: <code>float</code> DEFAULT: <code>0.5</code> </p> <code>direction</code> <p><code>0</code>: No direction edge shape (Default) <code>1</code>: Forward direction arrow edge shape (pos1 -&gt; pos2) <code>-1</code>: Reverse direction arrow edge shape (pos1 &lt;- pos2) <code>2</code>: Bidirectional arrow edge shape (pos1 &lt;-&gt; pos2)</p> <p> TYPE: <code>int</code> DEFAULT: <code>0</code> </p> <code>arrow_height</code> <p>Arrow height size (Radius unit)</p> <p> TYPE: <code>float</code> DEFAULT: <code>3.0</code> </p> <code>arrow_width</code> <p>Arrow width size (Degree unit)</p> <p> TYPE: <code>float</code> DEFAULT: <code>2.0</code> </p> <code>**kwargs</code> <p>Patch properties (e.g. <code>lw=1.0, ls=\"dashed\", ...</code>) https://matplotlib.org/stable/api/_as_gen/matplotlib.patches.Patch.html</p> <p> TYPE: <code>dict</code> DEFAULT: <code>{}</code> </p>"},{"location":"api-docs/circos/#pycirclize.circos.Circos.colorbar","title":"colorbar","text":"<pre><code>colorbar(\n    bounds: tuple[float, float, float, float] = (1.02, 0.3, 0.02, 0.4),\n    *,\n    vmin: float = 0,\n    vmax: float = 1,\n    cmap: str | Colormap = \"bwr\",\n    orientation: str = \"vertical\",\n    label: str | None = None,\n    colorbar_kws: dict[str, Any] | None = None,\n    label_kws: dict[str, Any] | None = None,\n    tick_kws: dict[str, Any] | None = None\n) -&gt; None\n</code></pre> <p>Plot colorbar</p> PARAMETER DESCRIPTION <code>bounds</code> <p>Colorbar bounds tuple (<code>x</code>, <code>y</code>, <code>width</code>, <code>height</code>)</p> <p> TYPE: <code>tuple[float, float, float, float]</code> DEFAULT: <code>(1.02, 0.3, 0.02, 0.4)</code> </p> <code>vmin</code> <p>Colorbar min value</p> <p> TYPE: <code>float</code> DEFAULT: <code>0</code> </p> <code>vmax</code> <p>Colorbar max value</p> <p> TYPE: <code>float</code> DEFAULT: <code>1</code> </p> <code>cmap</code> <p>Colormap (e.g. <code>viridis</code>, <code>Spectral</code>, <code>Reds</code>, <code>Greys</code>) https://matplotlib.org/stable/tutorials/colors/colormaps.html</p> <p> TYPE: <code>str | Colormap</code> DEFAULT: <code>'bwr'</code> </p> <code>orientation</code> <p>Colorbar orientation (<code>vertical</code>|<code>horizontal</code>)</p> <p> TYPE: <code>str</code> DEFAULT: <code>'vertical'</code> </p> <code>label</code> <p>Colorbar label. If None, no label shown.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>colorbar_kws</code> <p>Colorbar properties (e.g. <code>dict(format=\"%.1f\", ...)</code>) https://matplotlib.org/stable/api/colorbar_api.html</p> <p> TYPE: <code>dict[str, Any] | None</code> DEFAULT: <code>None</code> </p> <code>label_kws</code> <p>Text properties (e.g. <code>dict(size=15, color=\"red\", ...)</code>) https://matplotlib.org/stable/api/_as_gen/matplotlib.axes.Axes.text.html</p> <p> TYPE: <code>dict[str, Any] | None</code> DEFAULT: <code>None</code> </p> <code>tick_kws</code> <p>Axes.tick_params properties (e.g. <code>dict(labelsize=12, colors=\"red\", ...)</code>) https://matplotlib.org/stable/api/_as_gen/matplotlib.axes.Axes.tick_params.html</p> <p> TYPE: <code>dict[str, Any] | None</code> DEFAULT: <code>None</code> </p>"},{"location":"api-docs/circos/#pycirclize.circos.Circos.plotfig","title":"plotfig","text":"<pre><code>plotfig(\n    dpi: int = 100, *, ax: PolarAxes | None = None, figsize: tuple[float, float] = (8, 8)\n) -&gt; Figure\n</code></pre> <p>Plot figure</p> PARAMETER DESCRIPTION <code>dpi</code> <p>Figure DPI</p> <p> TYPE: <code>int</code> DEFAULT: <code>100</code> </p> <code>ax</code> <p>If None, figure and axes are newly created.</p> <p> TYPE: <code>PolarAxes | None</code> DEFAULT: <code>None</code> </p> <code>figsize</code> <p>Figure size</p> <p> TYPE: <code>tuple[float, float]</code> DEFAULT: <code>(8, 8)</code> </p> RETURNS DESCRIPTION <code>figure</code> <p>Circos matplotlib figure</p> <p> TYPE: <code>Figure</code> </p>"},{"location":"api-docs/circos/#pycirclize.circos.Circos.savefig","title":"savefig","text":"<pre><code>savefig(\n    savefile: str | Path,\n    *,\n    dpi: int = 100,\n    figsize: tuple[float, float] = (8, 8),\n    pad_inches: float = 0.5\n) -&gt; None\n</code></pre> <p>Save figure to file</p> PARAMETER DESCRIPTION <code>savefile</code> <p>Save file (<code>*.png</code>|<code>*.jpg</code>|<code>*.svg</code>|<code>*.pdf</code>)</p> <p> TYPE: <code>str | Path</code> </p> <code>dpi</code> <p>DPI</p> <p> TYPE: <code>int</code> DEFAULT: <code>100</code> </p> <code>figsize</code> <p>Figure size</p> <p> TYPE: <code>tuple[float, float]</code> DEFAULT: <code>(8, 8)</code> </p> <code>pad_inches</code> <p>Padding inches</p> <p> TYPE: <code>float</code> DEFAULT: <code>0.5</code> </p> Warnings <p>To plot a figure that settings a user-defined legend, subtracks, or annotations, call <code>fig.savefig()</code> instead of <code>gv.savefig()</code>.</p>"},{"location":"api-docs/sector/","title":"Sector Class","text":""},{"location":"api-docs/sector/#pycirclize.sector.Sector","title":"Sector","text":"<pre><code>Sector(\n    name: str,\n    size: float | tuple[float, float],\n    rad_lim: tuple[float, float],\n    clockwise: bool = True,\n)\n</code></pre> <p>Circos Sector Class</p> PARAMETER DESCRIPTION <code>name</code> <p>Sector name</p> <p> TYPE: <code>str</code> </p> <code>size</code> <p>Sector size (or range)</p> <p> TYPE: <code>float | tuple[float, float]</code> </p> <code>rad_lim</code> <p>Sector radian limit region</p> <p> TYPE: <code>tuple[float, float]</code> </p> <code>clockwise</code> <p>Sector coordinate direction (clockwise or anti-clockwise).</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p>"},{"location":"api-docs/sector/#pycirclize.sector.Sector.name","title":"name  <code>property</code>","text":"<pre><code>name: str\n</code></pre> <p>Sector name</p>"},{"location":"api-docs/sector/#pycirclize.sector.Sector.size","title":"size  <code>property</code>","text":"<pre><code>size: float\n</code></pre> <p>Sector size (x coordinate)</p>"},{"location":"api-docs/sector/#pycirclize.sector.Sector.start","title":"start  <code>property</code>","text":"<pre><code>start: float\n</code></pre> <p>Sector start position (x coordinate)</p>"},{"location":"api-docs/sector/#pycirclize.sector.Sector.end","title":"end  <code>property</code>","text":"<pre><code>end: float\n</code></pre> <p>Sector end position (x coordinate)</p>"},{"location":"api-docs/sector/#pycirclize.sector.Sector.center","title":"center  <code>property</code>","text":"<pre><code>center: float\n</code></pre> <p>Sector center position (x coordinate)</p>"},{"location":"api-docs/sector/#pycirclize.sector.Sector.rad_size","title":"rad_size  <code>property</code>","text":"<pre><code>rad_size: float\n</code></pre> <p>Sector radian size</p>"},{"location":"api-docs/sector/#pycirclize.sector.Sector.rad_lim","title":"rad_lim  <code>property</code>","text":"<pre><code>rad_lim: tuple[float, float]\n</code></pre> <p>Sector radian limit</p>"},{"location":"api-docs/sector/#pycirclize.sector.Sector.deg_size","title":"deg_size  <code>property</code>","text":"<pre><code>deg_size: float\n</code></pre> <p>Sector degree size</p>"},{"location":"api-docs/sector/#pycirclize.sector.Sector.deg_lim","title":"deg_lim  <code>property</code>","text":"<pre><code>deg_lim: tuple[float, float]\n</code></pre> <p>Sector degree limit</p>"},{"location":"api-docs/sector/#pycirclize.sector.Sector.clockwise","title":"clockwise  <code>property</code>","text":"<pre><code>clockwise: bool\n</code></pre> <p>Sector coordinate direction</p>"},{"location":"api-docs/sector/#pycirclize.sector.Sector.tracks","title":"tracks  <code>property</code>","text":"<pre><code>tracks: list[Track]\n</code></pre> <p>Tracks in sector</p>"},{"location":"api-docs/sector/#pycirclize.sector.Sector.patches","title":"patches  <code>property</code>","text":"<pre><code>patches: list[Patch]\n</code></pre> <p>Plot patches</p>"},{"location":"api-docs/sector/#pycirclize.sector.Sector.plot_funcs","title":"plot_funcs  <code>property</code>","text":"<pre><code>plot_funcs: list[Callable[[PolarAxes], None]]\n</code></pre> <p>Plot functions</p>"},{"location":"api-docs/sector/#pycirclize.sector.Sector.add_track","title":"add_track","text":"<pre><code>add_track(\n    r_lim: tuple[float, float], *, r_pad_ratio: float = 0, name: str | None = None\n) -&gt; Track\n</code></pre> <p>Add track to sector</p> PARAMETER DESCRIPTION <code>r_lim</code> <p>Radius limit region (0 - 100)</p> <p> TYPE: <code>tuple[float, float]</code> </p> <code>r_pad_ratio</code> <p>Radius padding ratio for plot data (0 - 1.0)</p> <p> TYPE: <code>float</code> DEFAULT: <code>0</code> </p> <code>name</code> <p>Track name. If None, <code>Track{track_idx}</code> is set.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> RETURNS DESCRIPTION <code>track</code> <p>Track</p> <p> TYPE: <code>Track</code> </p>"},{"location":"api-docs/sector/#pycirclize.sector.Sector.get_track","title":"get_track","text":"<pre><code>get_track(name: str) -&gt; Track\n</code></pre> <p>Get track by name</p> PARAMETER DESCRIPTION <code>name</code> <p>Track name</p> <p> TYPE: <code>str</code> </p> RETURNS DESCRIPTION <code>track</code> <p>Target name track</p> <p> TYPE: <code>Track</code> </p>"},{"location":"api-docs/sector/#pycirclize.sector.Sector.get_lowest_r","title":"get_lowest_r","text":"<pre><code>get_lowest_r() -&gt; float\n</code></pre> <p>Get lowest radius position of sector from tracks data</p> RETURNS DESCRIPTION <code>lowest_r</code> <p>Lowest radius position. If no tracks found, <code>lowest_r=100</code>.</p> <p> TYPE: <code>float</code> </p>"},{"location":"api-docs/sector/#pycirclize.sector.Sector.x_to_rad","title":"x_to_rad","text":"<pre><code>x_to_rad(x: float, ignore_range_error: bool = False) -&gt; float\n</code></pre> <p>Convert x coordinate to radian in sector start-end range</p> PARAMETER DESCRIPTION <code>x</code> <p>X coordinate</p> <p> TYPE: <code>float</code> </p> <code>ignore_range_error</code> <p>Ignore x coordinate range error</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> RETURNS DESCRIPTION <code>rad</code> <p>Radian coordinate</p> <p> TYPE: <code>float</code> </p>"},{"location":"api-docs/sector/#pycirclize.sector.Sector.axis","title":"axis","text":"<pre><code>axis(**kwargs) -&gt; None\n</code></pre> <p>Plot axis</p> <p>By default, simple black axis params(<code>fc=\"none\", ec=\"black\", lw=0.5</code>) are set.</p> PARAMETER DESCRIPTION <code>**kwargs</code> <p>Patch properties (e.g. <code>fc=\"red\", ec=\"blue\", lw=0.5, ...</code>) https://matplotlib.org/stable/api/_as_gen/matplotlib.patches.Patch.html</p> <p> TYPE: <code>dict</code> DEFAULT: <code>{}</code> </p>"},{"location":"api-docs/sector/#pycirclize.sector.Sector.text","title":"text","text":"<pre><code>text(\n    text: str,\n    x: float | None = None,\n    r: float = 105,\n    *,\n    adjust_rotation: bool = True,\n    orientation: str = \"horizontal\",\n    ignore_range_error: bool = False,\n    **kwargs\n) -&gt; None\n</code></pre> <p>Plot text</p> PARAMETER DESCRIPTION <code>text</code> <p>Text content</p> <p> TYPE: <code>str</code> </p> <code>x</code> <p>X position. If None, sector center x is set.</p> <p> TYPE: <code>float | None</code> DEFAULT: <code>None</code> </p> <code>r</code> <p>Radius position. By default, outer position <code>r=105</code> is set.</p> <p> TYPE: <code>float</code> DEFAULT: <code>105</code> </p> <code>adjust_rotation</code> <p>If True, text rotation is auto set based on <code>x</code> and <code>orientation</code> params.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> <code>orientation</code> <p>Text orientation (<code>horizontal</code> or <code>vertical</code>)</p> <p> TYPE: <code>str</code> DEFAULT: <code>'horizontal'</code> </p> <code>ignore_range_error</code> <p>If True, ignore x position range error (ErrorCase: <code>not track.start &lt;= x &lt;= track.end</code>)</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>**kwargs</code> <p>Text properties (e.g. <code>size=12, color=\"red\", va=\"center\", ...</code>) https://matplotlib.org/stable/api/_as_gen/matplotlib.axes.Axes.text.html</p> <p> TYPE: <code>dict</code> DEFAULT: <code>{}</code> </p>"},{"location":"api-docs/sector/#pycirclize.sector.Sector.line","title":"line","text":"<pre><code>line(\n    *,\n    r: float | tuple[float, float],\n    start: float | None = None,\n    end: float | None = None,\n    arc: bool = True,\n    **kwargs\n) -&gt; None\n</code></pre> <p>Plot line</p> PARAMETER DESCRIPTION <code>r</code> <p>Line radius position (0 - 100). If r is float, (r, r) is set.</p> <p> TYPE: <code>float | tuple[float, float]</code> </p> <code>start</code> <p>Start position (x coordinate). If None, <code>sector.start</code> is set.</p> <p> TYPE: <code>float | None</code> DEFAULT: <code>None</code> </p> <code>end</code> <p>End position (x coordinate). If None, <code>sector.end</code> is set.</p> <p> TYPE: <code>float | None</code> DEFAULT: <code>None</code> </p> <code>arc</code> <p>If True, plot arc style line for polar projection. If False, simply plot linear style line.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> <code>**kwargs</code> <p>Patch properties (e.g. <code>color=\"red\", lw=3, ...</code>) https://matplotlib.org/stable/api/_as_gen/matplotlib.patches.Patch.html</p> <p> TYPE: <code>dict</code> DEFAULT: <code>{}</code> </p>"},{"location":"api-docs/sector/#pycirclize.sector.Sector.rect","title":"rect","text":"<pre><code>rect(\n    start: float | None = None,\n    end: float | None = None,\n    r_lim: tuple[float, float] | None = None,\n    **kwargs\n) -&gt; None\n</code></pre> <p>Plot rectangle</p> PARAMETER DESCRIPTION <code>start</code> <p>Start position (x coordinate). If None, <code>sector.start</code> is set.</p> <p> TYPE: <code>float | None</code> DEFAULT: <code>None</code> </p> <code>end</code> <p>End position (x coordinate). If None, <code>sector.end</code> is set.</p> <p> TYPE: <code>float | None</code> DEFAULT: <code>None</code> </p> <code>r_lim</code> <p>Radius limit region. If None, (0, 100) is set.</p> <p> TYPE: <code>tuple[float, float] | None</code> DEFAULT: <code>None</code> </p> <code>**kwargs</code> <p>Patch properties (e.g. <code>fc=\"red\", ec=\"blue\", lw=1.0, ...</code>) https://matplotlib.org/stable/api/_as_gen/matplotlib.patches.Patch.html</p> <p> TYPE: <code>dict</code> DEFAULT: <code>{}</code> </p>"},{"location":"api-docs/sector/#pycirclize.sector.Sector.raster","title":"raster","text":"<pre><code>raster(\n    img: str | Path | Image,\n    *,\n    size: float = 0.05,\n    x: float | None = None,\n    r: float = 105,\n    rotation: int | float | str | None = None,\n    border_width: int = 0,\n    label: str | None = None,\n    label_pos: str = \"bottom\",\n    label_margin: float = 0.1,\n    imshow_kws: dict[str, Any] | None = None,\n    text_kws: dict[str, Any] | None = None\n) -&gt; None\n</code></pre> <p>Plot raster image</p> <p>This method is experimental. API may change in the future release.</p> PARAMETER DESCRIPTION <code>img</code> <p>Image data (<code>File Path</code>|<code>URL</code>|<code>PIL Image</code>)</p> <p> TYPE: <code>str | Path | Image</code> </p> <code>size</code> <p>Image size (ratio to overall figure size)</p> <p> TYPE: <code>float</code> DEFAULT: <code>0.05</code> </p> <code>x</code> <p>X position. If None, sector center x position is set.</p> <p> TYPE: <code>float | None</code> DEFAULT: <code>None</code> </p> <code>r</code> <p>Radius position</p> <p> TYPE: <code>float</code> DEFAULT: <code>105</code> </p> <code>rotation</code> <p>Image rotation setting. If <code>None</code>, no rotate image (default). If <code>auto</code>, rotate image by auto set rotation. If <code>int</code> or <code>float</code> value, rotate image by user-specified value.</p> <p> TYPE: <code>int | float | str | None</code> DEFAULT: <code>None</code> </p> <code>border_width</code> <p>Border width in pixel. By default, 0 is set (no border shown).</p> <p> TYPE: <code>int</code> DEFAULT: <code>0</code> </p> <code>label</code> <p>Image label. If None, no label shown.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>label_pos</code> <p>Label plot position (<code>bottom</code> or <code>top</code>)</p> <p> TYPE: <code>str</code> DEFAULT: <code>'bottom'</code> </p> <code>label_margin</code> <p>Label margin</p> <p> TYPE: <code>float</code> DEFAULT: <code>0.1</code> </p> <code>imshow_kws</code> <p>Axes.imshow properties https://matplotlib.org/stable/api/_as_gen/matplotlib.pyplot.imshow.html</p> <p> TYPE: <code>dict[str, Any] | None</code> DEFAULT: <code>None</code> </p> <code>text_kws</code> <p>Text properties (e.g. <code>dict(size=10, color=\"red\", ...</code>) https://matplotlib.org/stable/api/_as_gen/matplotlib.axes.Axes.text.html</p> <p> TYPE: <code>dict[str, Any] | None</code> DEFAULT: <code>None</code> </p>"},{"location":"api-docs/track/","title":"Track Class","text":""},{"location":"api-docs/track/#pycirclize.track.Track","title":"Track","text":"<pre><code>Track(name: str, r_lim: tuple[float, float], r_pad_ratio: float, parent_sector: Sector)\n</code></pre> <p>Circos Track Class</p> PARAMETER DESCRIPTION <code>name</code> <p>Track name</p> <p> TYPE: <code>str</code> </p> <code>r_lim</code> <p>Track radius limit region</p> <p> TYPE: <code>tuple[float, float]</code> </p> <code>r_pad_ratio</code> <p>Track padding ratio for plot data</p> <p> TYPE: <code>float</code> </p> <code>parent_sector</code> <p>Parent sector of track</p> <p> TYPE: <code>Sector</code> </p>"},{"location":"api-docs/track/#pycirclize.track.Track.name","title":"name  <code>property</code>","text":"<pre><code>name: str\n</code></pre> <p>Track name</p>"},{"location":"api-docs/track/#pycirclize.track.Track.size","title":"size  <code>property</code>","text":"<pre><code>size: float\n</code></pre> <p>Track size (x coordinate)</p>"},{"location":"api-docs/track/#pycirclize.track.Track.start","title":"start  <code>property</code>","text":"<pre><code>start: float\n</code></pre> <p>Track start position (x coordinate)</p>"},{"location":"api-docs/track/#pycirclize.track.Track.end","title":"end  <code>property</code>","text":"<pre><code>end: float\n</code></pre> <p>Track end position (x coordinate)</p>"},{"location":"api-docs/track/#pycirclize.track.Track.center","title":"center  <code>property</code>","text":"<pre><code>center: float\n</code></pre> <p>Track center position (x coordinate)</p>"},{"location":"api-docs/track/#pycirclize.track.Track.r_size","title":"r_size  <code>property</code>","text":"<pre><code>r_size: float\n</code></pre> <p>Track radius size</p>"},{"location":"api-docs/track/#pycirclize.track.Track.r_lim","title":"r_lim  <code>property</code>","text":"<pre><code>r_lim: tuple[float, float]\n</code></pre> <p>Track radius limit</p>"},{"location":"api-docs/track/#pycirclize.track.Track.r_center","title":"r_center  <code>property</code>","text":"<pre><code>r_center: float\n</code></pre> <p>Track center radius</p>"},{"location":"api-docs/track/#pycirclize.track.Track.r_plot_size","title":"r_plot_size  <code>property</code>","text":"<pre><code>r_plot_size: float\n</code></pre> <p>Track radius size for plot data (<code>r_size</code> with padding)</p>"},{"location":"api-docs/track/#pycirclize.track.Track.r_plot_lim","title":"r_plot_lim  <code>property</code>","text":"<pre><code>r_plot_lim: tuple[float, float]\n</code></pre> <p>Track radius limit for plot data (<code>r_lim</code> with padding)</p>"},{"location":"api-docs/track/#pycirclize.track.Track.rad_size","title":"rad_size  <code>property</code>","text":"<pre><code>rad_size: float\n</code></pre> <p>Track radian size</p>"},{"location":"api-docs/track/#pycirclize.track.Track.rad_lim","title":"rad_lim  <code>property</code>","text":"<pre><code>rad_lim: tuple[float, float]\n</code></pre> <p>Track radian limit</p>"},{"location":"api-docs/track/#pycirclize.track.Track.deg_size","title":"deg_size  <code>property</code>","text":"<pre><code>deg_size: float\n</code></pre> <p>Track degree size</p>"},{"location":"api-docs/track/#pycirclize.track.Track.deg_lim","title":"deg_lim  <code>property</code>","text":"<pre><code>deg_lim: tuple[float, float]\n</code></pre> <p>Track degree limit</p>"},{"location":"api-docs/track/#pycirclize.track.Track.parent_sector","title":"parent_sector  <code>property</code>","text":"<pre><code>parent_sector: Sector\n</code></pre> <p>Parent sector</p>"},{"location":"api-docs/track/#pycirclize.track.Track.clockwise","title":"clockwise  <code>property</code>","text":"<pre><code>clockwise: bool\n</code></pre> <p>Track coordinate direction</p>"},{"location":"api-docs/track/#pycirclize.track.Track.patches","title":"patches  <code>property</code>","text":"<pre><code>patches: list[Patch]\n</code></pre> <p>Plot patches</p>"},{"location":"api-docs/track/#pycirclize.track.Track.plot_funcs","title":"plot_funcs  <code>property</code>","text":"<pre><code>plot_funcs: list[Callable[[PolarAxes], None]]\n</code></pre> <p>Plot functions</p>"},{"location":"api-docs/track/#pycirclize.track.Track.x_to_rad","title":"x_to_rad","text":"<pre><code>x_to_rad(x: float, ignore_range_error: bool = False) -&gt; float\n</code></pre> <p>Convert x coordinate to radian in track start-end range</p> PARAMETER DESCRIPTION <code>x</code> <p>X coordinate</p> <p> TYPE: <code>float</code> </p> <code>ignore_range_error</code> <p>Ignore x coordinate range error</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> RETURNS DESCRIPTION <code>rad</code> <p>Radian coordinate</p> <p> TYPE: <code>float</code> </p>"},{"location":"api-docs/track/#pycirclize.track.Track.axis","title":"axis","text":"<pre><code>axis(**kwargs) -&gt; None\n</code></pre> <p>Plot axis</p> <p>By default, simple black axis params(<code>fc=\"none\", ec=\"black\", lw=0.5</code>) are set.</p> PARAMETER DESCRIPTION <code>**kwargs</code> <p>Patch properties (e.g. <code>fc=\"tomato\", ec=\"blue\", hatch=\"//\"</code>) https://matplotlib.org/stable/api/_as_gen/matplotlib.patches.Patch.html</p> <p> TYPE: <code>dict</code> DEFAULT: <code>{}</code> </p>"},{"location":"api-docs/track/#pycirclize.track.Track.text","title":"text","text":"<pre><code>text(\n    text: str,\n    x: float | None = None,\n    r: float | None = None,\n    *,\n    adjust_rotation: bool = True,\n    orientation: str = \"horizontal\",\n    ignore_range_error: bool = False,\n    **kwargs\n) -&gt; None\n</code></pre> <p>Plot text</p> PARAMETER DESCRIPTION <code>text</code> <p>Text content</p> <p> TYPE: <code>str</code> </p> <code>x</code> <p>X position. If None, track center x position is set.</p> <p> TYPE: <code>float | None</code> DEFAULT: <code>None</code> </p> <code>r</code> <p>Radius position. If None, track center radius position is set.</p> <p> TYPE: <code>float | None</code> DEFAULT: <code>None</code> </p> <code>adjust_rotation</code> <p>If True, text rotation is auto set based on <code>x</code> and <code>orientation</code> params.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> <code>orientation</code> <p>Text orientation (<code>horizontal</code> or <code>vertical</code>) If adjust_rotation=True, orientation is used for rotation calculation.</p> <p> TYPE: <code>str</code> DEFAULT: <code>'horizontal'</code> </p> <code>ignore_range_error</code> <p>If True, ignore x position range error (ErrorCase: <code>not track.start &lt;= x &lt;= track.end</code>)</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>**kwargs</code> <p>Text properties (e.g. <code>size=12, color=\"red\", va=\"center\", ...</code>) https://matplotlib.org/stable/api/_as_gen/matplotlib.axes.Axes.text.html</p> <p> TYPE: <code>dict</code> DEFAULT: <code>{}</code> </p>"},{"location":"api-docs/track/#pycirclize.track.Track.rect","title":"rect","text":"<pre><code>rect(\n    start: float,\n    end: float,\n    *,\n    r_lim: tuple[float, float] | None = None,\n    ignore_pad: bool = False,\n    **kwargs\n) -&gt; None\n</code></pre> <p>Plot rectangle</p> PARAMETER DESCRIPTION <code>start</code> <p>Start position (x coordinate)</p> <p> TYPE: <code>float</code> </p> <code>end</code> <p>End position (x coordinate)</p> <p> TYPE: <code>float</code> </p> <code>r_lim</code> <p>Radius limit range. If None, <code>track.r_lim</code> (ignore_pad=False) or <code>track.r_plot_lim</code> (ignore_pad=True) is set.</p> <p> TYPE: <code>tuple[float, float] | None</code> DEFAULT: <code>None</code> </p> <code>ignore_pad</code> <p>If True, ignore track padding setting. If <code>r_lim</code> param is set by user, this option not works.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>**kwargs</code> <p>Patch properties (e.g. <code>fc=\"red\", ec=\"blue\", lw=1.0, ...</code>) https://matplotlib.org/stable/api/_as_gen/matplotlib.patches.Patch.html</p> <p> TYPE: <code>dict</code> DEFAULT: <code>{}</code> </p>"},{"location":"api-docs/track/#pycirclize.track.Track.arrow","title":"arrow","text":"<pre><code>arrow(\n    start: float,\n    end: float,\n    *,\n    r_lim: tuple[float, float] | None = None,\n    head_length: float = 2,\n    shaft_ratio: float = 0.5,\n    **kwargs\n) -&gt; None\n</code></pre> <p>Plot arrow</p> PARAMETER DESCRIPTION <code>start</code> <p>Start position (x coordinate)</p> <p> TYPE: <code>float</code> </p> <code>end</code> <p>End position (x coordinate)</p> <p> TYPE: <code>float</code> </p> <code>r_lim</code> <p>Radius limit range. If None, <code>track.r_lim</code> is set.</p> <p> TYPE: <code>tuple[float, float] | None</code> DEFAULT: <code>None</code> </p> <code>head_length</code> <p>Arrow head length (Degree unit)</p> <p> TYPE: <code>float</code> DEFAULT: <code>2</code> </p> <code>shaft_ratio</code> <p>Arrow shaft ratio (0 - 1.0)</p> <p> TYPE: <code>float</code> DEFAULT: <code>0.5</code> </p> <code>**kwargs</code> <p>Patch properties (e.g. <code>fc=\"red\", ec=\"blue\", lw=1.0, ...</code>) https://matplotlib.org/stable/api/_as_gen/matplotlib.patches.Patch.html</p> <p> TYPE: <code>dict</code> DEFAULT: <code>{}</code> </p>"},{"location":"api-docs/track/#pycirclize.track.Track.annotate","title":"annotate","text":"<pre><code>annotate(\n    x: float,\n    label: str,\n    *,\n    min_r: float | None = None,\n    max_r: float | None = None,\n    label_size: float = 8,\n    shorten: int | None = 20,\n    line_kws: dict[str, Any] | None = None,\n    text_kws: dict[str, Any] | None = None\n) -&gt; None\n</code></pre> <p>Plot annotation label</p> <p>The position of annotation labels is automatically adjusted so that there is no overlap between them. The current algorithm for automatic adjustment of overlap label positions is experimental and may be changed in the future.</p> PARAMETER DESCRIPTION <code>x</code> <p>X coordinate</p> <p> TYPE: <code>float</code> </p> <code>label</code> <p>Label</p> <p> TYPE: <code>str</code> </p> <code>min_r</code> <p>Min radius position of annotation line. If None, <code>max(self.r_lim)</code> is set.</p> <p> TYPE: <code>float | None</code> DEFAULT: <code>None</code> </p> <code>max_r</code> <p>Max radius position of annotation line. If None, <code>min_r + 5</code> is set.</p> <p> TYPE: <code>float | None</code> DEFAULT: <code>None</code> </p> <code>label_size</code> <p>Label size</p> <p> TYPE: <code>float</code> DEFAULT: <code>8</code> </p> <code>shorten</code> <p>Shorten label if int value is set.</p> <p> TYPE: <code>int | None</code> DEFAULT: <code>20</code> </p> <code>line_kws</code> <p>Patch properties (e.g. <code>dict(color=\"red\", lw=1, ...)</code>) https://matplotlib.org/stable/api/_as_gen/matplotlib.patches.Patch.html</p> <p> TYPE: <code>dict[str, Any] | None</code> DEFAULT: <code>None</code> </p> <code>text_kws</code> <p>Text properties (e.g. <code>dict(color=\"red\", alpha=0.5, ...)</code>) https://matplotlib.org/stable/api/_as_gen/matplotlib.axes.Axes.text.html</p> <p> TYPE: <code>dict[str, Any] | None</code> DEFAULT: <code>None</code> </p>"},{"location":"api-docs/track/#pycirclize.track.Track.xticks","title":"xticks","text":"<pre><code>xticks(\n    x: list[int] | list[float] | ndarray,\n    labels: list[str] | None = None,\n    *,\n    tick_length: float = 2,\n    outer: bool = True,\n    show_bottom_line: bool = False,\n    label_size: float = 8,\n    label_margin: float = 0.5,\n    label_orientation: str = \"horizontal\",\n    line_kws: dict[str, Any] | None = None,\n    text_kws: dict[str, Any] | None = None\n) -&gt; None\n</code></pre> <p>Plot xticks &amp; labels on user-specified position</p> <p>If you want to plot xticks and their position labels at regular intervals, it is recommended to use <code>track.xticks_by_interval()</code> instead.</p> PARAMETER DESCRIPTION <code>x</code> <p>X coordinates</p> <p> TYPE: <code>list[int] | list[float] | ndarray</code> </p> <code>labels</code> <p>Labels on xticks. If None, only plot ticks line.</p> <p> TYPE: <code>list[str] | None</code> DEFAULT: <code>None</code> </p> <code>tick_length</code> <p>Tick length (Radius unit)</p> <p> TYPE: <code>float</code> DEFAULT: <code>2</code> </p> <code>outer</code> <p>If True, show ticks on outer. If False, show ticks on inner.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> <code>show_bottom_line</code> <p>If True, show bottom line.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>label_size</code> <p>Label size</p> <p> TYPE: <code>float</code> DEFAULT: <code>8</code> </p> <code>label_margin</code> <p>Label margin size</p> <p> TYPE: <code>float</code> DEFAULT: <code>0.5</code> </p> <code>label_orientation</code> <p>Label orientation (<code>horizontal</code> or <code>vertical</code>)</p> <p> TYPE: <code>str</code> DEFAULT: <code>'horizontal'</code> </p> <code>line_kws</code> <p>Patch properties (e.g. <code>dict(ec=\"red\", lw=1, ...)</code>) https://matplotlib.org/stable/api/_as_gen/matplotlib.patches.Patch.html</p> <p> TYPE: <code>dict[str, Any] | None</code> DEFAULT: <code>None</code> </p> <code>text_kws</code> <p>Text properties (e.g. <code>dict(color=\"red\", alpha=0.5, ...)</code>) https://matplotlib.org/stable/api/_as_gen/matplotlib.axes.Axes.text.html</p> <p> TYPE: <code>dict[str, Any] | None</code> DEFAULT: <code>None</code> </p>"},{"location":"api-docs/track/#pycirclize.track.Track.xticks_by_interval","title":"xticks_by_interval","text":"<pre><code>xticks_by_interval(\n    interval: int | float,\n    *,\n    tick_length: float = 2,\n    outer: bool = True,\n    show_bottom_line: bool = False,\n    show_label: bool = True,\n    show_endlabel: bool = True,\n    label_size: float = 8,\n    label_margin: float = 0.5,\n    label_orientation: str = \"horizontal\",\n    label_formatter: Callable[[float], str] | None = None,\n    line_kws: dict[str, Any] | None = None,\n    text_kws: dict[str, Any] | None = None\n) -&gt; None\n</code></pre> <p>Plot xticks &amp; position labels by user-specified interval</p> <p><code>track.xticks_by_interval()</code> is high-level API function of <code>track.xticks()</code>. If you want to plot xticks and their labels in any position you like, use <code>track.xticks()</code> instead.</p> PARAMETER DESCRIPTION <code>interval</code> <p>Xticks interval</p> <p> TYPE: <code>int | float</code> </p> <code>tick_length</code> <p>Tick length (Radius unit)</p> <p> TYPE: <code>float</code> DEFAULT: <code>2</code> </p> <code>outer</code> <p>If True, show ticks on outer. If False, show ticks on inner.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> <code>show_bottom_line</code> <p>If True, show bottom line.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>show_label</code> <p>If True, show label of xticks interval position.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> <code>show_endlabel</code> <p>If False, no display end xtick label. Used to prevent overlap of start-end xtick labels.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> <code>label_size</code> <p>Label size</p> <p> TYPE: <code>float</code> DEFAULT: <code>8</code> </p> <code>label_margin</code> <p>Label margin size</p> <p> TYPE: <code>float</code> DEFAULT: <code>0.5</code> </p> <code>label_orientation</code> <p>Label orientation (<code>horizontal</code> or <code>vertical</code>)</p> <p> TYPE: <code>str</code> DEFAULT: <code>'horizontal'</code> </p> <code>label_formatter</code> <p>User-defined function for label format. (e.g. <code>1000 -&gt; '1.0 Kb'</code>)</p> <p> TYPE: <code>Callable[[float], str] | None</code> DEFAULT: <code>None</code> </p> <code>line_kws</code> <p>Patch properties (e.g. <code>dict(ec=\"red\", lw=1, ...)</code>) https://matplotlib.org/stable/api/_as_gen/matplotlib.patches.Patch.html</p> <p> TYPE: <code>dict[str, Any] | None</code> DEFAULT: <code>None</code> </p> <code>text_kws</code> <p>Text properties (e.g. <code>dict(color=\"red\", alpha=0.5, ...)</code>) https://matplotlib.org/stable/api/_as_gen/matplotlib.axes.Axes.text.html</p> <p> TYPE: <code>dict[str, Any] | None</code> DEFAULT: <code>None</code> </p>"},{"location":"api-docs/track/#pycirclize.track.Track.yticks","title":"yticks","text":"<pre><code>yticks(\n    y: list[int] | list[float] | ndarray,\n    labels: list[str] | None = None,\n    *,\n    vmin: float = 0,\n    vmax: float | None = None,\n    side: str = \"right\",\n    tick_length: float = 1,\n    label_size: float = 8,\n    label_margin: float = 0.5,\n    line_kws: dict[str, Any] | None = None,\n    text_kws: dict[str, Any] | None = None\n) -&gt; None\n</code></pre> <p>Plot yticks &amp; labels on user-specified position</p> PARAMETER DESCRIPTION <code>y</code> <p>Y coordinates</p> <p> TYPE: <code>list[int] | list[float] | ndarray</code> </p> <code>labels</code> <p>Labels on yticks. If None, only plot ticks line.</p> <p> TYPE: <code>list[str] | None</code> DEFAULT: <code>None</code> </p> <code>vmin</code> <p>Y min value</p> <p> TYPE: <code>float</code> DEFAULT: <code>0</code> </p> <code>vmax</code> <p>Y max value. If None, <code>max(y)</code> is set.</p> <p> TYPE: <code>float | None</code> DEFAULT: <code>None</code> </p> <code>side</code> <p>Ticks side position (<code>right</code> or <code>left</code>)</p> <p> TYPE: <code>str</code> DEFAULT: <code>'right'</code> </p> <code>tick_length</code> <p>Tick length (Degree unit)</p> <p> TYPE: <code>float</code> DEFAULT: <code>1</code> </p> <code>label_size</code> <p>Label size</p> <p> TYPE: <code>float</code> DEFAULT: <code>8</code> </p> <code>label_margin</code> <p>Label margin size</p> <p> TYPE: <code>float</code> DEFAULT: <code>0.5</code> </p> <code>line_kws</code> <p>Patch properties (e.g. <code>dict(ec=\"red\", lw=1, ...)</code>) https://matplotlib.org/stable/api/_as_gen/matplotlib.patches.Patch.html</p> <p> TYPE: <code>dict[str, Any] | None</code> DEFAULT: <code>None</code> </p> <code>text_kws</code> <p>Text properties (e.g. <code>dict(color=\"red\", alpha=0.5, ...)</code>) https://matplotlib.org/stable/api/_as_gen/matplotlib.axes.Axes.text.html</p> <p> TYPE: <code>dict[str, Any] | None</code> DEFAULT: <code>None</code> </p>"},{"location":"api-docs/track/#pycirclize.track.Track.grid","title":"grid","text":"<pre><code>grid(y_grid_num: int | None = 6, x_grid_interval: float | None = None, **kwargs) -&gt; None\n</code></pre> <p>Plot grid</p> <p>By default, <code>color=\"grey\", alpha=0.5, zorder=0</code> line params are set.</p> PARAMETER DESCRIPTION <code>y_grid_num</code> <p>Y-axis grid line number. If None, y-axis grid line is not shown.</p> <p> TYPE: <code>int | None</code> DEFAULT: <code>6</code> </p> <code>x_grid_interval</code> <p>X-axis grid line interval. If None, x-axis grid line is not shown.</p> <p> TYPE: <code>float | None</code> DEFAULT: <code>None</code> </p> <code>**kwargs</code> <p>Axes.plot properties (e.g. <code>color=\"red\", lw=0.5, ls=\"--\", ...</code>) https://matplotlib.org/stable/api/_as_gen/matplotlib.axes.Axes.plot.html</p> <p> TYPE: <code>dict</code> DEFAULT: <code>{}</code> </p>"},{"location":"api-docs/track/#pycirclize.track.Track.line","title":"line","text":"<pre><code>line(\n    x: list[float] | ndarray,\n    y: list[float] | ndarray,\n    *,\n    vmin: float = 0,\n    vmax: float | None = None,\n    arc: bool = True,\n    **kwargs\n) -&gt; None\n</code></pre> <p>Plot line</p> PARAMETER DESCRIPTION <code>x</code> <p>X coordinates</p> <p> TYPE: <code>list[float] | ndarray</code> </p> <code>y</code> <p>Y coordinates</p> <p> TYPE: <code>list[float] | ndarray</code> </p> <code>vmin</code> <p>Y min value</p> <p> TYPE: <code>float</code> DEFAULT: <code>0</code> </p> <code>vmax</code> <p>Y max value. If None, <code>max(y)</code> is set.</p> <p> TYPE: <code>float | None</code> DEFAULT: <code>None</code> </p> <code>arc</code> <p>If True, plot arc style line for polar projection. If False, simply plot linear style line.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> <code>**kwargs</code> <p>Axes.plot properties (e.g. <code>color=\"red\", lw=0.5, ls=\"--\", ...</code>) https://matplotlib.org/stable/api/_as_gen/matplotlib.axes.Axes.plot.html</p> <p> TYPE: <code>dict</code> DEFAULT: <code>{}</code> </p>"},{"location":"api-docs/track/#pycirclize.track.Track.scatter","title":"scatter","text":"<pre><code>scatter(\n    x: list[float] | ndarray,\n    y: list[float] | ndarray,\n    *,\n    vmin: float = 0,\n    vmax: float | None = None,\n    **kwargs\n) -&gt; None\n</code></pre> <p>Plot scatter</p> PARAMETER DESCRIPTION <code>x</code> <p>X position list</p> <p> TYPE: <code>list[float] | ndarray</code> </p> <code>y</code> <p>Y position list</p> <p> TYPE: <code>list[float] | ndarray</code> </p> <code>vmin</code> <p>Y min value</p> <p> TYPE: <code>float</code> DEFAULT: <code>0</code> </p> <code>vmax</code> <p>Y max value. If None, <code>max(y)</code> is set.</p> <p> TYPE: <code>float | None</code> DEFAULT: <code>None</code> </p> <code>**kwargs</code> <p>Axes.scatter properties (e.g. <code>ec=\"black\", lw=1.0, ...</code>) https://matplotlib.org/stable/api/_as_gen/matplotlib.axes.Axes.scatter.html</p> <p> TYPE: <code>dict</code> DEFAULT: <code>{}</code> </p>"},{"location":"api-docs/track/#pycirclize.track.Track.bar","title":"bar","text":"<pre><code>bar(\n    x: list[float] | ndarray,\n    height: list[float] | ndarray,\n    width: float = 0.8,\n    bottom: float | list[float] | ndarray = 0,\n    align: str = \"center\",\n    *,\n    vmin: float = 0,\n    vmax: float | None = None,\n    **kwargs\n) -&gt; None\n</code></pre> <p>Plot bar</p> PARAMETER DESCRIPTION <code>x</code> <p>Bar x coordinates</p> <p> TYPE: <code>list[float] | ndarray</code> </p> <code>height</code> <p>Bar heights</p> <p> TYPE: <code>list[float] | ndarray</code> </p> <code>width</code> <p>Bar width</p> <p> TYPE: <code>float</code> DEFAULT: <code>0.8</code> </p> <code>bottom</code> <p>Bar bottom(s)</p> <p> TYPE: <code>float | ndarray</code> DEFAULT: <code>0</code> </p> <code>align</code> <p>Bar alignment type (<code>center</code> or <code>edge</code>)</p> <p> TYPE: <code>str</code> DEFAULT: <code>'center'</code> </p> <code>vmin</code> <p>Y min value</p> <p> TYPE: <code>float</code> DEFAULT: <code>0</code> </p> <code>vmax</code> <p>Y max value. If None, <code>np.max(height + bottom)</code> is set.</p> <p> TYPE: <code>float | None</code> DEFAULT: <code>None</code> </p> <code>**kwargs</code> <p>Axes.bar properties (e.g. <code>color=\"tomato\", ec=\"black\", lw=0.5, hatch=\"//\"</code>) https://matplotlib.org/stable/api/_as_gen/matplotlib.axes.Axes.bar.html</p> <p> TYPE: <code>dict</code> DEFAULT: <code>{}</code> </p>"},{"location":"api-docs/track/#pycirclize.track.Track.stacked_bar","title":"stacked_bar","text":"<pre><code>stacked_bar(\n    table_data: str | Path | DataFrame | StackedBarTable,\n    *,\n    delimiter: str = \"\\t\",\n    width: float = 0.6,\n    cmap: str | dict[str, str] = \"tab10\",\n    vmax: float | None = None,\n    show_label: bool = True,\n    label_pos: str = \"bottom\",\n    label_margin: float = 2,\n    bar_kws: dict[str, Any] | None = None,\n    label_kws: dict[str, Any] | None = None\n) -&gt; StackedBarTable\n</code></pre> <p>Plot stacked bar from table data</p> PARAMETER DESCRIPTION <code>table_data</code> <p>Table file or Table DataFrame or StackedBarTable</p> <p> TYPE: <code>str | Path | DataFrame | StackedBarTable</code> </p> <code>delimiter</code> <p>Table file delimiter</p> <p> TYPE: <code>str</code> DEFAULT: <code>'\\t'</code> </p> <code>width</code> <p>Bar width ratio (0.0 - 1.0)</p> <p> TYPE: <code>float</code> DEFAULT: <code>0.6</code> </p> <code>cmap</code> <p>Colormap assigned to each stacked bar. User can set matplotlib's colormap (e.g. <code>tab10</code>, <code>Set3</code>) or col_name -&gt; color dict (e.g. <code>dict(A=\"red\", B=\"blue\", C=\"green\", ...)</code>)</p> <p> TYPE: <code>str | dict[str, str]</code> DEFAULT: <code>'tab10'</code> </p> <code>vmax</code> <p>Stacked bar max value. If None, max value in each row values sum is set.</p> <p> TYPE: <code>float | None</code> DEFAULT: <code>None</code> </p> <code>show_label</code> <p>Show table row names as labels</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> <code>label_pos</code> <p>Label position (<code>bottom</code>|<code>top</code>)</p> <p> TYPE: <code>str</code> DEFAULT: <code>'bottom'</code> </p> <code>label_margin</code> <p>Label margin size</p> <p> TYPE: <code>float</code> DEFAULT: <code>2</code> </p> <code>bar_kws</code> <p>Axes.bar properties (e.g. <code>dict(ec=\"black\", lw=0.5, hatch=\"//\", ...)</code>) https://matplotlib.org/stable/api/_as_gen/matplotlib.axes.Axes.bar.html</p> <p> TYPE: <code>dict[str, Any] | None</code> DEFAULT: <code>None</code> </p> <code>label_kws</code> <p>Text properties (e.g. <code>dict(size=12, orientation=\"vertical\", ...)</code>) https://matplotlib.org/stable/api/_as_gen/matplotlib.axes.Axes.text.html</p> <p> TYPE: <code>dict[str, Any] | None</code> DEFAULT: <code>None</code> </p> RETURNS DESCRIPTION <code>sb_table</code> <p>Stacked bar table</p> <p> TYPE: <code>StackedBarTable</code> </p>"},{"location":"api-docs/track/#pycirclize.track.Track.stacked_barh","title":"stacked_barh","text":"<pre><code>stacked_barh(\n    table_data: str | Path | DataFrame | StackedBarTable,\n    *,\n    delimiter: str = \"\\t\",\n    width: float = 0.6,\n    cmap: str | dict[str, str] = \"tab10\",\n    bar_kws: dict[str, Any] | None = None\n) -&gt; StackedBarTable\n</code></pre> <p>Plot horizontal stacked bar from table data</p> PARAMETER DESCRIPTION <code>table_data</code> <p>Table file or Table DataFrame or StackedBarTable</p> <p> TYPE: <code>str | Path | DataFrame | StackedBarTable</code> </p> <code>delimiter</code> <p>Table file delimiter</p> <p> TYPE: <code>str</code> DEFAULT: <code>'\\t'</code> </p> <code>width</code> <p>Bar width ratio (0.0 - 1.0)</p> <p> TYPE: <code>float</code> DEFAULT: <code>0.6</code> </p> <code>cmap</code> <p>Colormap assigned to each stacked bar. User can set matplotlib's colormap (e.g. <code>tab10</code>, <code>Set3</code>) or col_name -&gt; color dict (e.g. <code>dict(A=\"red\", B=\"blue\", C=\"green\", ...)</code>)</p> <p> TYPE: <code>str | dict[str, str]</code> DEFAULT: <code>'tab10'</code> </p> <code>bar_kws</code> <p>Patch properties for bar plot (e.g. <code>dict(ec=\"black, lw=0.2, ...)</code>)</p> <p> TYPE: <code>dict[str, Any] | None</code> DEFAULT: <code>None</code> </p> RETURNS DESCRIPTION <code>sb_table</code> <p>Stacked bar table</p> <p> TYPE: <code>StackedBarTable</code> </p>"},{"location":"api-docs/track/#pycirclize.track.Track.fill_between","title":"fill_between","text":"<pre><code>fill_between(\n    x: list[float] | ndarray,\n    y1: list[float] | ndarray,\n    y2: float | list[float] | ndarray = 0,\n    *,\n    vmin: float = 0,\n    vmax: float | None = None,\n    arc: bool = True,\n    **kwargs\n) -&gt; None\n</code></pre> <p>Fill the area between two horizontal(y1, y2) curves</p> PARAMETER DESCRIPTION <code>x</code> <p>X coordinates</p> <p> TYPE: <code>list[float] | ndarray</code> </p> <code>y1</code> <p>Y coordinates (first curve definition)</p> <p> TYPE: <code>list[float] | ndarray</code> </p> <code>y2</code> <p>Y coordinate[s] (second curve definition)</p> <p> TYPE: <code>float | list[float] | ndarray</code> DEFAULT: <code>0</code> </p> <code>vmin</code> <p>Y min value</p> <p> TYPE: <code>float</code> DEFAULT: <code>0</code> </p> <code>vmax</code> <p>Y max value. If None, <code>max(y1 + y2)</code> is set.</p> <p> TYPE: <code>float | None</code> DEFAULT: <code>None</code> </p> <code>arc</code> <p>If True, plot arc style line for polar projection. If False, simply plot linear style line.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> <code>**kwargs</code> <p>Axes.fill_between properties (e.g. <code>fc=\"red\", ec=\"black\", lw=0.1, ...</code>) https://matplotlib.org/stable/api/_as_gen/matplotlib.axes.Axes.fill_between.html</p> <p> TYPE: <code>dict</code> DEFAULT: <code>{}</code> </p>"},{"location":"api-docs/track/#pycirclize.track.Track.heatmap","title":"heatmap","text":"<pre><code>heatmap(\n    data: list | ndarray,\n    *,\n    vmin: float | None = None,\n    vmax: float | None = None,\n    start: float | None = None,\n    end: float | None = None,\n    width: float | None = None,\n    cmap: str | Colormap = \"bwr\",\n    show_value: bool = False,\n    rect_kws: dict[str, Any] | None = None,\n    text_kws: dict[str, Any] | None = None\n) -&gt; None\n</code></pre> <p>Plot heatmap</p> PARAMETER DESCRIPTION <code>data</code> <p>Numerical list, numpy 1d or 2d array</p> <p> TYPE: <code>list | ndarray</code> </p> <code>vmin</code> <p>Min value for heatmap plot. If None, <code>np.min(data)</code> is set.</p> <p> TYPE: <code>float | None</code> DEFAULT: <code>None</code> </p> <code>vmax</code> <p>Max value for heatmap plot. If None, <code>np.max(data)</code> is set.</p> <p> TYPE: <code>float | None</code> DEFAULT: <code>None</code> </p> <code>start</code> <p>Start position for heatmap plot (x coordinate). If None, <code>track.start</code> is set.</p> <p> TYPE: <code>float | None</code> DEFAULT: <code>None</code> </p> <code>end</code> <p>End position for heatmap plot (x coordinate). If None, <code>track.end</code> is set.</p> <p> TYPE: <code>float | None</code> DEFAULT: <code>None</code> </p> <code>width</code> <p>Heatmap rectangle x width size. Normally heatmap plots squares of equal width. In some cases, it is necessary to reduce the width of only the last column data square. At that time, width can be set under the following conditions. <code>(col_num - 1) * width &lt; end - start &lt; col_num * width</code></p> <p> TYPE: <code>float | None</code> DEFAULT: <code>None</code> </p> <code>cmap</code> <p>Colormap (e.g. <code>viridis</code>, <code>Spectral</code>, <code>Reds</code>, <code>Greys</code>) https://matplotlib.org/stable/tutorials/colors/colormaps.html</p> <p> TYPE: <code>str | Colormap</code> DEFAULT: <code>'bwr'</code> </p> <code>show_value</code> <p>If True, show data value on heatmap rectangle</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>rect_kws</code> <p>Patch properties (e.g. <code>dict(ec=\"black\", lw=0.5, ...)</code>) https://matplotlib.org/stable/api/_as_gen/matplotlib.patches.Patch.html</p> <p> TYPE: <code>dict[str, Any] | None</code> DEFAULT: <code>None</code> </p> <code>text_kws</code> <p>Text properties (e.g. <code>dict(size=6, color=\"red\", ...</code>) https://matplotlib.org/stable/api/_as_gen/matplotlib.axes.Axes.text.html</p> <p> TYPE: <code>dict[str, Any] | None</code> DEFAULT: <code>None</code> </p>"},{"location":"api-docs/track/#pycirclize.track.Track.raster","title":"raster","text":"<pre><code>raster(\n    img: str | Path | Image,\n    *,\n    w: float = 1.0,\n    h: float = 1.0,\n    rotate: bool = True,\n    **kwargs\n) -&gt; None\n</code></pre> <p>Plot raster image</p> PARAMETER DESCRIPTION <code>img</code> <p>Image data (<code>File Path</code>|<code>URL</code>|<code>PIL Image</code>)</p> <p> TYPE: <code>str | Path | Image</code> </p> <code>w</code> <p>Width ratio (<code>0.0 - 1.0</code>)</p> <p> TYPE: <code>float</code> DEFAULT: <code>1.0</code> </p> <code>h</code> <p>Height ratio (<code>0.0 - 1.0</code>)</p> <p> TYPE: <code>float</code> DEFAULT: <code>1.0</code> </p> <code>rotate</code> <p>If True, rotate image 180 degrees if track is in lower location (<code>-270 &lt;= degree &lt; -90</code>|<code>90 &lt;= degree &lt; 270</code>)</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> <code>**kwargs</code> <p>Axes.pcolormesh properties https://matplotlib.org/stable/api/_as_gen/matplotlib.axes.Axes.pcolormesh.html</p> <p> TYPE: <code>dict</code> DEFAULT: <code>{}</code> </p>"},{"location":"api-docs/track/#pycirclize.track.Track.tree","title":"tree","text":"<pre><code>tree(\n    tree_data: str | Path | Tree,\n    *,\n    format: str = \"newick\",\n    outer: bool = True,\n    align_leaf_label: bool = True,\n    ignore_branch_length: bool = False,\n    leaf_label_size: float = 12,\n    leaf_label_rmargin: float = 2.0,\n    reverse: bool = False,\n    ladderize: bool = False,\n    line_kws: dict[str, Any] | None = None,\n    align_line_kws: dict[str, Any] | None = None,\n    label_formatter: Callable[[str], str] | None = None\n) -&gt; TreeViz\n</code></pre> <p>Plot tree</p> <p>It is recommended that the track(sector) size be the same as the number of leaf nodes in the tree, to make it easier to combine with <code>bar</code> and <code>heatmap</code>.</p> PARAMETER DESCRIPTION <code>tree_data</code> <p>Tree data (<code>File</code>|<code>File URL</code>|<code>Tree Object</code>|<code>Tree String</code>)</p> <p> TYPE: <code>str | Path | Tree</code> </p> <code>format</code> <p>Tree format (<code>newick</code>|<code>phyloxml</code>|<code>nexus</code>|<code>nexml</code>|<code>cdao</code>)</p> <p> TYPE: <code>str</code> DEFAULT: <code>'newick'</code> </p> <code>outer</code> <p>If True, plot tree on outer side. If False, plot tree on inner side.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> <code>align_leaf_label</code> <p>If True, align leaf label.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> <code>ignore_branch_length</code> <p>If True, ignore branch length for plotting tree.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>leaf_label_size</code> <p>Leaf label size</p> <p> TYPE: <code>float</code> DEFAULT: <code>12</code> </p> <code>leaf_label_rmargin</code> <p>Leaf label radius margin</p> <p> TYPE: <code>float</code> DEFAULT: <code>2.0</code> </p> <code>reverse</code> <p>If True, reverse tree</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>ladderize</code> <p>If True, ladderize tree</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>line_kws</code> <p>Patch properties (e.g. <code>dict(color=\"red\", lw=1, ls=\"dashed\", ...)</code>) https://matplotlib.org/stable/api/_as_gen/matplotlib.patches.Patch.html</p> <p> TYPE: <code>dict[str, Any] | None</code> DEFAULT: <code>None</code> </p> <code>align_line_kws</code> <p>Patch properties (e.g. <code>dict(lw=1, ls=\"dotted\", alpha=1.0, ...)</code>) https://matplotlib.org/stable/api/_as_gen/matplotlib.patches.Patch.html</p> <p> TYPE: <code>dict[str, Any] | None</code> DEFAULT: <code>None</code> </p> <code>label_formatter</code> <p>User-defined label text format function to change plot label text content. For example, if you want to change underscore of the label to space, set <code>lambda t: t.replace(\"_\", \" \")</code>.</p> <p> TYPE: <code>Callable[[str], str] | None</code> DEFAULT: <code>None</code> </p> RETURNS DESCRIPTION <code>tv</code> <p>TreeViz instance</p> <p> TYPE: <code>TreeViz</code> </p>"},{"location":"api-docs/track/#pycirclize.track.Track.genomic_features","title":"genomic_features","text":"<pre><code>genomic_features(\n    features: SeqFeature | list[SeqFeature],\n    *,\n    plotstyle: str = \"box\",\n    r_lim: tuple[float, float] | None = None,\n    facecolor_handler: Callable[[SeqFeature], str] | None = None,\n    **kwargs\n) -&gt; None\n</code></pre> <p>Plot genomic features</p> PARAMETER DESCRIPTION <code>features</code> <p>Biopython's SeqFeature or SeqFeature list</p> <p> TYPE: <code>SeqFeature | list[SeqFeature]</code> </p> <code>plotstyle</code> <p>Plot style (<code>box</code> or <code>arrow</code>)</p> <p> TYPE: <code>str</code> DEFAULT: <code>'box'</code> </p> <code>r_lim</code> <p>Radius limit range. If None, <code>track.r_plot_lim</code> is set.</p> <p> TYPE: <code>tuple[float, float] | None</code> DEFAULT: <code>None</code> </p> <code>facecolor_handler</code> <p>User-defined function to handle facecolor</p> <p> TYPE: <code>Callable[[SeqFeature], str] | None</code> DEFAULT: <code>None</code> </p> <code>**kwargs</code> <p>Patch properties (e.g. <code>fc=\"red\", ec=\"blue\", lw=1.0, ...</code>) https://matplotlib.org/stable/api/_as_gen/matplotlib.patches.Patch.html</p> <p> TYPE: <code>dict</code> DEFAULT: <code>{}</code> </p>"},{"location":"api-docs/treeviz/","title":"TreeViz Class","text":""},{"location":"api-docs/treeviz/#pycirclize.tree.TreeViz","title":"TreeViz","text":"<pre><code>TreeViz(\n    tree_data: str | Path | Tree,\n    *,\n    format: str = \"newick\",\n    outer: bool = True,\n    align_leaf_label: bool = True,\n    ignore_branch_length: bool = False,\n    leaf_label_size: float = 12,\n    leaf_label_rmargin: float = 2.0,\n    reverse: bool = False,\n    ladderize: bool = False,\n    line_kws: dict[str, Any] | None = None,\n    align_line_kws: dict[str, Any] | None = None,\n    label_formatter: Callable[[str], str] | None = None,\n    track: Track\n)\n</code></pre> <p>Phylogenetic Tree Visualization Class</p> <p>Interface for changing tree properties and adding tree annotations in a track</p> PARAMETER DESCRIPTION <code>tree_data</code> <p>Tree data (<code>File</code>|<code>File URL</code>|<code>Tree Object</code>|<code>Tree String</code>)</p> <p> TYPE: <code>str | Path | Tree</code> </p> <code>format</code> <p>Tree format (<code>newick</code>|<code>phyloxml</code>|<code>nexus</code>|<code>nexml</code>|<code>cdao</code>)</p> <p> TYPE: <code>str</code> DEFAULT: <code>'newick'</code> </p> <code>outer</code> <p>If True, plot tree on outer side. If False, plot tree on inner side.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> <code>align_leaf_label</code> <p>If True, align leaf label.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> <code>ignore_branch_length</code> <p>If True, ignore branch length for plotting tree.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>leaf_label_size</code> <p>Leaf label size</p> <p> TYPE: <code>float</code> DEFAULT: <code>12</code> </p> <code>leaf_label_rmargin</code> <p>Leaf label radius margin</p> <p> TYPE: <code>float</code> DEFAULT: <code>2.0</code> </p> <code>reverse</code> <p>If True, reverse tree</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>ladderize</code> <p>If True, ladderize tree</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>line_kws</code> <p>Patch properties (e.g. <code>dict(color=\"red\", lw=1, ls=\"dashed\", ...)</code>) https://matplotlib.org/stable/api/_as_gen/matplotlib.patches.Patch.html</p> <p> TYPE: <code>dict[str, Any] | None</code> DEFAULT: <code>None</code> </p> <code>align_line_kws</code> <p>Patch properties (e.g. <code>dict(lw=1, ls=\"dotted\", alpha=1.0, ...)</code>) https://matplotlib.org/stable/api/_as_gen/matplotlib.patches.Patch.html</p> <p> TYPE: <code>dict[str, Any] | None</code> DEFAULT: <code>None</code> </p> <code>label_formatter</code> <p>User-defined label text format function to change plot label text content. For example, if you want to change underscore of the label to space, set <code>lambda t: t.replace(\"_\", \" \")</code>.</p> <p> TYPE: <code>Callable[[str], str] | None</code> DEFAULT: <code>None</code> </p> <code>track</code> <p>Track for tree visualization</p> <p> TYPE: <code>Track</code> </p>"},{"location":"api-docs/treeviz/#pycirclize.tree.TreeViz.track","title":"track  <code>property</code>","text":"<pre><code>track: Track\n</code></pre> <p>Track for tree visualization</p>"},{"location":"api-docs/treeviz/#pycirclize.tree.TreeViz.tree","title":"tree  <code>property</code>","text":"<pre><code>tree: Tree\n</code></pre> <p>BioPython's Tree Object</p>"},{"location":"api-docs/treeviz/#pycirclize.tree.TreeViz.leaf_num","title":"leaf_num  <code>cached</code> <code>property</code>","text":"<pre><code>leaf_num: int\n</code></pre> <p>Leaf number</p>"},{"location":"api-docs/treeviz/#pycirclize.tree.TreeViz.leaf_labels","title":"leaf_labels  <code>cached</code> <code>property</code>","text":"<pre><code>leaf_labels: list[str]\n</code></pre> <p>Leaf labels</p>"},{"location":"api-docs/treeviz/#pycirclize.tree.TreeViz.innode_labels","title":"innode_labels  <code>cached</code> <code>property</code>","text":"<pre><code>innode_labels: list[str]\n</code></pre> <p>Internal node labels</p>"},{"location":"api-docs/treeviz/#pycirclize.tree.TreeViz.all_node_labels","title":"all_node_labels  <code>cached</code> <code>property</code>","text":"<pre><code>all_node_labels: list[str]\n</code></pre> <p>All node labels</p>"},{"location":"api-docs/treeviz/#pycirclize.tree.TreeViz.max_tree_depth","title":"max_tree_depth  <code>cached</code> <code>property</code>","text":"<pre><code>max_tree_depth: float\n</code></pre> <p>Max tree depth (root -&gt; leaf max branch length)</p>"},{"location":"api-docs/treeviz/#pycirclize.tree.TreeViz.name2xr","title":"name2xr  <code>cached</code> <code>property</code>","text":"<pre><code>name2xr: dict[str, tuple[float, float]]\n</code></pre> <p>Tree node name &amp; node xr coordinate dict</p>"},{"location":"api-docs/treeviz/#pycirclize.tree.TreeViz.name2rect","title":"name2rect  <code>cached</code> <code>property</code>","text":"<pre><code>name2rect: dict[str, Rectangle]\n</code></pre> <p>Tree node name &amp; rectangle dict</p>"},{"location":"api-docs/treeviz/#pycirclize.tree.TreeViz.load_tree","title":"load_tree  <code>staticmethod</code>","text":"<pre><code>load_tree(data: str | Path | Tree, format: str) -&gt; Tree\n</code></pre> <p>Load tree data</p> PARAMETER DESCRIPTION <code>data</code> <p>Tree data</p> <p> TYPE: <code>str | Path | Tree</code> </p> <code>format</code> <p>Tree format</p> <p> TYPE: <code>str</code> </p> RETURNS DESCRIPTION <code>tree</code> <p>Tree object</p> <p> TYPE: <code>Tree</code> </p>"},{"location":"api-docs/treeviz/#pycirclize.tree.TreeViz.search_target_node_name","title":"search_target_node_name","text":"<pre><code>search_target_node_name(query: str | list[str] | tuple[str]) -&gt; str\n</code></pre> <p>Search target node name from query</p> PARAMETER DESCRIPTION <code>query</code> <p>Search query node name(s). If multiple node names are set, MRCA(Most Recent Common Ancester) node is set.</p> <p> TYPE: <code>str | list[str] | tuple[str]</code> </p> RETURNS DESCRIPTION <code>target_node_name</code> <p>Target node name</p> <p> TYPE: <code>str</code> </p>"},{"location":"api-docs/treeviz/#pycirclize.tree.TreeViz.get_target_xlim","title":"get_target_xlim","text":"<pre><code>get_target_xlim(query: str | list[str] | tuple[str]) -&gt; tuple[float, float]\n</code></pre> <p>Get target node x limit by query</p> PARAMETER DESCRIPTION <code>query</code> <p>Search query node name(s) for getting x limit. If multiple node names are set, MRCA(Most Recent Common Ancester) node is set.</p> <p> TYPE: <code>str | list[str] | tuple[str]</code> </p> RETURNS DESCRIPTION <code>xlim</code> <p>X limit tuple</p> <p> TYPE: <code>tuple[float, float]</code> </p>"},{"location":"api-docs/treeviz/#pycirclize.tree.TreeViz.show_confidence","title":"show_confidence","text":"<pre><code>show_confidence(\n    *,\n    size: float = 8,\n    orientation: str = \"vertical\",\n    label_formatter: Callable[[float], str] | None = None,\n    **kwargs\n) -&gt; None\n</code></pre> <p>Show confidence value on each internal node of the phylogenetic tree</p> PARAMETER DESCRIPTION <code>size</code> <p>Text size</p> <p> TYPE: <code>float</code> DEFAULT: <code>8</code> </p> <code>orientation</code> <p>Text orientation (<code>horizontal</code> or <code>vertical</code>)</p> <p> TYPE: <code>str</code> DEFAULT: <code>'vertical'</code> </p> <code>label_formatter</code> <p>User-defined function for label format.</p> <p> TYPE: <code>Callable[[float], str] | None</code> DEFAULT: <code>None</code> </p> <code>**kwargs</code> <p>Text properties (e.g. <code>color=\"red\", ...</code>) https://matplotlib.org/stable/api/_as_gen/matplotlib.axes.Axes.text.html</p> <p> TYPE: <code>dict</code> DEFAULT: <code>{}</code> </p>"},{"location":"api-docs/treeviz/#pycirclize.tree.TreeViz.highlight","title":"highlight","text":"<pre><code>highlight(\n    query: str | list[str] | tuple[str], *, color: str, alpha: float = 0.5, **kwargs\n) -&gt; None\n</code></pre> <p>Plot highlight for target node</p> PARAMETER DESCRIPTION <code>query</code> <p>Search query node name(s) for highlight. If multiple node names are set, MRCA(Most Recent Common Ancester) node is set.</p> <p> TYPE: <code>str | list[str] | tuple[str]</code> </p> <code>color</code> <p>Highlight color</p> <p> TYPE: <code>str</code> </p> <code>alpha</code> <p>Highlight color alpha(transparancy) value</p> <p> TYPE: <code>float</code> DEFAULT: <code>0.5</code> </p> <code>**kwargs</code> <p>Patch properties (e.g. <code>ec=\"blue\", lw=1.0, ...</code>) https://matplotlib.org/stable/api/_as_gen/matplotlib.patches.Patch.html</p> <p> TYPE: <code>dict</code> DEFAULT: <code>{}</code> </p>"},{"location":"api-docs/treeviz/#pycirclize.tree.TreeViz.marker","title":"marker","text":"<pre><code>marker(\n    query: str | list[str] | tuple[str],\n    *,\n    marker: str = \"o\",\n    size: int = 6,\n    descendent: bool = True,\n    **kwargs\n) -&gt; None\n</code></pre> <p>Plot marker on target node(s)</p> PARAMETER DESCRIPTION <code>query</code> <p>Search query node name(s) for plotting marker. If multiple node names are set, MRCA(Most Recent Common Ancester) node is set.</p> <p> TYPE: <code>str | list[str] | tuple[str]</code> </p> <code>marker</code> <p>Marker type (e.g. <code>o</code>, <code>s</code>, <code>D</code>, <code>P</code>, <code>*</code>, <code>x</code>, <code>d</code>, <code>^</code>, <code>v</code>, <code>&lt;</code>, <code>&gt;</code>) https://matplotlib.org/stable/api/markers_api.html</p> <p> TYPE: <code>str</code> DEFAULT: <code>'o'</code> </p> <code>size</code> <p>Marker size</p> <p> TYPE: <code>int</code> DEFAULT: <code>6</code> </p> <code>descendent</code> <p>If True, plot markers on target node's descendent as well.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> <code>**kwargs</code> <p>Axes.scatter properties (e.g. <code>fc=\"lime\", ec=\"black\", lw=0.5, ...</code>) https://matplotlib.org/stable/api/_as_gen/matplotlib.axes.Axes.scatter.html</p> <p> TYPE: <code>dict</code> DEFAULT: <code>{}</code> </p>"},{"location":"api-docs/treeviz/#pycirclize.tree.TreeViz.set_node_label_props","title":"set_node_label_props","text":"<pre><code>set_node_label_props(target_node_label: str, **kwargs) -&gt; None\n</code></pre> <p>Set tree node label properties</p> PARAMETER DESCRIPTION <code>target_node_label</code> <p>Target node label name</p> <p> TYPE: <code>str</code> </p> <code>kwargs</code> <p>Text properties (e.g. <code>color=\"red\", size=15, ...</code>) https://matplotlib.org/stable/api/_as_gen/matplotlib.axes.Axes.text.html</p> <p> TYPE: <code>dict</code> DEFAULT: <code>{}</code> </p>"},{"location":"api-docs/treeviz/#pycirclize.tree.TreeViz.set_node_line_props","title":"set_node_line_props","text":"<pre><code>set_node_line_props(\n    query: str | list[str] | tuple[str],\n    *,\n    descendent: bool = True,\n    apply_label_color: bool = False,\n    **kwargs\n) -&gt; None\n</code></pre> <p>Set tree node line properties</p> PARAMETER DESCRIPTION <code>query</code> <p>Search query node name(s) for coloring tree node line. If multiple node names are set, MRCA(Most Recent Common Ancester) node is set.</p> <p> TYPE: <code>str | list[str] | tuple[str]</code> </p> <code>descendent</code> <p>If True, set properties on target node's descendent as well.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> <code>apply_label_color</code> <p>If True &amp; <code>descendent=True</code> &amp; kwargs contain color keyword, apply node line color to node label color as well.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>**kwargs</code> <p>Patch properties (e.g. <code>color=\"blue\", lw=2.0, ls=\"dashed\", ...</code>) https://matplotlib.org/stable/api/_as_gen/matplotlib.axes.Axes.plot.html</p> <p> TYPE: <code>dict</code> DEFAULT: <code>{}</code> </p>"},{"location":"api-docs/utils/","title":"Utility Class","text":""},{"location":"api-docs/utils/#pycirclize.utils.dataset.load_prokaryote_example_file","title":"load_prokaryote_example_file","text":"<pre><code>load_prokaryote_example_file(\n    filename: str, cache_dir: str | Path | None = None, overwrite_cache: bool = False\n) -&gt; Path\n</code></pre> <p>Load pycirclize example Genbank or GFF file</p> <p>Load example file from https://github.com/moshi4/pycirclize-data/ and cache file in local directory (Default: <code>~/.cache/pycirclize/</code>).</p> <p>List of example Genbank or GFF filename</p> <ul> <li><code>enterobacteria_phage.[gbk|gff]</code></li> <li><code>mycoplasma_alvi.[gbk|gff]</code></li> <li><code>escherichia_coli.[gbk|gff].gz</code></li> </ul> PARAMETER DESCRIPTION <code>filename</code> <p>Genbank or GFF filename (e.g. <code>enterobacteria_phage.gff</code>)</p> <p> TYPE: <code>str</code> </p> <code>cache_dir</code> <p>Output cache directory (Default: <code>~/.cache/pycirclize/</code>)</p> <p> TYPE: <code>str | Path | None</code> DEFAULT: <code>None</code> </p> <code>overwrite_cache</code> <p>If True, overwrite cache file. Assumed to be used when cache file is corrupt.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> RETURNS DESCRIPTION <code>file_path</code> <p>Genbank or GFF file</p> <p> TYPE: <code>Path</code> </p>"},{"location":"api-docs/utils/#pycirclize.utils.dataset.load_eukaryote_example_dataset","title":"load_eukaryote_example_dataset","text":"<pre><code>load_eukaryote_example_dataset(\n    name: str = \"hg38\",\n    cache_dir: str | Path | None = None,\n    overwrite_cache: bool = False,\n) -&gt; tuple[Path, Path, list[ChrLink]]\n</code></pre> <p>Load pycirclize eukaryote example dataset</p> <p>Load example file from https://github.com/moshi4/pycirclize-data/ and cache file in local directory (Default: <code>~/.cache/pycirclize/</code>).</p> <p>List of dataset contents (download from UCSC)</p> <ol> <li>Chromosome BED file (e.g. <code>chr1 0 248956422</code>)</li> <li>Cytoband file (e.g. <code>chr1 0 2300000 p36.33 gneg</code>)</li> <li>Chromosome links (e.g. <code>chr1 1000 4321 chr3 8000 5600</code>)</li> </ol> PARAMETER DESCRIPTION <code>name</code> <p>Dataset name (<code>hg38</code>|<code>hs1</code>|<code>mm10</code>|<code>mm39</code>)</p> <p> TYPE: <code>str</code> DEFAULT: <code>'hg38'</code> </p> <code>cache_dir</code> <p>Output cache directory (Default: <code>~/.cache/pycirclize/</code>)</p> <p> TYPE: <code>str | Path | None</code> DEFAULT: <code>None</code> </p> <code>overwrite_cache</code> <p>If True, overwrite cache dataset. Assumed to be used when cache dataset is corrupt.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> RETURNS DESCRIPTION <code>chr_bed_file</code> <p>BED file</p> <p> TYPE: <code>Path</code> </p> <code>cytoband_file</code> <p>Cytoband file</p> <p> TYPE: <code>Path</code> </p> <code>chr_links</code> <p>Chromosome links</p> <p> TYPE: <code>list[ChrLink]</code> </p>"},{"location":"api-docs/utils/#pycirclize.utils.dataset.load_example_tree_file","title":"load_example_tree_file","text":"<pre><code>load_example_tree_file(filename: str) -&gt; Path\n</code></pre> <p>Load example phylogenetic tree file</p> <p>List of example tree filename</p> <ul> <li><code>small_example.nwk</code> (7 species)</li> <li><code>medium_example.nwk</code> (21 species)</li> <li><code>large_example.nwk</code> (190 species)</li> <li><code>alphabet.nwk</code> (26 species)</li> </ul> PARAMETER DESCRIPTION <code>filename</code> <p>Target filename</p> <p> TYPE: <code>str</code> </p> RETURNS DESCRIPTION <code>tree_file</code> <p>Tree file (Newick format)</p> <p> TYPE: <code>Path</code> </p>"},{"location":"api-docs/utils/#pycirclize.utils.dataset.load_example_image_file","title":"load_example_image_file","text":"<pre><code>load_example_image_file(filename: str) -&gt; Path\n</code></pre> <p>Load example image file from local package data</p> <p>e.g. <code>python_logo.png</code></p> PARAMETER DESCRIPTION <code>filename</code> <p>Image file name</p> <p> TYPE: <code>str</code> </p> RETURNS DESCRIPTION <code>image_file_path</code> <p>Image file path</p> <p> TYPE: <code>Path</code> </p>"},{"location":"api-docs/utils/#pycirclize.utils.dataset.fetch_genbank_by_accid","title":"fetch_genbank_by_accid","text":"<pre><code>fetch_genbank_by_accid(\n    accid: str, gbk_outfile: str | Path | None = None, email: str | None = None\n) -&gt; TextIOWrapper\n</code></pre> <p>Fetch genbank text by <code>Accession ID</code></p> PARAMETER DESCRIPTION <code>accid</code> <p>Accession ID</p> <p> TYPE: <code>str</code> </p> <code>gbk_outfile</code> <p>If file path is set, write fetch data to file</p> <p> TYPE: <code>str | Path | None</code> DEFAULT: <code>None</code> </p> <code>email</code> <p>Email address to notify download limitation (Required for bulk download)</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> RETURNS DESCRIPTION <code>TextIOWrapper</code> <p>Genbank data</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; gbk_fetch_data = fetch_genbank_by_accid(\"NC_002483\")\n&gt;&gt;&gt; gbk = Genbank(gbk_fetch_data)\n</code></pre>"},{"location":"api-docs/utils/#pycirclize.utils.helper.calc_group_spaces","title":"calc_group_spaces","text":"<pre><code>calc_group_spaces(\n    groups: list[int],\n    *,\n    space_bw_group: float = 15,\n    space_in_group: float = 2,\n    endspace: bool = True\n) -&gt; list[float]\n</code></pre> <p>Calculate spaces between/within groups</p> <p>This function can be used to easily calculate the space size when data is separated into multiple groups for display. For example, to set up a space to divide <code>[A, B, C, D, E, F, G, H, I, J]</code> into three groups such as <code>[(A, B, C, D), (E, F, G), (H, I, J)]</code>, set <code>groups=[4, 3, 3]</code>.</p> PARAMETER DESCRIPTION <code>groups</code> <p>List of each group number (e.g. <code>[4, 3, 3]</code>)</p> <p> TYPE: <code>list[int]</code> </p> <code>space_bw_group</code> <p>Space size between group</p> <p> TYPE: <code>float</code> DEFAULT: <code>15</code> </p> <code>space_in_group</code> <p>Space size within group</p> <p> TYPE: <code>float</code> DEFAULT: <code>2</code> </p> <code>endspace</code> <p>If True, insert space after the end group</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> RETURNS DESCRIPTION <code>spaces</code> <p>Spaces between/within groups</p> <p> TYPE: <code>list[float]</code> </p>"},{"location":"api-docs/utils/#pycirclize.utils.helper.ColorCycler","title":"ColorCycler","text":"<p>Color Cycler Class</p>"},{"location":"api-docs/utils/#pycirclize.utils.helper.ColorCycler.__new__","title":"__new__","text":"<pre><code>__new__(n: int | None = None) -&gt; str\n</code></pre> <p>Get hexcolor cyclically from cmap by counter or user specified number</p> <p><code>ColorCycler()</code> works same as <code>ColorCycler.get_color()</code></p> PARAMETER DESCRIPTION <code>n</code> <p>Number for color cycle. If None, counter class variable is used.</p> <p> TYPE: <code>int | None</code> DEFAULT: <code>None</code> </p> RETURNS DESCRIPTION <code>hexcolor</code> <p>Cyclic hexcolor string</p> <p> TYPE: <code>str</code> </p>"},{"location":"api-docs/utils/#pycirclize.utils.helper.ColorCycler.reset_cycle","title":"reset_cycle  <code>classmethod</code>","text":"<pre><code>reset_cycle() -&gt; None\n</code></pre> <p>Reset cycle counter</p>"},{"location":"api-docs/utils/#pycirclize.utils.helper.ColorCycler.set_cmap","title":"set_cmap  <code>classmethod</code>","text":"<pre><code>set_cmap(name: str) -&gt; None\n</code></pre> <p>Set colormap (Default: <code>tab10</code>)</p>"},{"location":"api-docs/utils/#pycirclize.utils.helper.ColorCycler.get_color","title":"get_color  <code>classmethod</code>","text":"<pre><code>get_color(n: int | None = None) -&gt; str\n</code></pre> <p>Get hexcolor cyclically from cmap by counter or user specified number</p> PARAMETER DESCRIPTION <code>n</code> <p>Number for color cycle. If None, counter class variable is used.</p> <p> TYPE: <code>int | None</code> DEFAULT: <code>None</code> </p> RETURNS DESCRIPTION <code>hexcolor</code> <p>Cyclic hexcolor string</p> <p> TYPE: <code>str</code> </p>"},{"location":"api-docs/utils/#pycirclize.utils.helper.ColorCycler.get_color_list","title":"get_color_list  <code>classmethod</code>","text":"<pre><code>get_color_list(n: int | None = None) -&gt; list[str]\n</code></pre> <p>Get hexcolor list of colormap</p> PARAMETER DESCRIPTION <code>n</code> <p>If n is None, all(=cmap.N) hexcolors are extracted from colormap. If n is specified, hexcolors are extracted from n equally divided colormap.</p> <p> TYPE: <code>int | None</code> DEFAULT: <code>None</code> </p> RETURNS DESCRIPTION <code>hexcolor_list</code> <p>Hexcolor list</p> <p> TYPE: <code>list[str]</code> </p>"}]}